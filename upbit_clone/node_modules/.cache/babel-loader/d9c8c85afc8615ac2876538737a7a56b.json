{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { slidingWindow, zipper } from \"@react-financial-charts/core\";\nimport { timeFormat, timeFormatDefaultLocale } from \"d3-time-format\";\nimport financeDiscontinuousScale from \"./financeDiscontinuousScale\";\nimport { defaultFormatters, levelDefinition } from \"./levels\";\n\nvar evaluateLevel = function evaluateLevel(row, date, i, formatters) {\n  return levelDefinition.map(function (eachLevel, idx) {\n    return {\n      level: levelDefinition.length - idx - 1,\n      // @ts-ignore\n      format: formatters[eachLevel(row, date, i)]\n    };\n  }).find(function (level) {\n    return !!level.format;\n  });\n};\n\nvar discontinuousIndexCalculator = slidingWindow().windowSize(2).undefinedValue(function (d, idx, _ref) {\n  var initialIndex = _ref.initialIndex,\n      formatters = _ref.formatters;\n  var i = initialIndex;\n  var row = {\n    date: d.getTime(),\n    startOfSecond: false,\n    startOf5Seconds: false,\n    startOf15Seconds: false,\n    startOf30Seconds: false,\n    startOfMinute: false,\n    startOf5Minutes: false,\n    startOf15Minutes: false,\n    startOf30Minutes: false,\n    startOfHour: false,\n    startOfEighthOfADay: false,\n    startOfQuarterDay: false,\n    startOfHalfDay: false,\n    startOfDay: true,\n    startOfWeek: false,\n    startOfMonth: false,\n    startOfQuarter: false,\n    startOfYear: false\n  };\n  var level = evaluateLevel(row, d, i, formatters);\n  return Object.assign(Object.assign(Object.assign({}, row), {\n    index: i\n  }), level);\n});\nvar discontinuousIndexCalculatorLocalTime = discontinuousIndexCalculator.accumulator(function (_ref2, i, idx, _ref3) {\n  var _ref4 = _slicedToArray(_ref2, 2),\n      prevDate = _ref4[0],\n      nowDate = _ref4[1];\n\n  var initialIndex = _ref3.initialIndex,\n      formatters = _ref3.formatters;\n  var nowSeconds = nowDate.getSeconds();\n  var nowMinutes = nowDate.getMinutes();\n  var nowHours = nowDate.getHours();\n  var nowDay = nowDate.getDay();\n  var nowMonth = nowDate.getMonth();\n  var startOfSecond = nowSeconds !== prevDate.getSeconds();\n  var startOf5Seconds = startOfSecond && nowSeconds % 5 === 0;\n  var startOf15Seconds = startOfSecond && nowSeconds % 15 === 0;\n  var startOf30Seconds = startOfSecond && nowSeconds % 30 === 0;\n  var startOfMinute = nowMinutes !== prevDate.getMinutes();\n  var startOf5Minutes = startOfMinute && nowMinutes % 5 <= prevDate.getMinutes() % 5;\n  var startOf15Minutes = startOfMinute && nowMinutes % 15 <= prevDate.getMinutes() % 15;\n  var startOf30Minutes = startOfMinute && nowMinutes % 30 <= prevDate.getMinutes() % 30;\n  var startOfHour = nowHours !== prevDate.getHours();\n  var startOfEighthOfADay = startOfHour && nowHours % 3 === 0;\n  var startOfQuarterDay = startOfHour && nowHours % 6 === 0;\n  var startOfHalfDay = startOfHour && nowHours % 12 === 0;\n  var startOfDay = nowDay !== prevDate.getDay(); // According to ISO calendar\n  // Sunday = 0, Monday = 1, ... Saturday = 6\n  // day of week of today < day of week of yesterday then today is start of week\n\n  var startOfWeek = nowDay < prevDate.getDay(); // month of today != month of yesterday then today is start of month\n\n  var startOfMonth = nowMonth !== prevDate.getMonth(); // if start of month and month % 3 === 0 then it is start of quarter\n\n  var startOfQuarter = startOfMonth && nowMonth % 3 <= prevDate.getMonth() % 3; // year of today != year of yesterday then today is start of year\n\n  var startOfYear = nowDate.getFullYear() !== prevDate.getFullYear();\n  var row = {\n    date: nowDate.getTime(),\n    startOfSecond: startOfSecond,\n    startOf5Seconds: startOf5Seconds,\n    startOf15Seconds: startOf15Seconds,\n    startOf30Seconds: startOf30Seconds,\n    startOfMinute: startOfMinute,\n    startOf5Minutes: startOf5Minutes,\n    startOf15Minutes: startOf15Minutes,\n    startOf30Minutes: startOf30Minutes,\n    startOfHour: startOfHour,\n    startOfEighthOfADay: startOfEighthOfADay,\n    startOfQuarterDay: startOfQuarterDay,\n    startOfHalfDay: startOfHalfDay,\n    startOfDay: startOfDay,\n    startOfWeek: startOfWeek,\n    startOfMonth: startOfMonth,\n    startOfQuarter: startOfQuarter,\n    startOfYear: startOfYear\n  };\n  var level = evaluateLevel(row, nowDate, i, formatters);\n  return Object.assign(Object.assign(Object.assign({}, row), {\n    index: i + initialIndex\n  }), level);\n});\n\nfunction createIndex(realDateAccessor, inputDateAccessor, initialIndex, formatters) {\n  return function (data) {\n    var dateAccessor = realDateAccessor(inputDateAccessor);\n    var calculate = discontinuousIndexCalculatorLocalTime.source(dateAccessor).misc({\n      initialIndex: initialIndex,\n      formatters: formatters\n    });\n    var index = calculate(data).map(function (each) {\n      var format = each.format;\n      return {\n        index: each.index,\n        level: each.level,\n        date: new Date(each.date),\n        format: timeFormat(format)\n      };\n    });\n    return {\n      index: index\n    };\n  };\n}\n\nexport function discontinuousTimeScaleProviderBuilder() {\n  var initialIndex = 0;\n\n  var realDateAccessor = function realDateAccessor(d) {\n    return d;\n  };\n\n  var inputDateAccessor = function inputDateAccessor(d) {\n    return d.date;\n  };\n\n  var indexAccessor = function indexAccessor(d) {\n    return d.idx;\n  };\n\n  var indexMutator = function indexMutator(d, idx) {\n    return Object.assign(Object.assign({}, d), {\n      idx: idx\n    });\n  };\n\n  var withIndex;\n  var currentFormatters = defaultFormatters;\n\n  var discontinuousTimeScaleProvider = function discontinuousTimeScaleProvider(data) {\n    var index = withIndex;\n\n    if (index === undefined) {\n      var response = createIndex(realDateAccessor, inputDateAccessor, initialIndex, currentFormatters)(data);\n      index = response.index;\n    }\n\n    var inputIndex = index;\n    var xScale = financeDiscontinuousScale(inputIndex);\n    var mergedData = zipper().combine(indexMutator);\n    var finalData = mergedData(data, inputIndex);\n    return {\n      data: finalData,\n      xScale: xScale,\n      xAccessor: function xAccessor(d) {\n        return d && indexAccessor(d).index;\n      },\n      displayXAccessor: realDateAccessor(inputDateAccessor)\n    };\n  };\n\n  discontinuousTimeScaleProvider.initialIndex = function (x) {\n    if (!arguments.length) {\n      return initialIndex;\n    }\n\n    initialIndex = x;\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.inputDateAccessor = function (x) {\n    if (!arguments.length) {\n      return inputDateAccessor;\n    }\n\n    inputDateAccessor = x;\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.indexAccessor = function (x) {\n    if (!arguments.length) {\n      return indexAccessor;\n    }\n\n    indexAccessor = x;\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.indexMutator = function (x) {\n    if (!arguments.length) {\n      return indexMutator;\n    }\n\n    indexMutator = x;\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.withIndex = function (x) {\n    if (!arguments.length) {\n      return withIndex;\n    }\n\n    withIndex = x;\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.utc = function () {\n    realDateAccessor = function realDateAccessor(dateAccessor) {\n      return function (d) {\n        var date = dateAccessor(d); // The getTimezoneOffset() method returns the time-zone offset from UTC, in minutes, for the current locale.\n\n        var offsetInMillis = date.getTimezoneOffset() * 60 * 1000;\n        return new Date(date.getTime() + offsetInMillis);\n      };\n    };\n\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.setLocale = function (locale, formatters) {\n    if (locale !== undefined) {\n      timeFormatDefaultLocale(locale);\n    }\n\n    if (formatters !== undefined) {\n      currentFormatters = formatters;\n    }\n\n    return discontinuousTimeScaleProvider;\n  };\n\n  discontinuousTimeScaleProvider.indexCalculator = function () {\n    return createIndex(realDateAccessor, inputDateAccessor, initialIndex, currentFormatters);\n  };\n\n  return discontinuousTimeScaleProvider;\n}\nexport default discontinuousTimeScaleProviderBuilder();","map":null,"metadata":{},"sourceType":"module"}