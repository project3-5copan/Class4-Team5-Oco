{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { format } from \"d3-format\";\nimport * as React from \"react\";\nimport { first, functor, getAxisCanvas, GenericChartComponent, last, noop } from \"@react-financial-charts/core\";\nimport { drawOnCanvas } from \"./EdgeCoordinateV3\";\nexport var EdgeIndicator = /*#__PURE__*/function (_React$Component) {\n  _inherits(EdgeIndicator, _React$Component);\n\n  var _super = _createSuper(EdgeIndicator);\n\n  function EdgeIndicator() {\n    var _this;\n\n    _classCallCheck(this, EdgeIndicator);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var edge = _this.helper(_this.props, moreProps);\n\n      if (edge === undefined) {\n        return;\n      }\n\n      var props = Object.assign(Object.assign({}, _this.props), edge);\n      drawOnCanvas(ctx, props);\n    };\n\n    _this.helper = function (props, moreProps) {\n      var itemType = props.itemType,\n          yAccessor = props.yAccessor;\n      var plotData = moreProps.plotData;\n      var item = itemType === \"first\" ? first(plotData, yAccessor) : last(plotData, yAccessor);\n      var edge = item !== undefined ? _this.getEdge(moreProps, item) : undefined;\n      return edge;\n    };\n\n    _this.getEdge = function (moreProps, item) {\n      var _this$props = _this.props,\n          fontFamily = _this$props.fontFamily,\n          fontSize = _this$props.fontSize,\n          edgeType = _this$props.type,\n          _this$props$displayFo = _this$props.displayFormat,\n          displayFormat = _this$props$displayFo === void 0 ? EdgeIndicator.defaultProps.displayFormat : _this$props$displayFo,\n          edgeAt = _this$props.edgeAt,\n          _this$props$yAxisPad = _this$props.yAxisPad,\n          yAxisPad = _this$props$yAxisPad === void 0 ? EdgeIndicator.defaultProps.yAxisPad : _this$props$yAxisPad,\n          orient = _this$props.orient,\n          lineStroke = _this$props.lineStroke,\n          yAccessor = _this$props.yAccessor,\n          fill = _this$props.fill,\n          fullWidth = _this$props.fullWidth,\n          textFill = _this$props.textFill,\n          rectHeight = _this$props.rectHeight,\n          rectWidth = _this$props.rectWidth,\n          arrowWidth = _this$props.arrowWidth,\n          stroke = _this$props.stroke;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          xAccessor = moreProps.xAccessor,\n          width = moreProps.width;\n      var yValue = yAccessor(item);\n\n      if (yValue === undefined) {\n        return undefined;\n      }\n\n      var xValue = xAccessor(item);\n      var x1 = fullWidth ? 0 : Math.round(xScale(xValue));\n      var y1 = Math.round(yScale(yValue));\n      var left = 0,\n          right = width;\n      var edgeX = edgeAt === \"left\" ? left - yAxisPad : right + yAxisPad;\n      return {\n        coordinate: displayFormat(yValue),\n        show: true,\n        type: edgeType,\n        orient: orient,\n        edgeAt: edgeX,\n        fill: functor(fill)(item),\n        lineStroke: functor(lineStroke)(item),\n        stroke: functor(stroke)(item),\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        textFill: functor(textFill)(item),\n        rectHeight: rectHeight,\n        rectWidth: rectWidth,\n        arrowWidth: arrowWidth,\n        x1: x1,\n        y1: y1,\n        x2: right,\n        y2: y1\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(EdgeIndicator, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(GenericChartComponent, {\n        edgeClip: true,\n        clip: false,\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: getAxisCanvas,\n        drawOn: [\"pan\"]\n      });\n    }\n  }]);\n\n  return EdgeIndicator;\n}(React.Component);\nEdgeIndicator.defaultProps = {\n  fitToText: false,\n  lineStroke: \"#000000\",\n  lineOpacity: 1,\n  lineStrokeDasharray: \"ShortDot\",\n  orient: \"right\",\n  displayFormat: format(\".2f\"),\n  edgeAt: \"right\",\n  yAxisPad: 0,\n  rectHeight: 20,\n  rectWidth: 50,\n  arrowWidth: 0,\n  fontFamily: \"-apple-system, system-ui, Roboto, 'Helvetica Neue', Ubuntu, sans-serif\",\n  fontSize: 13,\n  dx: 0,\n  hideLine: false,\n  fill: \"#8a8a8a\",\n  opacity: 1,\n  stroke: noop,\n  strokeOpacity: 1,\n  strokeWidth: 1,\n  textFill: \"#FFFFFF\",\n  type: \"horizontal\"\n};","map":null,"metadata":{},"sourceType":"module"}