{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { getCurrentItem } from \"@react-financial-charts/core/lib/utils/ChartDataUtil\";\nimport * as React from \"react\";\nimport { isHover, saveNodeType } from \"../utils\";\nimport { HoverTextNearMouse, ClickableCircle } from \"../components\";\nimport { edge1Provider, edge2Provider, LinearRegressionChannelWithArea } from \"../components/LinearRegressionChannelWithArea\";\nexport var EachLinearRegressionChannel = /*#__PURE__*/function (_React$Component) {\n  _inherits(EachLinearRegressionChannel, _React$Component);\n\n  var _super = _createSuper(EachLinearRegressionChannel);\n\n  function EachLinearRegressionChannel(props) {\n    var _this;\n\n    _classCallCheck(this, EachLinearRegressionChannel);\n\n    _this = _super.call(this, props);\n\n    _this.handleHover = function (_, moreProps) {\n      if (_this.state.hover !== moreProps.hovering) {\n        _this.setState({\n          hover: moreProps.hovering\n        });\n      }\n    };\n\n    _this.handleEdge2Drag = function (e, moreProps) {\n      var _this$props = _this.props,\n          index = _this$props.index,\n          onDrag = _this$props.onDrag,\n          snapTo = _this$props.snapTo,\n          x1Value = _this$props.x1Value;\n\n      if (onDrag === undefined) {\n        return;\n      }\n\n      var _getNewXY = getNewXY(moreProps, snapTo),\n          _getNewXY2 = _slicedToArray(_getNewXY, 1),\n          x2Value = _getNewXY2[0];\n\n      onDrag(e, index, {\n        x1Value: x1Value,\n        x2Value: x2Value\n      });\n    };\n\n    _this.handleEdge1Drag = function (e, moreProps) {\n      var _this$props2 = _this.props,\n          index = _this$props2.index,\n          onDrag = _this$props2.onDrag,\n          snapTo = _this$props2.snapTo,\n          x2Value = _this$props2.x2Value;\n\n      if (onDrag === undefined) {\n        return;\n      }\n\n      var _getNewXY3 = getNewXY(moreProps, snapTo),\n          _getNewXY4 = _slicedToArray(_getNewXY3, 1),\n          x1Value = _getNewXY4[0];\n\n      onDrag(e, index, {\n        x1Value: x1Value,\n        x2Value: x2Value\n      });\n    };\n\n    _this.isHover = isHover.bind(_assertThisInitialized(_this));\n    _this.saveNodeType = saveNodeType.bind(_assertThisInitialized(_this));\n    _this.state = {\n      hover: false\n    };\n    return _this;\n  }\n\n  _createClass(EachLinearRegressionChannel, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          x1Value = _this$props3.x1Value,\n          x2Value = _this$props3.x2Value,\n          appearance = _this$props3.appearance,\n          edgeInteractiveCursor = _this$props3.edgeInteractiveCursor,\n          hoverText = _this$props3.hoverText,\n          interactive = _this$props3.interactive,\n          selected = _this$props3.selected,\n          onDragComplete = _this$props3.onDragComplete;\n      var stroke = appearance.stroke,\n          strokeWidth = appearance.strokeWidth,\n          fill = appearance.fill,\n          r = appearance.r,\n          edgeStrokeWidth = appearance.edgeStrokeWidth,\n          edgeFill = appearance.edgeFill,\n          edgeStroke = appearance.edgeStroke;\n      var hover = this.state.hover;\n      var hoverHandler = interactive ? {\n        onHover: this.handleHover,\n        onUnHover: this.handleHover\n      } : {};\n\n      var hoverTextEnabled = hoverText.enable,\n          hoverTextSelected = hoverText.selectedText,\n          hoverTextUnselected = hoverText.text,\n          restHoverTextProps = __rest(hoverText, [\"enable\", \"selectedText\", \"text\"]);\n\n      return React.createElement(\"g\", null, React.createElement(LinearRegressionChannelWithArea, Object.assign({\n        ref: this.saveNodeType(\"area\"),\n        selected: selected || hover\n      }, hoverHandler, {\n        x1Value: x1Value,\n        x2Value: x2Value,\n        fillStyle: fill,\n        strokeStyle: stroke,\n        strokeWidth: hover || selected ? strokeWidth + 1 : strokeWidth\n      })), React.createElement(ClickableCircle, {\n        ref: this.saveNodeType(\"edge1\"),\n        show: selected || hover,\n        xyProvider: edge1Provider(this.props),\n        r: r,\n        fillStyle: edgeFill,\n        strokeStyle: edgeStroke,\n        strokeWidth: edgeStrokeWidth,\n        interactiveCursorClass: edgeInteractiveCursor,\n        onDrag: this.handleEdge1Drag,\n        onDragComplete: onDragComplete\n      }), React.createElement(ClickableCircle, {\n        ref: this.saveNodeType(\"edge2\"),\n        show: selected || hover,\n        xyProvider: edge2Provider(this.props),\n        r: r,\n        fillStyle: edgeFill,\n        strokeStyle: edgeStroke,\n        strokeWidth: edgeStrokeWidth,\n        interactiveCursorClass: edgeInteractiveCursor,\n        onDrag: this.handleEdge2Drag,\n        onDragComplete: onDragComplete\n      }), React.createElement(HoverTextNearMouse, Object.assign({\n        show: hoverTextEnabled && hover\n      }, restHoverTextProps, {\n        text: selected ? hoverTextSelected : hoverTextUnselected\n      })));\n    }\n  }]);\n\n  return EachLinearRegressionChannel;\n}(React.Component);\nEachLinearRegressionChannel.defaultProps = {\n  appearance: {\n    stroke: \"#000000\",\n    strokeWidth: 1,\n    fill: \"rgba(138, 175, 226, 0.7)\",\n    edgeStrokeWidth: 2,\n    edgeStroke: \"#000000\",\n    edgeFill: \"#FFFFFF\",\n    r: 5\n  },\n  interactive: true,\n  selected: false,\n  hoverText: Object.assign(Object.assign({}, HoverTextNearMouse.defaultProps), {\n    enable: true,\n    bgHeight: 18,\n    bgWidth: 175,\n    text: \"Click and drag the edge circles\"\n  })\n};\nexport function getNewXY(moreProps, snapTo) {\n  var xScale = moreProps.xScale,\n      xAccessor = moreProps.xAccessor,\n      plotData = moreProps.plotData,\n      mouseXY = moreProps.mouseXY;\n  var currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n  var x = xAccessor(currentItem);\n  var y = snapTo(currentItem);\n  return [x, y];\n}","map":null,"metadata":{},"sourceType":"module"}