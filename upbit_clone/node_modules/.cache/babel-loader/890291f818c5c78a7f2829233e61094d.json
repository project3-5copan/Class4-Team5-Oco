{"ast":null,"code":"/**\r\n * Hangul.js\r\n * https://github.com/e-/Hangul.js\r\n *\r\n * Copyright 2017, Jaemin Jo\r\n * under the MIT license.\r\n */\n(function () {\n  'use strict';\n\n  var CHO = ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'],\n      JUNG = ['ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', ['ㅗ', 'ㅏ'], ['ㅗ', 'ㅐ'], ['ㅗ', 'ㅣ'], 'ㅛ', 'ㅜ', ['ㅜ', 'ㅓ'], ['ㅜ', 'ㅔ'], ['ㅜ', 'ㅣ'], 'ㅠ', 'ㅡ', ['ㅡ', 'ㅣ'], 'ㅣ'],\n      JONG = ['', 'ㄱ', 'ㄲ', ['ㄱ', 'ㅅ'], 'ㄴ', ['ㄴ', 'ㅈ'], ['ㄴ', 'ㅎ'], 'ㄷ', 'ㄹ', ['ㄹ', 'ㄱ'], ['ㄹ', 'ㅁ'], ['ㄹ', 'ㅂ'], ['ㄹ', 'ㅅ'], ['ㄹ', 'ㅌ'], ['ㄹ', 'ㅍ'], ['ㄹ', 'ㅎ'], 'ㅁ', 'ㅂ', ['ㅂ', 'ㅅ'], 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'],\n      HANGUL_OFFSET = 0xAC00,\n      CONSONANTS = ['ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'],\n      COMPLETE_CHO = ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'],\n      COMPLETE_JUNG = ['ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', 'ㅘ', 'ㅙ', 'ㅚ', 'ㅛ', 'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ', 'ㅠ', 'ㅡ', 'ㅢ', 'ㅣ'],\n      COMPLETE_JONG = ['', 'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 'ㅁ', 'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'],\n      COMPLEX_CONSONANTS = [['ㄱ', 'ㅅ', 'ㄳ'], ['ㄴ', 'ㅈ', 'ㄵ'], ['ㄴ', 'ㅎ', 'ㄶ'], ['ㄹ', 'ㄱ', 'ㄺ'], ['ㄹ', 'ㅁ', 'ㄻ'], ['ㄹ', 'ㅂ', 'ㄼ'], ['ㄹ', 'ㅅ', 'ㄽ'], ['ㄹ', 'ㅌ', 'ㄾ'], ['ㄹ', 'ㅍ', 'ㄿ'], ['ㄹ', 'ㅎ', 'ㅀ'], ['ㅂ', 'ㅅ', 'ㅄ']],\n      COMPLEX_VOWELS = [['ㅗ', 'ㅏ', 'ㅘ'], ['ㅗ', 'ㅐ', 'ㅙ'], ['ㅗ', 'ㅣ', 'ㅚ'], ['ㅜ', 'ㅓ', 'ㅝ'], ['ㅜ', 'ㅔ', 'ㅞ'], ['ㅜ', 'ㅣ', 'ㅟ'], ['ㅡ', 'ㅣ', 'ㅢ']],\n      CONSONANTS_HASH,\n      CHO_HASH,\n      JUNG_HASH,\n      JONG_HASH,\n      COMPLEX_CONSONANTS_HASH,\n      COMPLEX_VOWELS_HASH;\n\n  function _makeHash(array) {\n    var length = array.length,\n        hash = {\n      0: 0\n    };\n\n    for (var i = 0; i < length; i++) {\n      if (array[i]) hash[array[i].charCodeAt(0)] = i;\n    }\n\n    return hash;\n  }\n\n  CONSONANTS_HASH = _makeHash(CONSONANTS);\n  CHO_HASH = _makeHash(COMPLETE_CHO);\n  JUNG_HASH = _makeHash(COMPLETE_JUNG);\n  JONG_HASH = _makeHash(COMPLETE_JONG);\n\n  function _makeComplexHash(array) {\n    var length = array.length,\n        hash = {},\n        code1,\n        code2;\n\n    for (var i = 0; i < length; i++) {\n      code1 = array[i][0].charCodeAt(0);\n      code2 = array[i][1].charCodeAt(0);\n\n      if (typeof hash[code1] === 'undefined') {\n        hash[code1] = {};\n      }\n\n      hash[code1][code2] = array[i][2].charCodeAt(0);\n    }\n\n    return hash;\n  }\n\n  COMPLEX_CONSONANTS_HASH = _makeComplexHash(COMPLEX_CONSONANTS);\n  COMPLEX_VOWELS_HASH = _makeComplexHash(COMPLEX_VOWELS);\n\n  function _isConsonant(c) {\n    return typeof CONSONANTS_HASH[c] !== 'undefined';\n  }\n\n  function _isCho(c) {\n    return typeof CHO_HASH[c] !== 'undefined';\n  }\n\n  function _isJung(c) {\n    return typeof JUNG_HASH[c] !== 'undefined';\n  }\n\n  function _isJong(c) {\n    return typeof JONG_HASH[c] !== 'undefined';\n  }\n\n  function _isHangul(c\n  /* code number */\n  ) {\n    return 0xAC00 <= c && c <= 0xd7a3;\n  }\n\n  function _isJungJoinable(a, b) {\n    return COMPLEX_VOWELS_HASH[a] && COMPLEX_VOWELS_HASH[a][b] ? COMPLEX_VOWELS_HASH[a][b] : false;\n  }\n\n  function _isJongJoinable(a, b) {\n    return COMPLEX_CONSONANTS_HASH[a] && COMPLEX_CONSONANTS_HASH[a][b] ? COMPLEX_CONSONANTS_HASH[a][b] : false;\n  }\n\n  var disassemble = function disassemble(string, grouped) {\n    if (string === null) {\n      throw new Error('Arguments cannot be null');\n    }\n\n    if (typeof string === 'object') {\n      string = string.join('');\n    }\n\n    var result = [],\n        length = string.length,\n        cho,\n        jung,\n        jong,\n        code,\n        r;\n\n    for (var i = 0; i < length; i++) {\n      var temp = [];\n      code = string.charCodeAt(i);\n\n      if (_isHangul(code)) {\n        // 완성된 한글이면\n        code -= HANGUL_OFFSET;\n        jong = code % 28;\n        jung = (code - jong) / 28 % 21;\n        cho = parseInt((code - jong) / 28 / 21);\n        temp.push(CHO[cho]);\n\n        if (typeof JUNG[jung] === 'object') {\n          temp = temp.concat(JUNG[jung]);\n        } else {\n          temp.push(JUNG[jung]);\n        }\n\n        if (jong > 0) {\n          if (typeof JONG[jong] === 'object') {\n            temp = temp.concat(JONG[jong]);\n          } else {\n            temp.push(JONG[jong]);\n          }\n        }\n      } else if (_isConsonant(code)) {\n        //자음이면\n        if (_isCho(code)) {\n          r = CHO[CHO_HASH[code]];\n        } else {\n          r = JONG[JONG_HASH[code]];\n        }\n\n        if (typeof r === 'string') {\n          temp.push(r);\n        } else {\n          temp = temp.concat(r);\n        }\n      } else if (_isJung(code)) {\n        r = JUNG[JUNG_HASH[code]];\n\n        if (typeof r === 'string') {\n          temp.push(r);\n        } else {\n          temp = temp.concat(r);\n        }\n      } else {\n        temp.push(string.charAt(i));\n      }\n\n      if (grouped) result.push(temp);else result = result.concat(temp);\n    }\n\n    return result;\n  };\n\n  var disassembleToString = function disassembleToString(str) {\n    if (typeof str !== 'string') {\n      return '';\n    }\n\n    str = disassemble(str);\n    return str.join('');\n  };\n\n  var assemble = function assemble(array) {\n    if (typeof array === 'string') {\n      array = disassemble(array);\n    }\n\n    var result = [],\n        length = array.length,\n        code,\n        stage = 0,\n        complete_index = -1,\n        //완성된 곳의 인덱스\n    previous_code,\n        jong_joined = false;\n\n    function _makeHangul(index) {\n      // complete_index + 1부터 index까지를 greedy하게 한글로 만든다.\n      var code,\n          cho,\n          jung1,\n          jung2,\n          jong1 = 0,\n          jong2,\n          hangul = '';\n      jong_joined = false;\n\n      if (complete_index + 1 > index) {\n        return;\n      }\n\n      for (var step = 1;; step++) {\n        if (step === 1) {\n          cho = array[complete_index + step].charCodeAt(0);\n\n          if (_isJung(cho)) {\n            // 첫번째 것이 모음이면 1) ㅏ같은 경우이거나 2) ㅙ같은 경우이다\n            if (complete_index + step + 1 <= index && _isJung(jung1 = array[complete_index + step + 1].charCodeAt(0))) {\n              //다음것이 있고 모음이면\n              result.push(String.fromCharCode(_isJungJoinable(cho, jung1)));\n              complete_index = index;\n              return;\n            } else {\n              result.push(array[complete_index + step]);\n              complete_index = index;\n              return;\n            }\n          } else if (!_isCho(cho)) {\n            result.push(array[complete_index + step]);\n            complete_index = index;\n            return;\n          }\n\n          hangul = array[complete_index + step];\n        } else if (step === 2) {\n          jung1 = array[complete_index + step].charCodeAt(0);\n\n          if (_isCho(jung1)) {\n            //두번째 또 자음이 오면 ㄳ 에서 ㅅ같은 경우이다\n            cho = _isJongJoinable(cho, jung1);\n            hangul = String.fromCharCode(cho);\n            result.push(hangul);\n            complete_index = index;\n            return;\n          } else {\n            hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + HANGUL_OFFSET);\n          }\n        } else if (step === 3) {\n          jung2 = array[complete_index + step].charCodeAt(0);\n\n          if (_isJungJoinable(jung1, jung2)) {\n            jung1 = _isJungJoinable(jung1, jung2);\n          } else {\n            jong1 = jung2;\n          }\n\n          hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\n        } else if (step === 4) {\n          jong2 = array[complete_index + step].charCodeAt(0);\n\n          if (_isJongJoinable(jong1, jong2)) {\n            jong1 = _isJongJoinable(jong1, jong2);\n          } else {\n            jong1 = jong2;\n          }\n\n          hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\n        } else if (step === 5) {\n          jong2 = array[complete_index + step].charCodeAt(0);\n          jong1 = _isJongJoinable(jong1, jong2);\n          hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\n        }\n\n        if (complete_index + step >= index) {\n          result.push(hangul);\n          complete_index = index;\n          return;\n        }\n      }\n    }\n\n    for (var i = 0; i < length; i++) {\n      code = array[i].charCodeAt(0);\n\n      if (!_isCho(code) && !_isJung(code) && !_isJong(code)) {\n        //초, 중, 종성 다 아니면\n        _makeHangul(i - 1);\n\n        _makeHangul(i);\n\n        stage = 0;\n        continue;\n      } //console.log(stage, array[i]);\n\n\n      if (stage === 0) {\n        // 초성이 올 차례\n        if (_isCho(code)) {\n          // 초성이 오면 아무 문제 없다.\n          stage = 1;\n        } else if (_isJung(code)) {\n          // 중성이오면 ㅐ 또는 ㅘ 인것이다. 바로 구분을 못한다. 따라서 특수한 stage인 stage4로 이동\n          stage = 4;\n        }\n      } else if (stage == 1) {\n        //중성이 올 차례\n        if (_isJung(code)) {\n          //중성이 오면 문제없음 진행.\n          stage = 2;\n        } else {\n          //아니고 자음이오면 ㄻ같은 경우가 있고 ㄹㅋ같은 경우가 있다.\n          if (_isJongJoinable(previous_code, code)) {\n            // 합쳐질 수 있다면 ㄻ 같은 경우인데 이 뒤에 모음이 와서 ㄹ마 가 될수도 있고 초성이 올 수도 있다. 따라서 섣불리 완성할 수 없다. 이땐 stage5로 간다.\n            stage = 5;\n          } else {\n            //합쳐질 수 없다면 앞 글자 완성 후 여전히 중성이 올 차례\n            _makeHangul(i - 1);\n          }\n        }\n      } else if (stage == 2) {\n        //종성이 올 차례\n        if (_isJong(code)) {\n          //종성이 오면 다음엔 자음 또는 모음이 온다.\n          stage = 3;\n        } else if (_isJung(code)) {\n          //그런데 중성이 오면 앞의 모음과 합칠 수 있는지 본다.\n          if (_isJungJoinable(previous_code, code)) {//합칠 수 있으면 여전히 종성이 올 차례고 그대로 진행\n          } else {\n            // 합칠 수 없다면 오타가 생긴 경우\n            _makeHangul(i - 1);\n\n            stage = 4;\n          }\n        } else {\n          // 받침이 안되는 자음이 오면 ㄸ 같은 이전까지 완성하고 다시시작\n          _makeHangul(i - 1);\n\n          stage = 1;\n        }\n      } else if (stage == 3) {\n        // 종성이 하나 온 상태.\n        if (_isJong(code)) {\n          // 또 종성이면 합칠수 있는지 본다.\n          if (!jong_joined && _isJongJoinable(previous_code, code)) {\n            //합칠 수 있으면 계속 진행. 왜냐하면 이번에 온 자음이 다음 글자의 초성이 될 수도 있기 때문. 대신 이 기회는 한번만\n            jong_joined = true;\n          } else {\n            //없으면 한글자 완성\n            _makeHangul(i - 1);\n\n            stage = 1; // 이 종성이 초성이 되고 중성부터 시작\n          }\n        } else if (_isCho(code)) {\n          // 초성이면 한글자 완성.\n          _makeHangul(i - 1);\n\n          stage = 1; //이 글자가 초성이되므로 중성부터 시작\n        } else if (_isJung(code)) {\n          // 중성이면 이전 종성은 이 중성과 합쳐지고 앞 글자는 받침이 없다.\n          _makeHangul(i - 2);\n\n          stage = 2;\n        }\n      } else if (stage == 4) {\n        // 중성이 하나 온 상태\n        if (_isJung(code)) {\n          //중성이 온 경우\n          if (_isJungJoinable(previous_code, code)) {\n            //이전 중성과 합쳐질 수 있는 경우\n            _makeHangul(i);\n\n            stage = 0;\n          } else {\n            //중성이 왔지만 못합치는 경우. ㅒㅗ 같은\n            _makeHangul(i - 1);\n          }\n        } else {\n          // 아니면 자음이 온 경우.\n          _makeHangul(i - 1);\n\n          stage = 1;\n        }\n      } else if (stage == 5) {\n        // 초성이 연속해서 두개 온 상태 ㄺ\n        if (_isJung(code)) {\n          //이번에 중성이면 ㄹ가\n          _makeHangul(i - 2);\n\n          stage = 2;\n        } else {\n          _makeHangul(i - 1);\n\n          stage = 1;\n        }\n      }\n\n      previous_code = code;\n    }\n\n    _makeHangul(i - 1);\n\n    return result.join('');\n  };\n\n  var search = function search(a, b) {\n    var ad = disassemble(a).join(''),\n        bd = disassemble(b).join('');\n    return ad.indexOf(bd);\n  };\n\n  var rangeSearch = function rangeSearch(haystack, needle) {\n    var hex = disassemble(haystack).join(''),\n        nex = disassemble(needle).join(''),\n        grouped = disassemble(haystack, true),\n        re = new RegExp(nex, 'gi'),\n        indices = [],\n        result;\n    if (!needle.length) return [];\n\n    while (result = re.exec(hex)) {\n      indices.push(result.index);\n    }\n\n    function findStart(index) {\n      for (var i = 0, length = 0; i < grouped.length; ++i) {\n        length += grouped[i].length;\n        if (index < length) return i;\n      }\n    }\n\n    function findEnd(index) {\n      for (var i = 0, length = 0; i < grouped.length; ++i) {\n        length += grouped[i].length;\n        if (index + nex.length <= length) return i;\n      }\n    }\n\n    return indices.map(function (i) {\n      return [findStart(i), findEnd(i)];\n    });\n  };\n\n  function Searcher(string) {\n    this.string = string;\n    this.disassembled = disassemble(string).join('');\n  }\n\n  Searcher.prototype.search = function (string) {\n    return disassemble(string).join('').indexOf(this.disassembled);\n  };\n\n  var endsWithConsonant = function endsWithConsonant(string) {\n    if (typeof string === 'object') {\n      string = string.join('');\n    }\n\n    var code = string.charCodeAt(string.length - 1);\n\n    if (_isHangul(code)) {\n      // 완성된 한글이면\n      code -= HANGUL_OFFSET;\n      var jong = code % 28;\n\n      if (jong > 0) {\n        return true;\n      }\n    } else if (_isConsonant(code)) {\n      //자음이면\n      return true;\n    }\n\n    return false;\n  };\n\n  var endsWith = function endsWith(string, target) {\n    return disassemble(string).pop() === target;\n  };\n\n  var hangul = {\n    disassemble: disassemble,\n    d: disassemble,\n    // alias for disassemble\n    disassembleToString: disassembleToString,\n    ds: disassembleToString,\n    // alias for disassembleToString\n    assemble: assemble,\n    a: assemble,\n    // alias for assemble\n    search: search,\n    rangeSearch: rangeSearch,\n    Searcher: Searcher,\n    endsWithConsonant: endsWithConsonant,\n    endsWith: endsWith,\n    isHangul: function isHangul(c) {\n      if (typeof c === 'string') c = c.charCodeAt(0);\n      return _isHangul(c);\n    },\n    isComplete: function isComplete(c) {\n      if (typeof c === 'string') c = c.charCodeAt(0);\n      return _isHangul(c);\n    },\n    isConsonant: function isConsonant(c) {\n      if (typeof c === 'string') c = c.charCodeAt(0);\n      return _isConsonant(c);\n    },\n    isVowel: function isVowel(c) {\n      if (typeof c === 'string') c = c.charCodeAt(0);\n      return _isJung(c);\n    },\n    isCho: function isCho(c) {\n      if (typeof c === 'string') c = c.charCodeAt(0);\n      return _isCho(c);\n    },\n    isJong: function isJong(c) {\n      if (typeof c === 'string') c = c.charCodeAt(0);\n      return _isJong(c);\n    },\n    isHangulAll: function isHangulAll(str) {\n      if (typeof str !== 'string') return false;\n\n      for (var i = 0; i < str.length; i++) {\n        if (!_isHangul(str.charCodeAt(i))) return false;\n      }\n\n      return true;\n    },\n    isCompleteAll: function isCompleteAll(str) {\n      if (typeof str !== 'string') return false;\n\n      for (var i = 0; i < str.length; i++) {\n        if (!_isHangul(str.charCodeAt(i))) return false;\n      }\n\n      return true;\n    },\n    isConsonantAll: function isConsonantAll(str) {\n      if (typeof str !== 'string') return false;\n\n      for (var i = 0; i < str.length; i++) {\n        if (!_isConsonant(str.charCodeAt(i))) return false;\n      }\n\n      return true;\n    },\n    isVowelAll: function isVowelAll(str) {\n      if (typeof str !== 'string') return false;\n\n      for (var i = 0; i < str.length; i++) {\n        if (!_isJung(str.charCodeAt(i))) return false;\n      }\n\n      return true;\n    },\n    isChoAll: function isChoAll(str) {\n      if (typeof str !== 'string') return false;\n\n      for (var i = 0; i < str.length; i++) {\n        if (!_isCho(str.charCodeAt(i))) return false;\n      }\n\n      return true;\n    },\n    isJongAll: function isJongAll(str) {\n      if (typeof str !== 'string') return false;\n\n      for (var i = 0; i < str.length; i++) {\n        if (!_isJong(str.charCodeAt(i))) return false;\n      }\n\n      return true;\n    }\n  };\n\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return hangul;\n    });\n  } else if (typeof module !== 'undefined') {\n    module.exports = hangul;\n  } else {\n    window.Hangul = hangul;\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}