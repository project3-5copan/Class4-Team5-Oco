{"ast":null,"code":"import _defineProperty from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport moment from \"moment-timezone\";\nimport * as d3 from \"d3\";\nvar dateFormat = d3.timeParse(\"%Y-%m-%d %H:%M\");\n\nvar timestampToDatetime = function timestampToDatetime(timeType, timeCount, timestamp) {\n  switch (timeType) {\n    case \"minute\":\n    case \"minutes\":\n      return moment(timestamp).minute(Math.floor(moment(timestamp).minute() / timeCount) * timeCount).second(0) // .tz(\"Asia/Seoul\")\n      .format(\"YYYY-MM-DD HH:mm\");\n\n    case \"hour\":\n    case \"hours\":\n      return moment(timestamp).hour(Math.floor(moment(timestamp).hour() / timeCount) * timeCount).minute(0).second(0) // .tz(\"Asia/Seoul\")\n      .format(\"YYYY-MM-DD HH:mm\");\n\n    case \"day\":\n    case \"days\":\n      return moment(timestamp).hour(9).minute(0).second(0).format(\"YYYY-MM-DD HH:mm\");\n\n    case \"week\":\n    case \"weeks\":\n      return moment(timestamp).hour(0).minute(0).second(0).format(\"YYYY-MM-DD HH:mm\");\n\n    default:\n      return undefined;\n  }\n};\n\nvar candleDataUtils = {\n  init: function init(candles, state) {\n    var selectedTimeType = state.Coin.selectedTimeType;\n    var selectedTimeCount = state.Coin.selectedTimeCount;\n    var data = {};\n    candles.forEach(function (candle) {\n      data[candle.market] = {};\n      data[candle.market][\"candles\"] = [];\n      data[candle.market][\"candles\"].push({\n        date: dateFormat(timestampToDatetime(selectedTimeType, selectedTimeCount, candle.timestamp)),\n        datetime: timestampToDatetime(selectedTimeType, selectedTimeCount, candle.timestamp),\n        timestamp: candle.timestamp,\n        open: candle.opening_price,\n        high: candle.high_price,\n        low: candle.low_price,\n        close: candle.trade_price,\n        volume: candle.acc_trade_volume,\n        tradePrice: candle.acc_trade_price\n      });\n      data[candle.market][\"tradePrice24Hour\"] = candle.acc_trade_price_24h;\n      data[candle.market][\"volume24Hour\"] = candle.acc_trade_volume_24h;\n      data[candle.market][\"changeRate24Hour\"] = candle.signed_change_rate;\n      data[candle.market][\"changePrice24Hour\"] = candle.signed_change_price;\n      data[candle.market][\"highestPrice24Hour\"] = candle.high_price;\n      data[candle.market][\"lowestPrice24Hour\"] = candle.low_price;\n      data[candle.market][\"highestPrice52Week\"] = candle.highest_52_week_price;\n      data[candle.market][\"highestDate52Week\"] = candle.highest_52_week_date;\n      data[candle.market][\"lowestPrice52Week\"] = candle.lowest_52_week_price;\n      data[candle.market][\"lowestDate52Week\"] = candle.lowest_52_week_date;\n    });\n    return data;\n  },\n  update: function update(candle, state) {\n    var candleStateDatas = state.Coin.candle.data;\n    var selectedTimeType = state.Coin.selectedTimeType;\n    var selectedTimeCount = state.Coin.selectedTimeCount;\n    var coinMarket = candle.code;\n    var targetCandles = candleStateDatas[coinMarket].candles;\n    var lastCandle = targetCandles.slice(-1)[0];\n    var date = dateFormat(timestampToDatetime(selectedTimeType, selectedTimeCount, candle.timestamp));\n    var datetime = timestampToDatetime(selectedTimeType, selectedTimeCount, candle.timestamp);\n    var open = lastCandle.open;\n    var high = candle.trade_price > lastCandle.high ? candle.trade_price : lastCandle.high;\n    var low = candle.trade_price < lastCandle.low ? candle.trade_price : lastCandle.low;\n    var close = candle.trade_price;\n    var highestPrice24Hour = candleStateDatas[coinMarket].highestPrice24Hour;\n    var lowestPrice24Hour = candleStateDatas[coinMarket].lowestPrice24Hour;\n    var needUpdate = targetCandles.find(function (candle) {\n      return candle.datetime === datetime;\n    });\n    var dateChanged = d3.timeParse(\"YYYY-MM-DD\")(lastCandle.date) !== d3.timeParse(\"YYYY-MM-DD\")(datetime);\n\n    var newData = _objectSpread({}, candleStateDatas); // 원본 데이터 보장\n\n\n    if (needUpdate) {\n      var volume = needUpdate.volume + candle.trade_volume;\n      var tradePrice = needUpdate.tradePrice + candle.trade_price;\n\n      var updatedCandles = _toConsumableArray(targetCandles);\n\n      updatedCandles.pop();\n      updatedCandles.push({\n        date: date,\n        datetime: datetime,\n        timestamp: candle.timestamp,\n        open: open,\n        high: high,\n        low: low,\n        close: close,\n        volume: volume,\n        tradePrice: tradePrice\n      });\n      newData[coinMarket][\"candles\"] = updatedCandles;\n      newData[coinMarket][\"tradePrice24Hour\"] = candle.acc_trade_price_24h;\n      newData[coinMarket][\"volume24Hour\"] = candle.acc_trade_volume_24h;\n      newData[coinMarket][\"changeRate24Hour\"] = candle.signed_change_rate;\n      newData[coinMarket][\"changePrice24Hour\"] = candle.signed_change_price;\n      newData[coinMarket][\"highestPrice24Hour\"] = high > highestPrice24Hour ? high : highestPrice24Hour;\n      newData[coinMarket][\"lowestPrice24Hour\"] = low < lowestPrice24Hour ? low : lowestPrice24Hour;\n      newData[coinMarket][\"highestPrice52Week\"] = candle.highest_52_week_price;\n      newData[coinMarket][\"highestDate52Week\"] = candle.highest_52_week_date;\n      newData[coinMarket][\"lowestPrice52Week\"] = candle.lowest_52_week_price;\n      newData[coinMarket][\"lowestDate52Week\"] = candle.lowest_52_week_date;\n    } else {\n      var _volume = candle.trade_volume;\n      var _tradePrice = candle.trade_price;\n      newData[coinMarket][\"candles\"] = [].concat(_toConsumableArray(targetCandles), [{\n        date: date,\n        datetime: datetime,\n        timestamp: candle.timestamp,\n        dateKst: candle.trade_date_kst,\n        timeKst: candle.trade_time_kst,\n        open: close,\n        high: close,\n        low: close,\n        close: close,\n        volume: _volume,\n        tradePrice: _tradePrice\n      }]);\n      newData[coinMarket][\"tradePrice24Hour\"] = candle.acc_trade_price_24h;\n      newData[coinMarket][\"volume24Hour\"] = candle.acc_trade_volume_24h;\n      newData[coinMarket][\"changeRate24Hour\"] = candle.signed_change_rate;\n      newData[coinMarket][\"changePrice24Hour\"] = candle.signed_change_price;\n      newData[coinMarket][\"highestPrice24Hour\"] = dateChanged // 날짜가 바뀌지 않았을때만 고점 갱신기록, 날짜 바뀌면 지금 고점 기록\n      ? high : high > highestPrice24Hour ? high : highestPrice24Hour;\n      newData[coinMarket][\"lowestPrice24Hour\"] = dateChanged ? low : low < lowestPrice24Hour ? low : lowestPrice24Hour;\n      newData[coinMarket][\"highestPrice52Week\"] = candle.highest_52_week_price;\n      newData[coinMarket][\"highestDate52Week\"] = candle.highest_52_week_date;\n      newData[coinMarket][\"lowestPrice52Week\"] = candle.lowest_52_week_price;\n      newData[coinMarket][\"lowestDate52Week\"] = candle.lowest_52_week_date;\n    }\n\n    return newData;\n  },\n  updates: function updates(candles, state) {\n    var candleStateDatas = state.Coin.candle.data;\n    var selectedTimeType = state.Coin.selectedTimeType;\n    var selectedTimeCount = state.Coin.selectedTimeCount;\n\n    var newData = _objectSpread({}, candleStateDatas); // 원본 데이터 보장\n\n\n    candles.forEach(function (candle) {\n      var coinMarket = candle.code;\n      var targetCandles = candleStateDatas[coinMarket].candles;\n      var lastCandle = targetCandles.slice(-1)[0];\n      var date = dateFormat(timestampToDatetime(selectedTimeType, selectedTimeCount, candle.timestamp));\n      var datetime = timestampToDatetime(selectedTimeType, selectedTimeCount, candle.timestamp);\n      var open = lastCandle.open;\n      var high = candle.trade_price > lastCandle.high ? candle.trade_price : lastCandle.high;\n      var low = candle.trade_price < lastCandle.low ? candle.trade_price : lastCandle.low;\n      var close = candle.trade_price;\n      var highestPrice24Hour = candleStateDatas[coinMarket].highestPrice24Hour;\n      var lowestPrice24Hour = candleStateDatas[coinMarket].lowestPrice24Hour;\n      var needUpdate = targetCandles.find(function (candle) {\n        return candle.datetime === datetime;\n      });\n      var dateChanged = d3.timeParse(\"YYYY-MM-DD\")(lastCandle.date) !== d3.timeParse(\"YYYY-MM-DD\")(datetime);\n\n      if (needUpdate) {\n        var volume = needUpdate.volume + candle.trade_volume;\n        var tradePrice = needUpdate.tradePrice + candle.trade_price;\n\n        var updatedCandles = _toConsumableArray(targetCandles);\n\n        updatedCandles.pop();\n        updatedCandles.push({\n          date: date,\n          datetime: datetime,\n          timestamp: candle.timestamp,\n          open: open,\n          high: high,\n          low: low,\n          close: close,\n          volume: volume,\n          tradePrice: tradePrice\n        });\n        newData[coinMarket][\"candles\"] = updatedCandles;\n        newData[coinMarket][\"tradePrice24Hour\"] = candle.acc_trade_price_24h;\n        newData[coinMarket][\"volume24Hour\"] = candle.acc_trade_volume_24h;\n        newData[coinMarket][\"changeRate24Hour\"] = candle.signed_change_rate;\n        newData[coinMarket][\"changePrice24Hour\"] = candle.signed_change_price;\n        newData[coinMarket][\"highestPrice24Hour\"] = high > highestPrice24Hour ? high : highestPrice24Hour;\n        newData[coinMarket][\"lowestPrice24Hour\"] = low < lowestPrice24Hour ? low : lowestPrice24Hour;\n        newData[coinMarket][\"highestPrice52Week\"] = candle.highest_52_week_price;\n        newData[coinMarket][\"highestDate52Week\"] = candle.highest_52_week_date;\n        newData[coinMarket][\"lowestPrice52Week\"] = candle.lowest_52_week_price;\n        newData[coinMarket][\"lowestDate52Week\"] = candle.lowest_52_week_date;\n      } else {\n        var _volume2 = candle.trade_volume;\n        var _tradePrice2 = candle.trade_price;\n        newData[coinMarket][\"candles\"] = [].concat(_toConsumableArray(targetCandles), [{\n          date: date,\n          datetime: datetime,\n          timestamp: candle.timestamp,\n          dateKst: candle.trade_date_kst,\n          timeKst: candle.trade_time_kst,\n          open: close,\n          high: close,\n          low: close,\n          close: close,\n          volume: _volume2,\n          tradePrice: _tradePrice2\n        }]);\n        newData[coinMarket][\"tradePrice24Hour\"] = candle.acc_trade_price_24h;\n        newData[coinMarket][\"volume24Hour\"] = candle.acc_trade_volume_24h;\n        newData[coinMarket][\"changeRate24Hour\"] = candle.signed_change_rate;\n        newData[coinMarket][\"changePrice24Hour\"] = candle.signed_change_price;\n        newData[coinMarket][\"highestPrice24Hour\"] = dateChanged // 날짜가 바뀌지 않았을때만 고점 갱신기록, 날짜 바뀌면 지금 고점 기록\n        ? high : high > highestPrice24Hour ? high : highestPrice24Hour;\n        newData[coinMarket][\"lowestPrice24Hour\"] = dateChanged ? low : low < lowestPrice24Hour ? low : lowestPrice24Hour;\n        newData[coinMarket][\"highestPrice52Week\"] = candle.highest_52_week_price;\n        newData[coinMarket][\"highestDate52Week\"] = candle.highest_52_week_date;\n        newData[coinMarket][\"lowestPrice52Week\"] = candle.lowest_52_week_price;\n        newData[coinMarket][\"lowestDate52Week\"] = candle.lowest_52_week_date;\n      }\n    });\n    return newData;\n  },\n  oneCoin: function oneCoin(candles, state) {\n    var candleStateData = state.Coin.candle.data;\n    var selectedTimeType = state.Coin.selectedTimeType;\n    var selectedTimeCount = state.Coin.selectedTimeCount;\n    var market = candles[0].market;\n    var newCandles = candles.map(function (candle) {\n      return {\n        date: dateFormat(timestampToDatetime(selectedTimeType, selectedTimeCount, candle.timestamp)),\n        datetime: timestampToDatetime(selectedTimeType, selectedTimeCount, candle.timestamp),\n        timestamp: candle.timestamp,\n        open: candle.opening_price,\n        high: candle.high_price,\n        low: candle.low_price,\n        close: candle.trade_price,\n        volume: candle.candle_acc_trade_volume,\n        tradePrice: candle.candle_acc_trade_price\n      };\n    });\n\n    var newData = _objectSpread(_objectSpread({}, candleStateData), {}, _defineProperty({}, market, _objectSpread(_objectSpread({}, candleStateData[market]), {}, {\n      candles: newCandles\n    })));\n\n    return newData;\n  },\n  add: function add(candles, state) {\n    var candleStateData = state.Coin.candle.data;\n    var selectedTimeType = state.Coin.selectedTimeType;\n    var selectedTimeCount = state.Coin.selectedTimeCount;\n    var market = candles[0].market;\n    var newCandles = candles.reduce(function (acc, candle) {\n      if (!candle.timestamp) return acc;\n      if (candleStateData[market].candles.find(function (stateCandle) {\n        return stateCandle.timestamp === candle.timestamp;\n      })) return acc;\n      return [].concat(_toConsumableArray(acc), [{\n        date: dateFormat(timestampToDatetime(selectedTimeType, selectedTimeCount, candle.timestamp)),\n        datetime: timestampToDatetime(selectedTimeType, selectedTimeCount, candle.timestamp),\n        timestamp: candle.timestamp,\n        open: candle.opening_price,\n        high: candle.high_price,\n        low: candle.low_price,\n        close: candle.trade_price,\n        volume: candle.candle_acc_trade_volume,\n        tradePrice: candle.candle_acc_trade_price\n      }]);\n    }, []);\n\n    var newData = _objectSpread(_objectSpread({}, candleStateData), {}, _defineProperty({}, market, _objectSpread(_objectSpread({}, candleStateData[market]), {}, {\n      candles: [].concat(_toConsumableArray(newCandles), _toConsumableArray(candleStateData[market].candles))\n    })));\n\n    return newData;\n  },\n  marketNames: function marketNames(names) {\n    var data = {};\n    names.forEach(function (name) {\n      if (name.market.split(\"-\")[0] !== \"KRW\") return;\n      data[name.market] = {\n        korean: name.korean_name,\n        english: name.english_name\n      };\n    });\n    return data;\n  }\n};\nvar orderbookUtils = {\n  init: function init(orderbooks, _) {\n    var data = {};\n    orderbooks.forEach(function (orderbook) {\n      data[orderbook.market] = _objectSpread(_objectSpread({}, orderbook), {}, {\n        code: orderbook.market\n      });\n    });\n    return data;\n  },\n  update: function update(orderbook, state) {\n    var orderbookData = state.Coin.orderbook.data;\n    var market = orderbook.code;\n    return _objectSpread(_objectSpread({}, orderbookData), {}, _defineProperty({}, market, _objectSpread(_objectSpread({}, orderbook), {}, {\n      market: market\n    })));\n  }\n};\nvar tradeListUtils = {\n  init: function init(tradeLists, state) {\n    var tradeListData = state.Coin.tradeList.data;\n    var market = tradeLists[0].market;\n    return _objectSpread(_objectSpread({}, tradeListData), {}, _defineProperty({}, market, tradeLists));\n  },\n  update: function update(tradeList, state) {\n    var tradeListData = state.Coin.tradeList.data;\n    var market = tradeList.code;\n    if (tradeListData[market] && tradeListData[market].find(function (data) {\n      return data.sequential_id === tradeList.sequential_id;\n    })) return tradeListData; // 데이터가 200개까지만 유지되게 만듦\n\n    tradeListData[market] && tradeListData[market].length > 200 && tradeListData[market].pop();\n    return tradeListData[market] ? _objectSpread(_objectSpread({}, tradeListData), {}, _defineProperty({}, market, [tradeList].concat(_toConsumableArray(tradeListData[market])))) : _objectSpread(_objectSpread({}, tradeListData), {}, _defineProperty({}, market, [tradeList]));\n  }\n};\n\nvar choHangul = function choHangul(str) {\n  var cho = [\"ㄱ\", \"ㄲ\", \"ㄴ\", \"ㄷ\", \"ㄸ\", \"ㄹ\", \"ㅁ\", \"ㅂ\", \"ㅃ\", \"ㅅ\", \"ㅆ\", \"ㅇ\", \"ㅈ\", \"ㅉ\", \"ㅊ\", \"ㅋ\", \"ㅌ\", \"ㅍ\", \"ㅎ\"];\n  return _toConsumableArray(str).reduce(function (acc, cur) {\n    var code = cur.charCodeAt(0) - 44032;\n    return code > -1 && code < 11172 ? acc + cho[Math.floor(code / 588)] : acc + cur.charAt(0);\n  }, \"\");\n};\n\nexport { timestampToDatetime, candleDataUtils, orderbookUtils, tradeListUtils, choHangul };","map":{"version":3,"sources":["/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/src/Lib/utils.js"],"names":["moment","d3","dateFormat","timeParse","timestampToDatetime","timeType","timeCount","timestamp","minute","Math","floor","second","format","hour","undefined","candleDataUtils","init","candles","state","selectedTimeType","Coin","selectedTimeCount","data","forEach","candle","market","push","date","datetime","open","opening_price","high","high_price","low","low_price","close","trade_price","volume","acc_trade_volume","tradePrice","acc_trade_price","acc_trade_price_24h","acc_trade_volume_24h","signed_change_rate","signed_change_price","highest_52_week_price","highest_52_week_date","lowest_52_week_price","lowest_52_week_date","update","candleStateDatas","coinMarket","code","targetCandles","lastCandle","slice","highestPrice24Hour","lowestPrice24Hour","needUpdate","find","dateChanged","newData","trade_volume","updatedCandles","pop","dateKst","trade_date_kst","timeKst","trade_time_kst","updates","oneCoin","candleStateData","newCandles","map","candle_acc_trade_volume","candle_acc_trade_price","add","reduce","acc","stateCandle","marketNames","names","name","split","korean","korean_name","english","english_name","orderbookUtils","orderbooks","_","orderbook","orderbookData","tradeListUtils","tradeLists","tradeListData","tradeList","sequential_id","length","choHangul","str","cho","cur","charCodeAt","charAt"],"mappings":"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","sourcesContent":["import moment from \"moment-timezone\";\nimport * as d3 from \"d3\";\n\nconst dateFormat = d3.timeParse(\"%Y-%m-%d %H:%M\");\n\nconst timestampToDatetime = (timeType, timeCount, timestamp) => {\n  switch (timeType) {\n    case \"minute\":\n    case \"minutes\":\n      return (\n        moment(timestamp)\n          .minute(\n            Math.floor(moment(timestamp).minute() / timeCount) * timeCount\n          )\n          .second(0)\n          // .tz(\"Asia/Seoul\")\n          .format(\"YYYY-MM-DD HH:mm\")\n      );\n    case \"hour\":\n    case \"hours\":\n      return (\n        moment(timestamp)\n          .hour(Math.floor(moment(timestamp).hour() / timeCount) * timeCount)\n          .minute(0)\n          .second(0)\n          // .tz(\"Asia/Seoul\")\n          .format(\"YYYY-MM-DD HH:mm\")\n      );\n    case \"day\":\n    case \"days\":\n      return moment(timestamp)\n        .hour(9)\n        .minute(0)\n        .second(0)\n        .format(\"YYYY-MM-DD HH:mm\");\n    case \"week\":\n    case \"weeks\":\n      return moment(timestamp)\n        .hour(0)\n        .minute(0)\n        .second(0)\n        .format(\"YYYY-MM-DD HH:mm\");\n    default:\n      return undefined;\n  }\n};\n\nconst candleDataUtils = {\n  init: (candles, state) => {\n    const selectedTimeType = state.Coin.selectedTimeType;\n    const selectedTimeCount = state.Coin.selectedTimeCount;\n\n    const data = {};\n    candles.forEach((candle) => {\n      data[candle.market] = {};\n      data[candle.market][\"candles\"] = [];\n      data[candle.market][\"candles\"].push({\n        date: dateFormat(\n          timestampToDatetime(\n            selectedTimeType,\n            selectedTimeCount,\n            candle.timestamp\n          )\n        ),\n        datetime: timestampToDatetime(\n          selectedTimeType,\n          selectedTimeCount,\n          candle.timestamp\n        ),\n        timestamp: candle.timestamp,\n        open: candle.opening_price,\n        high: candle.high_price,\n        low: candle.low_price,\n        close: candle.trade_price,\n        volume: candle.acc_trade_volume,\n        tradePrice: candle.acc_trade_price,\n      });\n      data[candle.market][\"tradePrice24Hour\"] = candle.acc_trade_price_24h;\n      data[candle.market][\"volume24Hour\"] = candle.acc_trade_volume_24h;\n      data[candle.market][\"changeRate24Hour\"] = candle.signed_change_rate;\n      data[candle.market][\"changePrice24Hour\"] = candle.signed_change_price;\n      data[candle.market][\"highestPrice24Hour\"] = candle.high_price;\n      data[candle.market][\"lowestPrice24Hour\"] = candle.low_price;\n      data[candle.market][\"highestPrice52Week\"] = candle.highest_52_week_price;\n      data[candle.market][\"highestDate52Week\"] = candle.highest_52_week_date;\n      data[candle.market][\"lowestPrice52Week\"] = candle.lowest_52_week_price;\n      data[candle.market][\"lowestDate52Week\"] = candle.lowest_52_week_date;\n    });\n\n    return data;\n  },\n\n  update: (candle, state) => {\n    const candleStateDatas = state.Coin.candle.data;\n    const selectedTimeType = state.Coin.selectedTimeType;\n    const selectedTimeCount = state.Coin.selectedTimeCount;\n\n    const coinMarket = candle.code;\n\n    const targetCandles = candleStateDatas[coinMarket].candles;\n    const lastCandle = targetCandles.slice(-1)[0];\n\n    const date = dateFormat(\n      timestampToDatetime(selectedTimeType, selectedTimeCount, candle.timestamp)\n    );\n    const datetime = timestampToDatetime(\n      selectedTimeType,\n      selectedTimeCount,\n      candle.timestamp\n    );\n    const open = lastCandle.open;\n    const high =\n      candle.trade_price > lastCandle.high\n        ? candle.trade_price\n        : lastCandle.high;\n    const low =\n      candle.trade_price < lastCandle.low ? candle.trade_price : lastCandle.low;\n    const close = candle.trade_price;\n\n    const highestPrice24Hour = candleStateDatas[coinMarket].highestPrice24Hour;\n    const lowestPrice24Hour = candleStateDatas[coinMarket].lowestPrice24Hour;\n\n    const needUpdate = targetCandles.find(\n      (candle) => candle.datetime === datetime\n    );\n    const dateChanged =\n      d3.timeParse(\"YYYY-MM-DD\")(lastCandle.date) !==\n      d3.timeParse(\"YYYY-MM-DD\")(datetime);\n\n    const newData = { ...candleStateDatas }; // 원본 데이터 보장\n    if (needUpdate) {\n      const volume = needUpdate.volume + candle.trade_volume;\n      const tradePrice = needUpdate.tradePrice + candle.trade_price;\n      const updatedCandles = [...targetCandles];\n      updatedCandles.pop();\n      updatedCandles.push({\n        date,\n        datetime,\n        timestamp: candle.timestamp,\n        open,\n        high,\n        low,\n        close,\n        volume,\n        tradePrice,\n      });\n\n      newData[coinMarket][\"candles\"] = updatedCandles;\n      newData[coinMarket][\"tradePrice24Hour\"] = candle.acc_trade_price_24h;\n      newData[coinMarket][\"volume24Hour\"] = candle.acc_trade_volume_24h;\n      newData[coinMarket][\"changeRate24Hour\"] = candle.signed_change_rate;\n      newData[coinMarket][\"changePrice24Hour\"] = candle.signed_change_price;\n      newData[coinMarket][\"highestPrice24Hour\"] =\n        high > highestPrice24Hour ? high : highestPrice24Hour;\n      newData[coinMarket][\"lowestPrice24Hour\"] =\n        low < lowestPrice24Hour ? low : lowestPrice24Hour;\n      newData[coinMarket][\"highestPrice52Week\"] = candle.highest_52_week_price;\n      newData[coinMarket][\"highestDate52Week\"] = candle.highest_52_week_date;\n      newData[coinMarket][\"lowestPrice52Week\"] = candle.lowest_52_week_price;\n      newData[coinMarket][\"lowestDate52Week\"] = candle.lowest_52_week_date;\n    } else {\n      const volume = candle.trade_volume;\n      const tradePrice = candle.trade_price;\n\n      newData[coinMarket][\"candles\"] = [\n        ...targetCandles,\n        {\n          date,\n          datetime,\n          timestamp: candle.timestamp,\n          dateKst: candle.trade_date_kst,\n          timeKst: candle.trade_time_kst,\n          open: close,\n          high: close,\n          low: close,\n          close,\n          volume,\n          tradePrice,\n        },\n      ];\n      newData[coinMarket][\"tradePrice24Hour\"] = candle.acc_trade_price_24h;\n      newData[coinMarket][\"volume24Hour\"] = candle.acc_trade_volume_24h;\n      newData[coinMarket][\"changeRate24Hour\"] = candle.signed_change_rate;\n      newData[coinMarket][\"changePrice24Hour\"] = candle.signed_change_price;\n      newData[coinMarket][\"highestPrice24Hour\"] = dateChanged // 날짜가 바뀌지 않았을때만 고점 갱신기록, 날짜 바뀌면 지금 고점 기록\n        ? high\n        : high > highestPrice24Hour\n        ? high\n        : highestPrice24Hour;\n      newData[coinMarket][\"lowestPrice24Hour\"] = dateChanged\n        ? low\n        : low < lowestPrice24Hour\n        ? low\n        : lowestPrice24Hour;\n      newData[coinMarket][\"highestPrice52Week\"] = candle.highest_52_week_price;\n      newData[coinMarket][\"highestDate52Week\"] = candle.highest_52_week_date;\n      newData[coinMarket][\"lowestPrice52Week\"] = candle.lowest_52_week_price;\n      newData[coinMarket][\"lowestDate52Week\"] = candle.lowest_52_week_date;\n    }\n\n    return newData;\n  },\n  updates: (candles, state) => {\n    const candleStateDatas = state.Coin.candle.data;\n    const selectedTimeType = state.Coin.selectedTimeType;\n    const selectedTimeCount = state.Coin.selectedTimeCount;\n\n    const newData = { ...candleStateDatas }; // 원본 데이터 보장\n\n    candles.forEach((candle) => {\n      const coinMarket = candle.code;\n\n      const targetCandles = candleStateDatas[coinMarket].candles;\n      const lastCandle = targetCandles.slice(-1)[0];\n\n      const date = dateFormat(\n        timestampToDatetime(\n          selectedTimeType,\n          selectedTimeCount,\n          candle.timestamp\n        )\n      );\n      const datetime = timestampToDatetime(\n        selectedTimeType,\n        selectedTimeCount,\n        candle.timestamp\n      );\n      const open = lastCandle.open;\n      const high =\n        candle.trade_price > lastCandle.high\n          ? candle.trade_price\n          : lastCandle.high;\n      const low =\n        candle.trade_price < lastCandle.low\n          ? candle.trade_price\n          : lastCandle.low;\n      const close = candle.trade_price;\n\n      const highestPrice24Hour =\n        candleStateDatas[coinMarket].highestPrice24Hour;\n      const lowestPrice24Hour = candleStateDatas[coinMarket].lowestPrice24Hour;\n\n      const needUpdate = targetCandles.find(\n        (candle) => candle.datetime === datetime\n      );\n      const dateChanged =\n        d3.timeParse(\"YYYY-MM-DD\")(lastCandle.date) !==\n        d3.timeParse(\"YYYY-MM-DD\")(datetime);\n\n      if (needUpdate) {\n        const volume = needUpdate.volume + candle.trade_volume;\n        const tradePrice = needUpdate.tradePrice + candle.trade_price;\n        const updatedCandles = [...targetCandles];\n        updatedCandles.pop();\n        updatedCandles.push({\n          date,\n          datetime,\n          timestamp: candle.timestamp,\n          open,\n          high,\n          low,\n          close,\n          volume,\n          tradePrice,\n        });\n\n        newData[coinMarket][\"candles\"] = updatedCandles;\n        newData[coinMarket][\"tradePrice24Hour\"] = candle.acc_trade_price_24h;\n        newData[coinMarket][\"volume24Hour\"] = candle.acc_trade_volume_24h;\n        newData[coinMarket][\"changeRate24Hour\"] = candle.signed_change_rate;\n        newData[coinMarket][\"changePrice24Hour\"] = candle.signed_change_price;\n        newData[coinMarket][\"highestPrice24Hour\"] =\n          high > highestPrice24Hour ? high : highestPrice24Hour;\n        newData[coinMarket][\"lowestPrice24Hour\"] =\n          low < lowestPrice24Hour ? low : lowestPrice24Hour;\n        newData[coinMarket][\"highestPrice52Week\"] =\n          candle.highest_52_week_price;\n        newData[coinMarket][\"highestDate52Week\"] = candle.highest_52_week_date;\n        newData[coinMarket][\"lowestPrice52Week\"] = candle.lowest_52_week_price;\n        newData[coinMarket][\"lowestDate52Week\"] = candle.lowest_52_week_date;\n      } else {\n        const volume = candle.trade_volume;\n        const tradePrice = candle.trade_price;\n\n        newData[coinMarket][\"candles\"] = [\n          ...targetCandles,\n          {\n            date,\n            datetime,\n            timestamp: candle.timestamp,\n            dateKst: candle.trade_date_kst,\n            timeKst: candle.trade_time_kst,\n            open: close,\n            high: close,\n            low: close,\n            close,\n            volume,\n            tradePrice,\n          },\n        ];\n        newData[coinMarket][\"tradePrice24Hour\"] = candle.acc_trade_price_24h;\n        newData[coinMarket][\"volume24Hour\"] = candle.acc_trade_volume_24h;\n        newData[coinMarket][\"changeRate24Hour\"] = candle.signed_change_rate;\n        newData[coinMarket][\"changePrice24Hour\"] = candle.signed_change_price;\n        newData[coinMarket][\"highestPrice24Hour\"] = dateChanged // 날짜가 바뀌지 않았을때만 고점 갱신기록, 날짜 바뀌면 지금 고점 기록\n          ? high\n          : high > highestPrice24Hour\n          ? high\n          : highestPrice24Hour;\n        newData[coinMarket][\"lowestPrice24Hour\"] = dateChanged\n          ? low\n          : low < lowestPrice24Hour\n          ? low\n          : lowestPrice24Hour;\n        newData[coinMarket][\"highestPrice52Week\"] =\n          candle.highest_52_week_price;\n        newData[coinMarket][\"highestDate52Week\"] = candle.highest_52_week_date;\n        newData[coinMarket][\"lowestPrice52Week\"] = candle.lowest_52_week_price;\n        newData[coinMarket][\"lowestDate52Week\"] = candle.lowest_52_week_date;\n      }\n    });\n\n    return newData;\n  },\n  oneCoin: (candles, state) => {\n    const candleStateData = state.Coin.candle.data;\n    const selectedTimeType = state.Coin.selectedTimeType;\n    const selectedTimeCount = state.Coin.selectedTimeCount;\n    const market = candles[0].market;\n\n    const newCandles = candles.map((candle) => {\n      return {\n        date: dateFormat(\n          timestampToDatetime(\n            selectedTimeType,\n            selectedTimeCount,\n            candle.timestamp\n          )\n        ),\n        datetime: timestampToDatetime(\n          selectedTimeType,\n          selectedTimeCount,\n          candle.timestamp\n        ),\n        timestamp: candle.timestamp,\n        open: candle.opening_price,\n        high: candle.high_price,\n        low: candle.low_price,\n        close: candle.trade_price,\n        volume: candle.candle_acc_trade_volume,\n        tradePrice: candle.candle_acc_trade_price,\n      };\n    });\n\n    const newData = {\n      ...candleStateData,\n      [market]: {\n        ...candleStateData[market],\n        candles: newCandles,\n      },\n    };\n\n    return newData;\n  },\n  add: (candles, state) => {\n    const candleStateData = state.Coin.candle.data;\n    const selectedTimeType = state.Coin.selectedTimeType;\n    const selectedTimeCount = state.Coin.selectedTimeCount;\n    const market = candles[0].market;\n\n    const newCandles = candles.reduce((acc, candle) => {\n      if (!candle.timestamp) return acc;\n      if (\n        candleStateData[market].candles.find(\n          (stateCandle) => stateCandle.timestamp === candle.timestamp\n        )\n      )\n        return acc;\n\n      return [\n        ...acc,\n        {\n          date: dateFormat(\n            timestampToDatetime(\n              selectedTimeType,\n              selectedTimeCount,\n              candle.timestamp\n            )\n          ),\n          datetime: timestampToDatetime(\n            selectedTimeType,\n            selectedTimeCount,\n            candle.timestamp\n          ),\n          timestamp: candle.timestamp,\n          open: candle.opening_price,\n          high: candle.high_price,\n          low: candle.low_price,\n          close: candle.trade_price,\n          volume: candle.candle_acc_trade_volume,\n          tradePrice: candle.candle_acc_trade_price,\n        },\n      ];\n    }, []);\n\n    const newData = {\n      ...candleStateData,\n      [market]: {\n        ...candleStateData[market],\n        candles: [...newCandles, ...candleStateData[market].candles],\n      },\n    };\n\n    return newData;\n  },\n  marketNames: (names) => {\n    const data = {};\n    names.forEach((name) => {\n      if (name.market.split(\"-\")[0] !== \"KRW\") return;\n      data[name.market] = {\n        korean: name.korean_name,\n        english: name.english_name,\n      };\n    });\n\n    return data;\n  },\n};\n\nconst orderbookUtils = {\n  init: (orderbooks, _) => {\n    const data = {};\n    orderbooks.forEach((orderbook) => {\n      data[orderbook.market] = {\n        ...orderbook,\n        code: orderbook.market,\n      };\n    });\n\n    return data;\n  },\n  update: (orderbook, state) => {\n    const orderbookData = state.Coin.orderbook.data;\n    const market = orderbook.code;\n    return {\n      ...orderbookData,\n      [market]: {\n        ...orderbook,\n        market,\n      },\n    };\n  },\n};\n\nconst tradeListUtils = {\n  init: (tradeLists, state) => {\n    const tradeListData = state.Coin.tradeList.data;\n    const market = tradeLists[0].market;\n    return {\n      ...tradeListData,\n      [market]: tradeLists,\n    };\n  },\n  update: (tradeList, state) => {\n    const tradeListData = state.Coin.tradeList.data;\n    const market = tradeList.code;\n    if (\n      tradeListData[market] &&\n      tradeListData[market].find(\n        (data) => data.sequential_id === tradeList.sequential_id\n      )\n    )\n      return tradeListData;\n\n    // 데이터가 200개까지만 유지되게 만듦\n    tradeListData[market] &&\n      tradeListData[market].length > 200 &&\n      tradeListData[market].pop();\n\n    return tradeListData[market]\n      ? {\n          ...tradeListData,\n          [market]: [tradeList, ...tradeListData[market]],\n        }\n      : {\n          ...tradeListData,\n          [market]: [tradeList],\n        };\n  },\n};\n\nconst choHangul = (str) => {\n  const cho = [\n    \"ㄱ\",\n    \"ㄲ\",\n    \"ㄴ\",\n    \"ㄷ\",\n    \"ㄸ\",\n    \"ㄹ\",\n    \"ㅁ\",\n    \"ㅂ\",\n    \"ㅃ\",\n    \"ㅅ\",\n    \"ㅆ\",\n    \"ㅇ\",\n    \"ㅈ\",\n    \"ㅉ\",\n    \"ㅊ\",\n    \"ㅋ\",\n    \"ㅌ\",\n    \"ㅍ\",\n    \"ㅎ\",\n  ];\n\n  return [...str].reduce((acc, cur) => {\n    const code = cur.charCodeAt(0) - 44032;\n    return code > -1 && code < 11172\n      ? acc + cho[Math.floor(code / 588)]\n      : acc + cur.charAt(0);\n  }, \"\");\n};\n\nexport {\n  timestampToDatetime,\n  candleDataUtils,\n  orderbookUtils,\n  tradeListUtils,\n  choHangul,\n};\n"]},"metadata":{},"sourceType":"module"}