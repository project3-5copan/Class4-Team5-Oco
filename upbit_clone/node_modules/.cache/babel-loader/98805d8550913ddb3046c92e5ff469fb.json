{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { event as d3Event, mouse, select, touches } from \"d3-selection\";\nimport * as React from \"react\";\nimport { d3Window, getTouchProps, MOUSEENTER, MOUSELEAVE, MOUSEMOVE, mousePosition, MOUSEUP, TOUCHEND, TOUCHMOVE, touchPosition } from \"./utils\";\nimport { getCurrentCharts } from \"./utils/ChartDataUtil\";\nexport var EventCapture = /*#__PURE__*/function (_React$Component) {\n  _inherits(EventCapture, _React$Component);\n\n  var _super = _createSuper(EventCapture);\n\n  function EventCapture(props) {\n    var _this;\n\n    _classCallCheck(this, EventCapture);\n\n    _this = _super.call(this, props);\n    _this.dx = 0;\n    _this.dy = 0;\n    _this.mouseInside = false;\n    _this.mouseInteraction = true;\n    _this.ref = React.createRef();\n\n    _this.handleEnter = function () {\n      var onMouseEnter = _this.props.onMouseEnter;\n\n      if (onMouseEnter === undefined) {\n        return;\n      }\n\n      var e = d3Event;\n      _this.mouseInside = true;\n\n      if (!_this.state.panInProgress && !_this.state.dragInProgress) {\n        var win = d3Window(_this.ref.current);\n        select(win).on(MOUSEMOVE, _this.handleMouseMove);\n      }\n\n      onMouseEnter(e);\n    };\n\n    _this.handleLeave = function (e) {\n      var onMouseLeave = _this.props.onMouseLeave;\n\n      if (onMouseLeave === undefined) {\n        return;\n      }\n\n      _this.mouseInside = false;\n\n      if (!_this.state.panInProgress && !_this.state.dragInProgress) {\n        var win = d3Window(_this.ref.current);\n        select(win).on(MOUSEMOVE, null);\n      }\n\n      onMouseLeave(e);\n    };\n\n    _this.handleWheel = function (e) {\n      var _this$props = _this.props,\n          onPan = _this$props.onPan,\n          zoom = _this$props.zoom,\n          onZoom = _this$props.onZoom;\n      var panInProgress = _this.state.panInProgress;\n      var yZoom = Math.abs(e.deltaY) > Math.abs(e.deltaX) && Math.abs(e.deltaY) > 0;\n      var mouseXY = mousePosition(e);\n      e.preventDefault();\n\n      if (zoom && _this.focus && yZoom && !panInProgress) {\n        var zoomDir = e.deltaY > 0 ? 1 : -1;\n\n        if (onZoom !== undefined) {\n          onZoom(zoomDir, mouseXY, e);\n        }\n      } else if (_this.focus) {\n        if (_this.shouldPan() && _this.state.panStart !== undefined) {\n          // pan already in progress\n          var _this$state$panStart = _this.state.panStart,\n              panStartXScale = _this$state$panStart.panStartXScale,\n              chartsToPan = _this$state$panStart.chartsToPan;\n          _this.lastNewPos = mouseXY;\n          _this.panHappened = true;\n\n          if (_this.dx === undefined) {\n            _this.dx = 0;\n          }\n\n          if (_this.dy === undefined) {\n            _this.dy = 0;\n          }\n\n          _this.dx -= e.deltaX;\n          _this.dy += e.deltaY;\n          var dxdy = {\n            dx: _this.dx,\n            dy: _this.dy\n          };\n\n          if (onPan !== undefined) {\n            onPan(mouseXY, panStartXScale, dxdy, chartsToPan, e);\n          }\n        } else {\n          var _this$props2 = _this.props,\n              xScale = _this$props2.xScale,\n              chartConfig = _this$props2.chartConfig;\n          var currentCharts = getCurrentCharts(chartConfig, mouseXY);\n          _this.dx = 0;\n          _this.dy = 0;\n\n          _this.setState({\n            panInProgress: true,\n            panStart: {\n              panStartXScale: xScale,\n              panOrigin: mouseXY,\n              chartsToPan: currentCharts\n            }\n          });\n        }\n\n        _this.queuePanEnd();\n      }\n    };\n\n    _this.handleMouseMove = function () {\n      var _this$props3 = _this.props,\n          onMouseMove = _this$props3.onMouseMove,\n          mouseMove = _this$props3.mouseMove;\n\n      if (onMouseMove === undefined) {\n        return;\n      }\n\n      if (_this.mouseInteraction && mouseMove && !_this.state.panInProgress) {\n        var newPos = mouse(_this.ref.current);\n        onMouseMove(newPos, \"mouse\", d3Event);\n      }\n    };\n\n    _this.handleClick = function (e) {\n      var mouseXY = mousePosition(e);\n      var _this$props4 = _this.props,\n          onClick = _this$props4.onClick,\n          onDoubleClick = _this$props4.onDoubleClick;\n\n      if (!_this.panHappened && !_this.dragHappened) {\n        if (_this.clicked && onDoubleClick !== undefined) {\n          onDoubleClick(mouseXY, e);\n          _this.clicked = false;\n        } else if (onClick !== undefined) {\n          onClick(mouseXY, e);\n          _this.clicked = true;\n          setTimeout(function () {\n            if (_this.clicked) {\n              _this.clicked = false;\n            }\n          }, 400);\n        }\n      }\n    };\n\n    _this.handleRightClick = function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      var _this$props5 = _this.props,\n          onContextMenu = _this$props5.onContextMenu,\n          onPanEnd = _this$props5.onPanEnd;\n      var mouseXY = mousePosition(e, _this.ref.current.getBoundingClientRect());\n\n      if (_this.state.panStart !== undefined) {\n        var _this$state$panStart2 = _this.state.panStart,\n            panStartXScale = _this$state$panStart2.panStartXScale,\n            _this$state$panStart3 = _slicedToArray(_this$state$panStart2.panOrigin, 2),\n            dx = _this$state$panStart3[0],\n            dy = _this$state$panStart3[1],\n            chartsToPan = _this$state$panStart2.chartsToPan;\n\n        if (_this.panHappened && onPanEnd !== undefined) {\n          onPanEnd(mouseXY, panStartXScale, {\n            dx: dx,\n            dy: dy\n          }, chartsToPan, e);\n        }\n\n        var win = d3Window(_this.ref.current);\n        select(win).on(MOUSEMOVE, null).on(MOUSEUP, null);\n\n        _this.setState({\n          panInProgress: false,\n          panStart: undefined\n        });\n      }\n\n      if (onContextMenu !== undefined) {\n        onContextMenu(mouseXY, e);\n      }\n    };\n\n    _this.handleDrag = function () {\n      var onDrag = _this.props.onDrag;\n\n      if (onDrag === undefined) {\n        return;\n      }\n\n      _this.dragHappened = true;\n      var dragStartPosition = _this.state.dragStartPosition;\n\n      if (dragStartPosition === undefined) {\n        return;\n      }\n\n      var e = d3Event;\n      var mouseXY = mouse(_this.ref.current);\n      onDrag({\n        startPos: dragStartPosition,\n        mouseXY: mouseXY\n      }, e);\n    };\n\n    _this.handleDragEnd = function () {\n      var e = d3Event;\n      var mouseXY = mouse(_this.ref.current);\n      var win = d3Window(_this.ref.current);\n      select(win) // @ts-ignore\n      .on(MOUSEMOVE, _this.mouseInside ? _this.handleMouseMove : null).on(MOUSEUP, null);\n\n      if (_this.dragHappened) {\n        var onDragComplete = _this.props.onDragComplete;\n\n        if (onDragComplete !== undefined) {\n          onDragComplete({\n            mouseXY: mouseXY\n          }, e);\n        }\n      }\n\n      _this.setState({\n        dragInProgress: false\n      });\n\n      _this.mouseInteraction = true;\n    };\n\n    _this.canPan = function () {\n      var getAllPanConditions = _this.props.getAllPanConditions;\n      var initialPanEnabled = _this.props.pan;\n\n      var _getAllPanConditions$ = getAllPanConditions().reduce(function (returnObj, a) {\n        return {\n          draggable: returnObj.draggable || a.draggable,\n          panEnabled: returnObj.panEnabled && a.panEnabled\n        };\n      }, {\n        draggable: false,\n        panEnabled: initialPanEnabled\n      }),\n          panEnabled = _getAllPanConditions$.panEnabled,\n          somethingSelected = _getAllPanConditions$.draggable;\n\n      return {\n        panEnabled: panEnabled,\n        somethingSelected: somethingSelected\n      };\n    };\n\n    _this.handleMouseDown = function (e) {\n      if (e.button !== 0) {\n        return;\n      }\n\n      var _this$props6 = _this.props,\n          xScale = _this$props6.xScale,\n          chartConfig = _this$props6.chartConfig,\n          onMouseDown = _this$props6.onMouseDown;\n      _this.panHappened = false;\n      _this.dragHappened = false;\n      _this.focus = true;\n\n      if (!_this.state.panInProgress && _this.mouseInteraction) {\n        var mouseXY = mousePosition(e);\n        var currentCharts = getCurrentCharts(chartConfig, mouseXY);\n\n        var _this$canPan = _this.canPan(),\n            panEnabled = _this$canPan.panEnabled,\n            somethingSelected = _this$canPan.somethingSelected;\n\n        var pan = panEnabled && !somethingSelected;\n\n        if (pan) {\n          _this.setState({\n            panInProgress: pan,\n            panStart: {\n              panStartXScale: xScale,\n              panOrigin: mouseXY,\n              chartsToPan: currentCharts\n            }\n          });\n\n          var win = d3Window(_this.ref.current);\n          select(win).on(MOUSEMOVE, _this.handlePan).on(MOUSEUP, _this.handlePanEnd);\n        } else if (somethingSelected) {\n          _this.setState({\n            panInProgress: false,\n            dragInProgress: true,\n            panStart: undefined,\n            dragStartPosition: mouseXY\n          });\n\n          var onDragStart = _this.props.onDragStart;\n\n          if (onDragStart !== undefined) {\n            onDragStart({\n              startPos: mouseXY\n            }, e);\n          }\n\n          var _win = d3Window(_this.ref.current);\n\n          select(_win).on(MOUSEMOVE, _this.handleDrag).on(MOUSEUP, _this.handleDragEnd);\n        }\n\n        if (onMouseDown !== undefined) {\n          onMouseDown(mouseXY, currentCharts, e);\n        }\n      }\n\n      e.preventDefault();\n    };\n\n    _this.shouldPan = function () {\n      var _this$props7 = _this.props,\n          panEnabled = _this$props7.pan,\n          onPan = _this$props7.onPan;\n      return panEnabled && onPan && _this.state.panStart !== undefined;\n    };\n\n    _this.handlePan = function () {\n      var e = d3Event;\n\n      if (_this.shouldPan() && _this.state.panStart !== undefined) {\n        _this.panHappened = true;\n        var _this$state$panStart4 = _this.state.panStart,\n            panStartXScale = _this$state$panStart4.panStartXScale,\n            panOrigin = _this$state$panStart4.panOrigin,\n            chartsToPan = _this$state$panStart4.chartsToPan;\n        var dx;\n        var dy;\n        var mouseXY;\n\n        if (_this.mouseInteraction) {\n          mouseXY = mouse(_this.ref.current);\n          _this.lastNewPos = mouseXY;\n          dx = mouseXY[0] - panOrigin[0];\n          dy = mouseXY[1] - panOrigin[1];\n        } else {\n          mouseXY = touches(_this.ref.current)[0];\n          _this.lastNewPos = mouseXY;\n          dx = panOrigin[0] - mouseXY[0];\n          dy = panOrigin[1] - mouseXY[1];\n        }\n\n        _this.dx = dx;\n        _this.dy = dy;\n        var onPan = _this.props.onPan;\n\n        if (onPan !== undefined) {\n          onPan(mouseXY, panStartXScale, {\n            dx: dx,\n            dy: dy\n          }, chartsToPan, e);\n        }\n      }\n    };\n\n    _this.handlePanEnd = function () {\n      var e = d3Event;\n      var _this$props8 = _this.props,\n          panEnabled = _this$props8.pan,\n          onPanEnd = _this$props8.onPanEnd;\n\n      if (_this.state.panStart !== undefined) {\n        var _this$state$panStart5 = _this.state.panStart,\n            panStartXScale = _this$state$panStart5.panStartXScale,\n            chartsToPan = _this$state$panStart5.chartsToPan;\n        var win = d3Window(_this.ref.current);\n        select(win) // @ts-ignore\n        .on(MOUSEMOVE, _this.mouseInside ? _this.handleMouseMove : null).on(MOUSEUP, null).on(TOUCHMOVE, null).on(TOUCHEND, null);\n\n        if (_this.panHappened && panEnabled && onPanEnd) {\n          var _assertThisInitialize = _assertThisInitialized(_this),\n              _assertThisInitialize2 = _assertThisInitialize.dx,\n              dx = _assertThisInitialize2 === void 0 ? 0 : _assertThisInitialize2,\n              _assertThisInitialize3 = _assertThisInitialize.dy,\n              dy = _assertThisInitialize3 === void 0 ? 0 : _assertThisInitialize3;\n\n          delete _this.dx;\n          delete _this.dy;\n\n          if (_this.lastNewPos !== undefined) {\n            onPanEnd(_this.lastNewPos, panStartXScale, {\n              dx: dx,\n              dy: dy\n            }, chartsToPan, e);\n          }\n        }\n\n        _this.setState({\n          panInProgress: false,\n          panStart: undefined\n        });\n      }\n    };\n\n    _this.handleTouchMove = function (e) {\n      var onMouseMove = _this.props.onMouseMove;\n\n      if (onMouseMove === undefined) {\n        return;\n      }\n\n      var touch = getTouchProps(e.touches[0]);\n      var touchXY = touchPosition(touch, e);\n      onMouseMove(touchXY, \"touch\", e);\n    };\n\n    _this.handleTouchStart = function (e) {\n      _this.mouseInteraction = false;\n      var _this$props9 = _this.props,\n          panEnabled = _this$props9.pan,\n          chartConfig = _this$props9.chartConfig,\n          onMouseMove = _this$props9.onMouseMove,\n          xScale = _this$props9.xScale,\n          onPanEnd = _this$props9.onPanEnd;\n\n      if (e.touches.length === 1) {\n        _this.panHappened = false;\n        var touchXY = touchPosition(getTouchProps(e.touches[0]), e);\n\n        if (onMouseMove !== undefined) {\n          onMouseMove(touchXY, \"touch\", e);\n        }\n\n        if (panEnabled) {\n          var currentCharts = getCurrentCharts(chartConfig, touchXY);\n\n          _this.setState({\n            panInProgress: true,\n            panStart: {\n              panStartXScale: xScale,\n              panOrigin: touchXY,\n              chartsToPan: currentCharts\n            }\n          });\n\n          var win = d3Window(_this.ref.current);\n          select(win).on(TOUCHMOVE, _this.handlePan, false).on(TOUCHEND, _this.handlePanEnd, false);\n        }\n      } else if (e.touches.length === 2) {\n        // pinch zoom begin\n        // do nothing pinch zoom is handled in handleTouchMove\n        var _this$state = _this.state,\n            panInProgress = _this$state.panInProgress,\n            panStart = _this$state.panStart;\n\n        if (panInProgress && panEnabled && onPanEnd && panStart !== undefined) {\n          var panStartXScale = panStart.panStartXScale,\n              _panStart$panOrigin = _slicedToArray(panStart.panOrigin, 2),\n              dx = _panStart$panOrigin[0],\n              dy = _panStart$panOrigin[1],\n              chartsToPan = panStart.chartsToPan;\n\n          var _win2 = d3Window(_this.ref.current);\n\n          select(_win2) // @ts-ignore\n          .on(MOUSEMOVE, _this.mouseInside ? _this.handleMouseMove : null).on(MOUSEUP, null).on(TOUCHMOVE, _this.handlePinchZoom, false).on(TOUCHEND, _this.handlePinchZoomEnd, false);\n          var touch1Pos = touchPosition(getTouchProps(e.touches[0]), e);\n          var touch2Pos = touchPosition(getTouchProps(e.touches[1]), e);\n\n          if (_this.panHappened && panEnabled && onPanEnd && _this.lastNewPos !== undefined) {\n            onPanEnd(_this.lastNewPos, panStartXScale, {\n              dx: dx,\n              dy: dy\n            }, chartsToPan, e);\n          }\n\n          _this.setState({\n            panInProgress: false,\n            pinchZoomStart: {\n              xScale: xScale,\n              touch1Pos: touch1Pos,\n              touch2Pos: touch2Pos,\n              range: xScale.range(),\n              chartsToPan: chartsToPan\n            }\n          });\n        }\n      }\n    };\n\n    _this.handlePinchZoom = function () {\n      var pinchZoomStart = _this.state.pinchZoomStart;\n\n      if (pinchZoomStart === undefined) {\n        return;\n      }\n\n      var _this$props10 = _this.props,\n          xScale = _this$props10.xScale,\n          zoomEnabled = _this$props10.zoom,\n          onPinchZoom = _this$props10.onPinchZoom;\n\n      if (!zoomEnabled || onPinchZoom === undefined) {\n        return;\n      }\n\n      var e = d3Event;\n\n      var _touches = touches(_this.ref.current),\n          _touches2 = _slicedToArray(_touches, 2),\n          touch1Pos = _touches2[0],\n          touch2Pos = _touches2[1];\n\n      var chartsToPan = pinchZoomStart.chartsToPan,\n          initialPinch = __rest(pinchZoomStart, [\"chartsToPan\"]);\n\n      onPinchZoom(initialPinch, {\n        touch1Pos: touch1Pos,\n        touch2Pos: touch2Pos,\n        xScale: xScale\n      }, e);\n    };\n\n    _this.handlePinchZoomEnd = function () {\n      var e = d3Event;\n      var win = d3Window(_this.ref.current);\n      select(win).on(TOUCHMOVE, null).on(TOUCHEND, null);\n      var pinchZoomStart = _this.state.pinchZoomStart;\n\n      if (pinchZoomStart === undefined) {\n        return;\n      }\n\n      var chartsToPan = pinchZoomStart.chartsToPan,\n          initialPinch = __rest(pinchZoomStart, [\"chartsToPan\"]);\n\n      var _this$props11 = _this.props,\n          zoomEnabled = _this$props11.zoom,\n          onPinchZoomEnd = _this$props11.onPinchZoomEnd;\n\n      if (zoomEnabled && onPinchZoomEnd) {\n        onPinchZoomEnd(initialPinch, e);\n      }\n\n      _this.setState({\n        pinchZoomStart: undefined\n      });\n    };\n\n    _this.setCursorClass = function (cursorOverrideClass) {\n      if (cursorOverrideClass !== _this.state.cursorOverrideClass) {\n        _this.setState({\n          cursorOverrideClass: cursorOverrideClass\n        });\n      }\n    };\n\n    _this.focus = props.focus;\n    _this.state = {\n      panInProgress: false\n    };\n    return _this;\n  }\n\n  _createClass(EventCapture, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var disableInteraction = this.props.disableInteraction;\n      var current = this.ref.current;\n\n      if (current === null) {\n        return;\n      }\n\n      if (!disableInteraction) {\n        // @ts-ignore\n        select(current).on(MOUSEENTER, this.handleEnter).on(MOUSELEAVE, this.handleLeave); // @ts-ignore\n\n        current.addEventListener(\"wheel\", this.handleWheel, {\n          passive: false\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.componentDidMount();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var disableInteraction = this.props.disableInteraction;\n      var current = this.ref.current;\n\n      if (current === null) {\n        return;\n      }\n\n      if (!disableInteraction) {\n        select(current).on(MOUSEENTER, null).on(MOUSELEAVE, null);\n        var win = d3Window(current);\n        select(win).on(MOUSEMOVE, null); // @ts-ignore\n\n        current.removeEventListener(\"wheel\", this.handleWheel, {\n          passive: false\n        });\n      }\n    }\n  }, {\n    key: \"queuePanEnd\",\n    value: function queuePanEnd() {\n      var _this2 = this;\n\n      if (this.panEndTimeout !== undefined) {\n        window.clearTimeout(this.panEndTimeout);\n      }\n\n      this.panEndTimeout = window.setTimeout(function () {\n        _this2.handlePanEnd();\n      }, 100);\n    }\n  }, {\n    key: \"cancelDrag\",\n    value: function cancelDrag() {\n      var win = d3Window(this.ref.current);\n      select(win) // @ts-ignore\n      .on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null).on(MOUSEUP, null);\n      this.setState({\n        dragInProgress: false\n      });\n      this.mouseInteraction = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props12 = this.props,\n          height = _this$props12.height,\n          width = _this$props12.width,\n          disableInteraction = _this$props12.disableInteraction,\n          useCrossHairStyleCursor = _this$props12.useCrossHairStyleCursor;\n      var className = disableInteraction ? undefined : this.state.cursorOverrideClass !== undefined ? this.state.cursorOverrideClass : !useCrossHairStyleCursor ? undefined : this.state.panInProgress ? \"react-financial-charts-grabbing-cursor\" : \"react-financial-charts-crosshair-cursor\";\n      var interactionProps = disableInteraction || {\n        onMouseDown: this.handleMouseDown,\n        onClick: this.handleClick,\n        onContextMenu: this.handleRightClick,\n        onTouchStart: this.handleTouchStart,\n        onTouchMove: this.handleTouchMove\n      };\n      return React.createElement(\"rect\", Object.assign({\n        ref: this.ref,\n        className: className,\n        width: width,\n        height: height,\n        style: {\n          opacity: 0\n        }\n      }, interactionProps));\n    }\n  }]);\n\n  return EventCapture;\n}(React.Component);\nEventCapture.defaultProps = {\n  mouseMove: false,\n  zoom: false,\n  pan: false,\n  panSpeedMultiplier: 1,\n  focus: false,\n  disableInteraction: false\n};","map":null,"metadata":{},"sourceType":"module"}