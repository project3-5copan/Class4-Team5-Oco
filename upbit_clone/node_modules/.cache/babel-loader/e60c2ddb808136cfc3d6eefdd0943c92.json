{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { first, getStrokeDasharrayCanvas, GenericComponent, getMouseCanvas, last } from \"@react-financial-charts/core\";\nimport * as PropTypes from \"prop-types\";\nimport * as React from \"react\";\n\nvar defaultCustomSnapX = function defaultCustomSnapX(props, moreProps) {\n  var xScale = moreProps.xScale,\n      xAccessor = moreProps.xAccessor,\n      currentItem = moreProps.currentItem,\n      mouseXY = moreProps.mouseXY;\n  var snapX = props.snapX;\n  var x = snapX ? Math.round(xScale(xAccessor(currentItem))) : mouseXY[0];\n  return x;\n};\n\nexport var Cursor = /*#__PURE__*/function (_React$Component) {\n  _inherits(Cursor, _React$Component);\n\n  var _super = _createSuper(Cursor);\n\n  function Cursor() {\n    var _this;\n\n    _classCallCheck(this, Cursor);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var cursors = _this.getXYCursor(_this.props, moreProps);\n\n      if (cursors === undefined) {\n        return;\n      }\n\n      var useXCursorShape = _this.props.useXCursorShape;\n      var _this$context = _this.context,\n          margin = _this$context.margin,\n          ratio = _this$context.ratio;\n      var originX = 0.5 * ratio + margin.left;\n      var originY = 0.5 * ratio + margin.top;\n      ctx.save();\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.scale(ratio, ratio);\n      ctx.translate(originX, originY);\n      cursors.forEach(function (line) {\n        if (useXCursorShape && line.isXCursor) {\n          var xCursorShapeStrokeDasharray = _this.props.xCursorShapeStrokeDasharray;\n\n          if (xCursorShapeStrokeDasharray !== undefined) {\n            var xShapeStrokeStyle = _this.getXCursorShapeStroke(moreProps);\n\n            if (xShapeStrokeStyle !== undefined) {\n              ctx.strokeStyle = xShapeStrokeStyle;\n            }\n\n            ctx.setLineDash(getStrokeDasharrayCanvas(xCursorShapeStrokeDasharray));\n          }\n\n          ctx.beginPath();\n\n          var xShapeFillStyle = _this.getXCursorShapeFill(moreProps);\n\n          if (xShapeFillStyle !== undefined) {\n            ctx.fillStyle = xShapeFillStyle;\n          }\n\n          ctx.beginPath();\n\n          var xShape = _this.getXCursorShape(moreProps);\n\n          xCursorShapeStrokeDasharray === undefined ? ctx.fillRect(xShape.xPos, 0, xShape.shapeWidth, xShape.height) : ctx.rect(xShape.xPos, 0, xShape.shapeWidth, xShape.height);\n          ctx.fill();\n        } else {\n          if (line.strokeStyle !== undefined) {\n            ctx.strokeStyle = line.strokeStyle;\n          }\n\n          var dashArray = getStrokeDasharrayCanvas(line.strokeDasharray);\n          ctx.setLineDash(dashArray);\n          ctx.beginPath();\n          ctx.moveTo(line.x1, line.y1);\n          ctx.lineTo(line.x2, line.y2);\n        }\n\n        ctx.stroke();\n      });\n      ctx.restore();\n    };\n\n    return _this;\n  }\n\n  _createClass(Cursor, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(GenericComponent, {\n        clip: false,\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: getMouseCanvas,\n        drawOn: [\"mousemove\", \"pan\", \"drag\"]\n      });\n    }\n  }, {\n    key: \"getXCursorShapeStroke\",\n    value: function getXCursorShapeStroke(_ref) {\n      var currentItem = _ref.currentItem;\n      var xCursorShapeStrokeStyle = this.props.xCursorShapeStrokeStyle;\n      return xCursorShapeStrokeStyle instanceof Function ? xCursorShapeStrokeStyle(currentItem) : xCursorShapeStrokeStyle;\n    }\n  }, {\n    key: \"getXCursorShapeFill\",\n    value: function getXCursorShapeFill(_ref2) {\n      var currentItem = _ref2.currentItem;\n      var xCursorShapeFillStyle = this.props.xCursorShapeFillStyle;\n      return xCursorShapeFillStyle instanceof Function ? xCursorShapeFillStyle(currentItem) : xCursorShapeFillStyle;\n    }\n  }, {\n    key: \"getXCursorShape\",\n    value: function getXCursorShape(moreProps) {\n      var height = moreProps.height,\n          xScale = moreProps.xScale,\n          currentItem = moreProps.currentItem,\n          plotData = moreProps.plotData;\n      var xAccessor = moreProps.xAccessor;\n      var xValue = xAccessor(currentItem);\n      var centerX = xScale(xValue);\n      var shapeWidth = Math.abs(xScale(xAccessor(last(plotData))) - xScale(xAccessor(first(plotData)))) / (plotData.length - 1);\n      var xPos = centerX - shapeWidth / 2;\n      return {\n        height: height,\n        xPos: xPos,\n        shapeWidth: shapeWidth\n      };\n    }\n  }, {\n    key: \"getXYCursor\",\n    value: function getXYCursor(props, moreProps) {\n      var mouseXY = moreProps.mouseXY,\n          currentItem = moreProps.currentItem,\n          show = moreProps.show,\n          height = moreProps.height,\n          width = moreProps.width;\n      var _props$customX = props.customX,\n          customX = _props$customX === void 0 ? Cursor.defaultProps.customX : _props$customX,\n          strokeStyle = props.strokeStyle,\n          strokeDasharray = props.strokeDasharray,\n          disableYCursor = props.disableYCursor;\n\n      if (!show || currentItem === undefined) {\n        return undefined;\n      }\n\n      var yCursor = {\n        x1: 0,\n        x2: width,\n        y1: mouseXY[1] + 0.5,\n        y2: mouseXY[1] + 0.5,\n        strokeStyle: strokeStyle,\n        strokeDasharray: strokeDasharray,\n        isXCursor: false\n      };\n      var x = customX(props, moreProps);\n      var xCursor = {\n        x1: x,\n        x2: x,\n        y1: 0,\n        y2: height,\n        strokeStyle: strokeStyle,\n        strokeDasharray: strokeDasharray,\n        isXCursor: true\n      };\n      return disableYCursor ? [xCursor] : [yCursor, xCursor];\n    }\n  }]);\n\n  return Cursor;\n}(React.Component);\nCursor.defaultProps = {\n  strokeStyle: \"rgba(55, 71, 79, 0.8)\",\n  strokeDasharray: \"ShortDash\",\n  snapX: true,\n  customX: defaultCustomSnapX,\n  disableYCursor: false,\n  useXCursorShape: false,\n  xCursorShapeStrokeStyle: \"rgba(0, 0, 0, 0.5)\"\n};\nCursor.contextTypes = {\n  margin: PropTypes.object.isRequired,\n  ratio: PropTypes.number.isRequired\n};","map":null,"metadata":{},"sourceType":"module"}