{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { GenericChartComponent, last } from \"@react-financial-charts/core\";\nimport { format } from \"d3-format\";\nimport * as React from \"react\";\nimport { SingleTooltip } from \"./SingleTooltip\";\nimport { ToolTipText } from \"./ToolTipText\";\nexport var GroupTooltip = /*#__PURE__*/function (_React$Component) {\n  _inherits(GroupTooltip, _React$Component);\n\n  var _super = _createSuper(GroupTooltip);\n\n  function GroupTooltip() {\n    var _this;\n\n    _classCallCheck(this, GroupTooltip);\n\n    _this = _super.apply(this, arguments);\n\n    _this.getPosition = function (moreProps) {\n      var position = _this.props.position;\n      var _moreProps$chartConfi = moreProps.chartConfig,\n          height = _moreProps$chartConfi.height,\n          width = _moreProps$chartConfi.width;\n      var dx = 20;\n      var dy = 40;\n      var textAnchor;\n      var xyPos = null;\n\n      if (position !== undefined) {\n        switch (position) {\n          case \"topRight\":\n            xyPos = [width - dx, null];\n            textAnchor = \"end\";\n            break;\n\n          case \"bottomLeft\":\n            xyPos = [null, height - dy];\n            break;\n\n          case \"bottomRight\":\n            xyPos = [width - dx, height - dy];\n            textAnchor = \"end\";\n            break;\n\n          default:\n            xyPos = [null, null];\n        }\n      } else {\n        xyPos = [null, null];\n      }\n\n      return {\n        xyPos: xyPos,\n        textAnchor: textAnchor\n      };\n    };\n\n    _this.renderSVG = function (moreProps) {\n      var _a;\n\n      var chartId = moreProps.chartId,\n          fullData = moreProps.fullData;\n      var _this$props = _this.props,\n          className = _this$props.className,\n          _this$props$displayIn = _this$props.displayInit,\n          displayInit = _this$props$displayIn === void 0 ? GroupTooltip.defaultProps.displayInit : _this$props$displayIn,\n          displayValuesFor = _this$props.displayValuesFor,\n          onClick = _this$props.onClick,\n          _this$props$width = _this$props.width,\n          width = _this$props$width === void 0 ? 60 : _this$props$width,\n          _this$props$verticalS = _this$props.verticalSize,\n          verticalSize = _this$props$verticalS === void 0 ? 13 : _this$props$verticalS,\n          fontFamily = _this$props.fontFamily,\n          fontSize = _this$props.fontSize,\n          fontWeight = _this$props.fontWeight,\n          layout = _this$props.layout,\n          origin = _this$props.origin,\n          displayFormat = _this$props.displayFormat,\n          options = _this$props.options;\n      var currentItem = (_a = displayValuesFor(_this.props, moreProps)) !== null && _a !== void 0 ? _a : last(fullData);\n\n      var _this$getPosition = _this.getPosition(moreProps),\n          xyPos = _this$getPosition.xyPos,\n          textAnchor = _this$getPosition.textAnchor;\n\n      var xPos = xyPos != null && xyPos[0] != null ? xyPos[0] : origin[0];\n      var yPos = xyPos != null && xyPos[1] != null ? xyPos[1] : origin[1];\n      var singleTooltip = options.map(function (each, idx) {\n        var yValue = currentItem && each.yAccessor(currentItem);\n        var yDisplayValue = yValue ? displayFormat(yValue) : displayInit;\n\n        var orig = function orig() {\n          if (layout === \"horizontal\" || layout === \"horizontalRows\") {\n            return [width * idx, 0];\n          }\n\n          if (layout === \"vertical\") {\n            return [0, verticalSize * idx];\n          }\n\n          if (layout === \"verticalRows\") {\n            return [0, verticalSize * 2.3 * idx];\n          }\n\n          return [0, 0];\n        };\n\n        return React.createElement(SingleTooltip, {\n          key: idx,\n          layout: layout,\n          origin: orig(),\n          yLabel: each.yLabel,\n          yValue: yDisplayValue,\n          options: each,\n          forChart: chartId,\n          onClick: onClick,\n          fontFamily: fontFamily,\n          fontSize: fontSize,\n          labelFill: each.labelFill,\n          valueFill: each.valueFill,\n          withShape: each.withShape\n        });\n      });\n      return React.createElement(\"g\", {\n        transform: \"translate(\".concat(xPos, \", \").concat(yPos, \")\"),\n        className: className,\n        textAnchor: textAnchor\n      }, layout === \"horizontalInline\" ? React.createElement(ToolTipText, {\n        x: 0,\n        y: 0,\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }, singleTooltip) : singleTooltip);\n    };\n\n    return _this;\n  }\n\n  _createClass(GroupTooltip, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(GenericChartComponent, {\n        clip: false,\n        svgDraw: this.renderSVG,\n        drawOn: [\"mousemove\"]\n      });\n    }\n  }]);\n\n  return GroupTooltip;\n}(React.Component);\nGroupTooltip.defaultProps = {\n  className: \"react-financial-charts-tooltip react-financial-charts-group-tooltip\",\n  layout: \"horizontal\",\n  displayFormat: format(\".2f\"),\n  displayInit: \"\",\n  displayValuesFor: function displayValuesFor(_, props) {\n    return props.currentItem;\n  },\n  origin: [0, 0],\n  width: 60,\n  verticalSize: 13\n};","map":null,"metadata":{},"sourceType":"module"}