{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { first, functor, getAxisCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nimport { area } from \"d3-shape\";\nimport * as React from \"react\";\nexport var AreaOnlySeries = /*#__PURE__*/function (_React$Component) {\n  _inherits(AreaOnlySeries, _React$Component);\n\n  var _super = _createSuper(AreaOnlySeries);\n\n  function AreaOnlySeries() {\n    var _this;\n\n    _classCallCheck(this, AreaOnlySeries);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var _this$props = _this.props,\n          fillStyle = _this$props.fillStyle,\n          curve = _this$props.curve,\n          canvasClip = _this$props.canvasClip,\n          yAccessor = _this$props.yAccessor,\n          _this$props$defined = _this$props.defined,\n          defined = _this$props$defined === void 0 ? AreaOnlySeries.defaultProps.defined : _this$props$defined,\n          base = _this$props.base;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData,\n          xAccessor = moreProps.xAccessor;\n\n      if (canvasClip !== undefined) {\n        ctx.save();\n        canvasClip(ctx, moreProps);\n      }\n\n      if (fillStyle !== undefined) {\n        ctx.fillStyle = fillStyle;\n      }\n\n      ctx.beginPath();\n      var newBase = functor(base);\n      var areaSeries = area().defined(function (d) {\n        return defined(yAccessor(d));\n      }).x(function (d) {\n        return Math.round(xScale(xAccessor(d)));\n      }).y0(function (d) {\n        return newBase(yScale, d, moreProps);\n      }).y1(function (d) {\n        return Math.round(yScale(yAccessor(d)));\n      }).context(ctx);\n\n      if (curve !== undefined) {\n        areaSeries.curve(curve);\n      }\n\n      areaSeries(plotData);\n      ctx.fill();\n\n      if (canvasClip !== undefined) {\n        ctx.restore();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(AreaOnlySeries, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(GenericChartComponent, {\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: getAxisCanvas,\n        drawOn: [\"pan\"]\n      });\n    }\n  }]);\n\n  return AreaOnlySeries;\n}(React.Component);\nAreaOnlySeries.defaultProps = {\n  defined: function defined(d) {\n    return d !== undefined && !isNaN(d);\n  },\n  base: function base(yScale) {\n    return first(yScale.range());\n  }\n};","map":null,"metadata":{},"sourceType":"module"}