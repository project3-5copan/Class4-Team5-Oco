{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from \"react\";\nimport { getAxisCanvas, getStrokeDasharrayCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nexport var StraightLine = /*#__PURE__*/function (_React$Component) {\n  _inherits(StraightLine, _React$Component);\n\n  var _super = _createSuper(StraightLine);\n\n  function StraightLine() {\n    var _this;\n\n    _classCallCheck(this, StraightLine);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var _this$props = _this.props,\n          type = _this$props.type,\n          strokeStyle = _this$props.strokeStyle,\n          lineWidth = _this$props.lineWidth,\n          lineDash = _this$props.lineDash,\n          yValue = _this$props.yValue,\n          xValue = _this$props.xValue;\n      var xScale = moreProps.xScale,\n          _moreProps$chartConfi = moreProps.chartConfig,\n          yScale = _moreProps$chartConfi.yScale,\n          width = _moreProps$chartConfi.width,\n          height = _moreProps$chartConfi.height;\n      ctx.beginPath();\n\n      if (strokeStyle !== undefined) {\n        ctx.strokeStyle = strokeStyle;\n      }\n\n      if (lineWidth !== undefined) {\n        ctx.lineWidth = lineWidth;\n      }\n\n      if (lineDash !== undefined) {\n        if (typeof lineDash === \"string\") {\n          ctx.setLineDash(getStrokeDasharrayCanvas(lineDash));\n        } else {\n          ctx.setLineDash(lineDash);\n        }\n      }\n\n      var _this$getLineCoordina = _this.getLineCoordinates(type, xScale, yScale, xValue, yValue, width, height),\n          x1 = _this$getLineCoordina.x1,\n          y1 = _this$getLineCoordina.y1,\n          x2 = _this$getLineCoordina.x2,\n          y2 = _this$getLineCoordina.y2;\n\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.stroke();\n    };\n\n    _this.getLineCoordinates = function (type, xScale, yScale, xValue, yValue, width, height) {\n      return type === \"horizontal\" ? {\n        x1: 0,\n        y1: Math.round(yScale(yValue)),\n        x2: width,\n        y2: Math.round(yScale(yValue))\n      } : {\n        x1: Math.round(xScale(xValue)),\n        y1: 0,\n        x2: Math.round(xScale(xValue)),\n        y2: height\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(StraightLine, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(GenericChartComponent, {\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: getAxisCanvas,\n        drawOn: [\"pan\"]\n      });\n    }\n  }]);\n\n  return StraightLine;\n}(React.Component);\nStraightLine.defaultProps = {\n  lineWidth: 1,\n  lineDash: \"Solid\",\n  strokeStyle: \"rgba(0, 0, 0, 0.5)\",\n  type: \"horizontal\"\n};","map":null,"metadata":{},"sourceType":"module"}