{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { functor, getAxisCanvas, GenericChartComponent, plotDataLengthBarWidth } from \"@react-financial-charts/core\";\nimport { group } from \"d3-array\";\nimport * as React from \"react\";\nexport var CandlestickSeries = /*#__PURE__*/function (_React$Component) {\n  _inherits(CandlestickSeries, _React$Component);\n\n  var _super = _createSuper(CandlestickSeries);\n\n  function CandlestickSeries() {\n    var _this;\n\n    _classCallCheck(this, CandlestickSeries);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var _this$props$candleStr = _this.props.candleStrokeWidth,\n          candleStrokeWidth = _this$props$candleStr === void 0 ? CandlestickSeries.defaultProps.candleStrokeWidth : _this$props$candleStr;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData,\n          xAccessor = moreProps.xAccessor;\n\n      var candleData = _this.getCandleData(xAccessor, xScale, yScale, plotData);\n\n      var wickNest = group(candleData, function (d) {\n        return d.wick.stroke;\n      });\n      wickNest.forEach(function (values, key) {\n        ctx.fillStyle = key;\n        values.forEach(function (each) {\n          var d = each.wick;\n          ctx.fillRect(d.x - 0.5, d.y1, 1, d.y2 - d.y1);\n          ctx.fillRect(d.x - 0.5, d.y3, 1, d.y4 - d.y3);\n        });\n      });\n      var candleNest = group(candleData, function (d) {\n        return d.stroke;\n      }, // @ts-ignore typings are incorrect for d3-array\n      function (d) {\n        return d.fill;\n      });\n      candleNest.forEach(function (strokeValues, strokeKey) {\n        if (strokeKey !== \"none\") {\n          // @ts-ignore\n          ctx.strokeStyle = strokeKey;\n          ctx.lineWidth = candleStrokeWidth;\n        }\n\n        strokeValues.forEach(function (values, key) {\n          // @ts-ignore\n          ctx.fillStyle = key; // @ts-ignore\n\n          values.forEach(function (d) {\n            if (d.width <= 1) {\n              ctx.fillRect(d.x - 0.5, d.y, 1, d.height);\n            } else if (d.height === 0) {\n              ctx.fillRect(d.x - 0.5, d.y, d.width, 1);\n            } else {\n              ctx.fillRect(d.x - 0.5, d.y, d.width, d.height);\n\n              if (strokeKey !== \"none\") {\n                ctx.strokeRect(d.x, d.y, d.width, d.height);\n              }\n            }\n          });\n        });\n      });\n    };\n\n    _this.getCandleData = function (xAccessor, xScale, yScale, plotData) {\n      var _this$props = _this.props,\n          fillProp = _this$props.fill,\n          strokeProp = _this$props.stroke,\n          yAccessor = _this$props.yAccessor,\n          wickStrokeProp = _this$props.wickStroke;\n      var fill = functor(fillProp);\n      var stroke = functor(strokeProp);\n      var wickStroke = functor(wickStrokeProp);\n      var widthFunctor = functor(_this.props.width);\n      var width = widthFunctor(_this.props, {\n        xScale: xScale,\n        xAccessor: xAccessor,\n        plotData: plotData\n      });\n      var trueOffset = 0.5 * width;\n      var offset = trueOffset > 0.7 ? Math.round(trueOffset) : Math.floor(trueOffset);\n      return plotData.filter(function (d) {\n        return d.close !== undefined;\n      }).map(function (d) {\n        var ohlc = yAccessor(d);\n\n        if (ohlc === undefined) {\n          return undefined;\n        }\n\n        var xValue = xAccessor(d);\n        var x = Math.round(xScale(xValue));\n        var y = Math.round(yScale(Math.max(ohlc.open, ohlc.close)));\n        var height = Math.max(1, Math.round(Math.abs(yScale(ohlc.open) - yScale(ohlc.close))));\n        return {\n          x: x - offset,\n          y: y,\n          wick: {\n            stroke: wickStroke(ohlc),\n            x: x,\n            y1: Math.round(yScale(ohlc.high)),\n            y2: y,\n            y3: y + height,\n            y4: Math.round(yScale(ohlc.low))\n          },\n          height: height,\n          width: offset * 2,\n          fill: fill(ohlc),\n          stroke: stroke(ohlc),\n          direction: ohlc.close - ohlc.open\n        };\n      }).filter(function (d) {\n        return d !== undefined;\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(CandlestickSeries, [{\n    key: \"render\",\n    value: function render() {\n      var clip = this.props.clip;\n      return React.createElement(GenericChartComponent, {\n        clip: clip,\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: getAxisCanvas,\n        drawOn: [\"pan\"]\n      });\n    }\n  }]);\n\n  return CandlestickSeries;\n}(React.Component);\nCandlestickSeries.defaultProps = {\n  candleStrokeWidth: 0.5,\n  clip: true,\n  fill: function fill(d) {\n    return d.close > d.open ? \"#26a69a\" : \"#ef5350\";\n  },\n  stroke: \"none\",\n  wickStroke: function wickStroke(d) {\n    return d.close > d.open ? \"#26a69a\" : \"#ef5350\";\n  },\n  width: plotDataLengthBarWidth,\n  widthRatio: 0.8,\n  yAccessor: function yAccessor(d) {\n    return {\n      open: d.open,\n      high: d.high,\n      low: d.low,\n      close: d.close\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}