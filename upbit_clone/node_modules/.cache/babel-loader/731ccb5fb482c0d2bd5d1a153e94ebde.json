{"ast":null,"code":"import { functor, merge, path } from \"../utils\";\nimport atr from \"./atr\";\nimport { Kagi as defaultOptions } from \"./defaultOptionsForComputation\";\nexport default function () {\n  var options = defaultOptions;\n\n  var dateAccessor = function dateAccessor(d) {\n    return d.date;\n  };\n\n  var dateMutator = function dateMutator(d, date) {\n    d.date = date;\n  };\n\n  var calculator = function calculator(data) {\n    var _options = options,\n        reversalType = _options.reversalType,\n        windowSize = _options.windowSize,\n        reversal = _options.reversal,\n        sourcePath = _options.sourcePath;\n    var source = path(sourcePath);\n    var reversalThreshold;\n\n    if (reversalType === \"ATR\") {\n      var atrAlgorithm = atr().options({\n        windowSize: windowSize\n      });\n      var atrCalculator = merge().algorithm(atrAlgorithm).merge(function (d, c) {\n        d[\"atr\" + windowSize] = c;\n      });\n      atrCalculator(data);\n\n      reversalThreshold = function reversalThreshold(d) {\n        return d[\"atr\" + windowSize];\n      };\n    } else {\n      reversalThreshold = functor(reversal);\n    }\n\n    var kagiData = [];\n    var prevPeak;\n    var prevTrough;\n    var direction;\n    var line = {};\n    data.forEach(function (d) {\n      if (line.from === undefined) {\n        dateMutator(line, dateAccessor(d));\n        line.from = dateAccessor(d);\n\n        if (!line.open) {\n          line.open = d.open;\n        }\n\n        line.high = d.high;\n        line.low = d.low;\n\n        if (!line.close) {\n          line.close = source(d);\n        }\n\n        line.startOfYear = d.startOfYear;\n        line.startOfQuarter = d.startOfQuarter;\n        line.startOfMonth = d.startOfMonth;\n        line.startOfWeek = d.startOfWeek;\n      }\n\n      if (!line.startOfYear) {\n        line.startOfYear = d.startOfYear;\n\n        if (line.startOfYear) {\n          line.date = d.date;\n        }\n      }\n\n      if (!line.startOfQuarter) {\n        line.startOfQuarter = d.startOfQuarter;\n\n        if (line.startOfQuarter && !line.startOfYear) {\n          line.date = d.date;\n        }\n      }\n\n      if (!line.startOfMonth) {\n        line.startOfMonth = d.startOfMonth;\n\n        if (line.startOfMonth && !line.startOfQuarter) {\n          line.date = d.date;\n        }\n      }\n\n      if (!line.startOfWeek) {\n        line.startOfWeek = d.startOfWeek;\n\n        if (line.startOfWeek && !line.startOfMonth) {\n          line.date = d.date;\n        }\n      }\n\n      line.volume = (line.volume || 0) + d.volume; // @ts-ignore\n\n      line.high = Math.max(line.high, d.high); // @ts-ignore\n\n      line.low = Math.min(line.low, d.low);\n      line.to = dateAccessor(d); // @ts-ignore\n\n      var priceMovement = source(d) - line.close;\n\n      if ( // @ts-ignore\n      line.close >= line.open\n      /* going up */\n      && priceMovement > 0 ||\n      /* and moving in same direction */\n      // @ts-ignore\n      line.close < line.open\n      /* going down */\n      && priceMovement < 0\n      /* and moving in same direction */\n      ) {\n          line.close = source(d); // @ts-ignore\n\n          if (prevTrough && line.close < prevTrough) {\n            // going below the prevTrough, so change from yang to yin\n            // A yin line forms when a Kagi line breaks below the prior trough.\n            line.changePoint = prevTrough;\n\n            if (line.startAs !== \"yin\") {\n              line.changeTo = \"yin\"; // line.startAs = \"yang\";\n            }\n          } // @ts-ignore\n\n\n          if (prevPeak && line.close > prevPeak) {\n            // going above the prevPeak, so change from yin to yang\n            // A yang line forms when a Kagi line breaks above the prior peak\n            line.changePoint = prevPeak;\n\n            if (line.startAs !== \"yang\") {\n              line.changeTo = \"yang\"; // line.startAs = \"yin\";\n            }\n          }\n        } else if ( // @ts-ignore\n      line.close >= line.open\n      /* going up */\n      && priceMovement < 0\n      /* and moving in other direction */\n      && Math.abs(priceMovement) > reversalThreshold(d) ||\n      /* and the movement is big enough for reversal */\n      // @ts-ignore\n      line.close < line.open\n      /* going down */\n      && priceMovement > 0\n      /* and moving in other direction */\n      &&\n      /* and the movement is big enough for reversal */\n      Math.abs(priceMovement) > reversalThreshold(d)) {\n        // reverse direction\n        var nextLineOpen = line.close; // @ts-ignore\n\n        direction = (line.close - line.open) / Math.abs(line.close - line.open);\n        var nextChangePoint;\n        var nextChangeTo;\n\n        if (direction < 0\n        /* if direction so far has been -ve*/\n        ) {\n            // compare with line.close becomes prevTrough\n            if (prevPeak === undefined) {\n              prevPeak = line.open;\n            }\n\n            prevTrough = line.close;\n\n            if (source(d) > prevPeak) {\n              nextChangePoint = prevPeak;\n              nextChangeTo = \"yang\";\n            }\n          } else {\n          if (prevTrough === undefined) {\n            prevTrough = line.open;\n          }\n\n          prevPeak = line.close;\n\n          if (source(d) < prevTrough) {\n            nextChangePoint = prevTrough;\n            nextChangeTo = \"yin\";\n          }\n        }\n\n        if (line.startAs === undefined) {\n          line.startAs = direction > 0 ? \"yang\" : \"yin\";\n        }\n\n        var startAs = line.changeTo || line.startAs;\n        line.added = true;\n        kagiData.push(line);\n        direction = -1 * direction; // direction is reversed\n\n        line = Object.assign({}, line);\n        line.open = nextLineOpen;\n        line.close = source(d);\n        line.startAs = startAs;\n        line.changePoint = nextChangePoint;\n        line.changeTo = nextChangeTo;\n        line.added = false;\n        line.from = undefined;\n        line.volume = 0;\n      } else {// console.log(\"MOVING IN REV DIR BUT..\", line.open, line.close, source(d));\n      }\n\n      line.current = source(d); // @ts-ignore\n\n      var dir = line.close - line.open;\n      dir = dir === 0 ? 1 : dir / Math.abs(dir); // @ts-ignore\n\n      line.reverseAt = dir > 0 ? line.close - reversalThreshold(d) : line.open - reversalThreshold(d);\n    });\n\n    if (!line.added) {\n      kagiData.push(line);\n    }\n\n    return kagiData;\n  };\n\n  calculator.options = function (newOptions) {\n    if (newOptions === undefined) {\n      return options;\n    }\n\n    options = Object.assign(Object.assign({}, defaultOptions), newOptions);\n    return calculator;\n  };\n\n  calculator.dateMutator = function (newDateMutator) {\n    if (newDateMutator === undefined) {\n      return dateMutator;\n    }\n\n    dateMutator = newDateMutator;\n    return calculator;\n  };\n\n  calculator.dateAccessor = function (newDateAccessor) {\n    if (newDateAccessor === undefined) {\n      return dateAccessor;\n    }\n\n    dateAccessor = newDateAccessor;\n    return calculator;\n  };\n\n  return calculator;\n}","map":null,"metadata":{},"sourceType":"module"}