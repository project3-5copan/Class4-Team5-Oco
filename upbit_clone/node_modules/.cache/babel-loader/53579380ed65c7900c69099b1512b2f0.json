{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from \"react\";\nimport { isDefined, isNotDefined, getAxisCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nexport var PointAndFigureSeries = /*#__PURE__*/function (_React$Component) {\n  _inherits(PointAndFigureSeries, _React$Component);\n\n  var _super = _createSuper(PointAndFigureSeries);\n\n  function PointAndFigureSeries() {\n    var _this;\n\n    _classCallCheck(this, PointAndFigureSeries);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var xAccessor = moreProps.xAccessor,\n          xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData;\n\n      var columns = _this.getColumns(xScale, xAccessor, yScale, plotData);\n\n      _this.drawOnCanvasPrivate(ctx, _this.props, columns);\n    };\n\n    _this.getColumns = function (xScale, xAccessor, yScale, plotData) {\n      var width = xScale(xAccessor(plotData[plotData.length - 1])) - xScale(xAccessor(plotData[0]));\n      var columnWidth = width / (plotData.length - 1);\n      var anyBox;\n      var j = 0;\n\n      while (isNotDefined(anyBox)) {\n        if (isDefined(plotData[j].close)) {\n          anyBox = plotData[j].boxes[0];\n        } else {\n          break;\n        }\n\n        j++;\n      }\n\n      var boxHeight = Math.abs(yScale(anyBox.open) - yScale(anyBox.close));\n      var columns = plotData.filter(function (d) {\n        return isDefined(d.close);\n      }).map(function (d) {\n        var boxes = d.boxes.map(function (box) {\n          return {\n            columnWidth: columnWidth,\n            boxHeight: boxHeight,\n            open: yScale(box.open),\n            close: yScale(box.close)\n          };\n        });\n        var xOffset = xScale(xAccessor(d)) - columnWidth / 2;\n        return {\n          boxes: boxes,\n          direction: d.direction,\n          offset: [xOffset, 0]\n        };\n      });\n      return columns;\n    };\n\n    _this.drawOnCanvasPrivate = function (ctx, props, columns) {\n      var stroke = props.stroke,\n          fill = props.fill,\n          strokeWidth = props.strokeWidth;\n      ctx.lineWidth = strokeWidth;\n      columns.forEach(function (col) {\n        var _col$offset = _slicedToArray(col.offset, 2),\n            offsetX = _col$offset[0],\n            offsetY = _col$offset[1];\n\n        col.boxes.forEach(function (box) {\n          if (col.direction > 0) {\n            ctx.fillStyle = fill.up;\n            ctx.strokeStyle = stroke.up;\n            ctx.beginPath();\n            ctx.moveTo(offsetX, offsetY + box.open);\n            ctx.lineTo(offsetX + box.columnWidth, offsetY + box.close);\n            ctx.moveTo(offsetX, offsetY + box.close);\n            ctx.lineTo(offsetX + box.columnWidth, offsetY + box.open);\n            ctx.stroke();\n          } else {\n            ctx.fillStyle = fill.down;\n            ctx.strokeStyle = stroke.down;\n            ctx.beginPath();\n            var x = offsetX + box.columnWidth / 2,\n                y = offsetY + box.open + box.boxHeight / 2;\n            var rx = box.columnWidth / 2,\n                ry = box.boxHeight / 2;\n            ctx.ellipse(x, y, rx, ry, 0, 0, 2 * Math.PI);\n            ctx.stroke();\n          }\n        });\n      });\n      ctx.stroke();\n    };\n\n    return _this;\n  }\n\n  _createClass(PointAndFigureSeries, [{\n    key: \"render\",\n    value: function render() {\n      var clip = this.props.clip;\n      return React.createElement(GenericChartComponent, {\n        clip: clip,\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: getAxisCanvas,\n        drawOn: [\"pan\"]\n      });\n    }\n  }]);\n\n  return PointAndFigureSeries;\n}(React.Component);\nPointAndFigureSeries.defaultProps = {\n  className: \"react-financial-charts-point-and-figure\",\n  strokeWidth: 1,\n  stroke: {\n    up: \"#6BA583\",\n    down: \"#FF0000\"\n  },\n  fill: {\n    up: \"none\",\n    down: \"none\"\n  },\n  clip: true\n};","map":null,"metadata":{},"sourceType":"module"}