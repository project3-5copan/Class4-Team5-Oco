{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as PropTypes from \"prop-types\";\nimport * as React from \"react\";\nimport { isDefined, noop, getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nimport { HoverTextNearMouse } from \"./components\";\nimport { getValueFromOverride, isHoverForInteractiveType, saveNodeType, terminate } from \"./utils\";\nimport { EachText } from \"./wrapper\";\nexport var InteractiveText = /*#__PURE__*/function (_React$Component) {\n  _inherits(InteractiveText, _React$Component);\n\n  var _super = _createSuper(InteractiveText);\n\n  function InteractiveText(props) {\n    var _this;\n\n    _classCallCheck(this, InteractiveText);\n\n    _this = _super.call(this, props);\n\n    _this.handleDraw = function (e, moreProps) {\n      var enabled = _this.props.enabled;\n\n      if (enabled) {\n        var _moreProps$mouseXY = _slicedToArray(moreProps.mouseXY, 2),\n            mouseY = _moreProps$mouseXY[1],\n            yScale = moreProps.chartConfig.yScale,\n            xAccessor = moreProps.xAccessor,\n            currentItem = moreProps.currentItem;\n\n        var _this$props = _this.props,\n            defaultText = _this$props.defaultText,\n            onChoosePosition = _this$props.onChoosePosition;\n\n        if (onChoosePosition !== undefined) {\n          var xyValue = [xAccessor(currentItem), yScale.invert(mouseY)];\n          var newText = Object.assign(Object.assign({}, defaultText), {\n            position: xyValue\n          });\n          onChoosePosition(e, newText, moreProps);\n        }\n      }\n    };\n\n    _this.handleDragComplete = function (e, moreProps) {\n      var override = _this.state.override;\n\n      if (isDefined(override)) {\n        var textList = _this.props.textList;\n        var newTextList = textList.map(function (each, idx) {\n          var selected = idx === override.index;\n          return selected ? Object.assign(Object.assign({}, each), {\n            position: override.position,\n            selected: selected\n          }) : Object.assign(Object.assign({}, each), {\n            selected: selected\n          });\n        });\n\n        _this.setState({\n          override: null\n        }, function () {\n          var onDragComplete = _this.props.onDragComplete;\n\n          if (onDragComplete !== undefined) {\n            onDragComplete(e, newTextList, moreProps);\n          }\n        });\n      }\n    };\n\n    _this.handleDrag = function (_, index, position) {\n      _this.setState({\n        override: {\n          index: index,\n          position: position\n        }\n      });\n    };\n\n    _this.terminate = terminate.bind(_assertThisInitialized(_this));\n    _this.saveNodeType = saveNodeType.bind(_assertThisInitialized(_this));\n    _this.getSelectionState = isHoverForInteractiveType(\"textList\").bind(_assertThisInitialized(_this));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(InteractiveText, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          textList = _this$props2.textList,\n          defaultText = _this$props2.defaultText,\n          hoverText = _this$props2.hoverText;\n      var override = this.state.override;\n      return React.createElement(\"g\", null, textList.map(function (each, idx) {\n        var defaultHoverText = InteractiveText.defaultProps.hoverText;\n        var props = Object.assign(Object.assign(Object.assign({}, defaultText), each), {\n          hoverText: Object.assign(Object.assign(Object.assign({}, defaultHoverText), hoverText), each.hoverText || {})\n        });\n        return React.createElement(EachText, Object.assign({\n          key: idx,\n          ref: _this2.saveNodeType(idx),\n          index: idx\n        }, props, {\n          selected: each.selected,\n          position: getValueFromOverride(override, idx, \"position\", each.position),\n          onDrag: _this2.handleDrag,\n          onDragComplete: _this2.handleDragComplete,\n          edgeInteractiveCursor: \"react-financial-charts-move-cursor\"\n        }));\n      }), React.createElement(GenericChartComponent, {\n        onClick: this.handleDraw,\n        canvasToDraw: getMouseCanvas,\n        drawOn: [\"mousemove\", \"pan\"]\n      }), \";\");\n    }\n  }]);\n\n  return InteractiveText;\n}(React.Component);\nInteractiveText.defaultProps = {\n  onSelect: noop,\n  defaultText: {\n    bgFill: \"#D3D3D3\",\n    bgOpacity: 1,\n    bgStrokeWidth: 1,\n    textFill: \"#F10040\",\n    fontFamily: \"-apple-system, system-ui, Roboto, 'Helvetica Neue', Ubuntu, sans-serif\",\n    fontSize: 12,\n    fontStyle: \"normal\",\n    fontWeight: \"normal\",\n    text: \"Lorem ipsum...\"\n  },\n  hoverText: Object.assign(Object.assign({}, HoverTextNearMouse.defaultProps), {\n    enable: true,\n    bgHeight: \"auto\",\n    bgWidth: \"auto\",\n    text: \"Click to select object\",\n    selectedText: \"\"\n  }),\n  textList: []\n};\nInteractiveText.contextTypes = {\n  subscribe: PropTypes.func.isRequired,\n  unsubscribe: PropTypes.func.isRequired,\n  generateSubscriptionId: PropTypes.func.isRequired,\n  chartId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired\n};","map":null,"metadata":{},"sourceType":"module"}