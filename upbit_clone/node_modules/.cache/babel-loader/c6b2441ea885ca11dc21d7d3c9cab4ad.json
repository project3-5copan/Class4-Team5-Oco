{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { first, last } from \".\";\n/**\n * Bar width is based on the amount of items in the plot data and the distance between the first and last of those\n * items.\n * @param props the props passed to the series.\n * @param moreProps an object holding the xScale, xAccessor and plotData.\n * @return {number} the bar width.\n */\n\nexport var plotDataLengthBarWidth = function plotDataLengthBarWidth(props, moreProps) {\n  var widthRatio = props.widthRatio;\n  var xAccessor = moreProps.xAccessor,\n      xScale = moreProps.xScale,\n      plotData = moreProps.plotData;\n\n  var _xScale$range = xScale.range(),\n      _xScale$range2 = _slicedToArray(_xScale$range, 2),\n      l = _xScale$range2[0],\n      r = _xScale$range2[1];\n\n  if (xScale.invert != null) {\n    var _xScale$domain = xScale.domain(),\n        _xScale$domain2 = _slicedToArray(_xScale$domain, 2),\n        dl = _xScale$domain2[0],\n        dr = _xScale$domain2[1];\n\n    if (typeof dl === \"number\" && typeof dr === \"number\") {\n      var _totalWidth = Math.abs(r - l);\n\n      var _width2 = _totalWidth / Math.abs(dl - dr);\n\n      return _width2 * widthRatio;\n    }\n\n    var _width = xScale(xAccessor(last(plotData))) - xScale(xAccessor(first(plotData)));\n\n    return _width / plotData.length * widthRatio * 0.7;\n  }\n\n  var totalWidth = Math.abs(r - l);\n  var width = totalWidth / xScale.domain().length;\n  return width * widthRatio;\n};","map":null,"metadata":{},"sourceType":"module"}