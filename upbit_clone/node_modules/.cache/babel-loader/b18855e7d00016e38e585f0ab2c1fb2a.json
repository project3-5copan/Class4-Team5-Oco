{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from \"react\";\nimport { first, getAxisCanvas, getMouseCanvas, GenericChartComponent, last } from \"@react-financial-charts/core\";\n/**\n * SAR stands for 'stop and reverse'.\n * The indicator is below prices as they're rising and above\n * prices as they're falling. In this regard, the indicator\n * stops and reverses when the price trend reverses and breaks above or below the indicator.\n */\n\nexport var SARSeries = /*#__PURE__*/function (_React$Component) {\n  _inherits(SARSeries, _React$Component);\n\n  var _super = _createSuper(SARSeries);\n\n  function SARSeries() {\n    var _this;\n\n    _classCallCheck(this, SARSeries);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var _this$props = _this.props,\n          yAccessor = _this$props.yAccessor,\n          _this$props$fillStyle = _this$props.fillStyle,\n          fillStyle = _this$props$fillStyle === void 0 ? SARSeries.defaultProps.fillStyle : _this$props$fillStyle,\n          strokeStyle = _this$props.strokeStyle;\n      var xAccessor = moreProps.xAccessor,\n          plotData = moreProps.plotData,\n          xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          hovering = moreProps.hovering;\n      var width = xScale(xAccessor(last(plotData))) - xScale(xAccessor(first(plotData)));\n      var d = width / plotData.length * 0.5 / 2;\n      var radius = Math.min(2, Math.max(0.5, d)) + (hovering ? 2 : 0);\n      plotData.forEach(function (each) {\n        var yValue = yAccessor(each);\n\n        if (yValue === undefined) {\n          return;\n        }\n\n        var centerX = xScale(xAccessor(each));\n        var centerY = yScale(yValue);\n        var color = yValue > each.close ? fillStyle.falling : fillStyle.rising;\n        ctx.fillStyle = color;\n\n        if (strokeStyle !== undefined) {\n          ctx.strokeStyle = yValue > each.close ? strokeStyle.falling : strokeStyle.rising;\n        }\n\n        ctx.beginPath();\n        ctx.ellipse(centerX, centerY, radius, radius, 0, 0, 2 * Math.PI);\n        ctx.closePath();\n        ctx.fill();\n\n        if (strokeStyle !== undefined) {\n          ctx.stroke();\n        }\n      });\n    };\n\n    _this.isHover = function (moreProps) {\n      var mouseXY = moreProps.mouseXY,\n          currentItem = moreProps.currentItem,\n          yScale = moreProps.chartConfig.yScale;\n      var yAccessor = _this.props.yAccessor;\n      var y = mouseXY[1];\n      var currentY = yScale(yAccessor(currentItem));\n      return y < currentY + 5 && y > currentY - 5;\n    };\n\n    return _this;\n  }\n\n  _createClass(SARSeries, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          highlightOnHover = _this$props2.highlightOnHover,\n          onClick = _this$props2.onClick,\n          onDoubleClick = _this$props2.onDoubleClick,\n          onContextMenu = _this$props2.onContextMenu;\n      var hoverProps = highlightOnHover ? {\n        isHover: this.isHover,\n        drawOn: [\"mousemove\", \"pan\"],\n        canvasToDraw: getMouseCanvas\n      } : {\n        drawOn: [\"pan\"],\n        canvasToDraw: getAxisCanvas\n      };\n      return React.createElement(GenericChartComponent, Object.assign({\n        canvasDraw: this.drawOnCanvas,\n        onClickWhenHover: onClick,\n        onDoubleClickWhenHover: onDoubleClick,\n        onContextMenuWhenHover: onContextMenu\n      }, hoverProps));\n    }\n  }]);\n\n  return SARSeries;\n}(React.Component);\nSARSeries.defaultProps = {\n  fillStyle: {\n    falling: \"#4682B4\",\n    rising: \"#15EC2E\"\n  },\n  highlightOnHover: false\n};","map":null,"metadata":{},"sourceType":"module"}