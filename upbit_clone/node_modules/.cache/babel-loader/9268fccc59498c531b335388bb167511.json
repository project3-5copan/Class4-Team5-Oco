{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from \"react\";\nimport { getXValue } from \"@react-financial-charts/core/lib/utils/ChartDataUtil\";\nimport { isHover, saveNodeType } from \"../utils\";\nimport { HoverTextNearMouse, InteractiveText } from \"../components\";\nexport var EachText = /*#__PURE__*/function (_React$Component) {\n  _inherits(EachText, _React$Component);\n\n  var _super = _createSuper(EachText);\n\n  function EachText(props) {\n    var _this;\n\n    _classCallCheck(this, EachText);\n\n    _this = _super.call(this, props);\n\n    _this.handleHover = function (_, moreProps) {\n      if (_this.state.hover !== moreProps.hovering) {\n        _this.setState({\n          hover: moreProps.hovering\n        });\n      }\n    };\n\n    _this.handleDrag = function (e, moreProps) {\n      var _this$props = _this.props,\n          index = _this$props.index,\n          onDrag = _this$props.onDrag;\n\n      if (onDrag === undefined) {\n        return;\n      }\n\n      var _moreProps$mouseXY = _slicedToArray(moreProps.mouseXY, 2),\n          mouseY = _moreProps$mouseXY[1],\n          yScale = moreProps.chartConfig.yScale,\n          xAccessor = moreProps.xAccessor,\n          mouseXY = moreProps.mouseXY,\n          plotData = moreProps.plotData,\n          xScale = moreProps.xScale;\n\n      var _this$dragStartPositi = _this.dragStartPosition,\n          dx = _this$dragStartPositi.dx,\n          dy = _this$dragStartPositi.dy;\n      var xValue = xScale.invert(xScale(getXValue(xScale, xAccessor, mouseXY, plotData)) - dx); // xScale.invert(xScale(xAccessor(currentItem)) - dx);\n\n      var xyValue = [xValue, yScale.invert(mouseY - dy)];\n      onDrag(e, index, xyValue);\n    };\n\n    _this.handleDragStart = function (_, moreProps) {\n      var position = _this.props.position;\n      var mouseXY = moreProps.mouseXY;\n      var yScale = moreProps.chartConfig.yScale,\n          xScale = moreProps.xScale;\n\n      var _mouseXY = _slicedToArray(mouseXY, 2),\n          mouseX = _mouseXY[0],\n          mouseY = _mouseXY[1];\n\n      var _position = _slicedToArray(position, 2),\n          textCX = _position[0],\n          textCY = _position[1];\n\n      var dx = mouseX - xScale(textCX);\n      var dy = mouseY - yScale(textCY);\n      _this.dragStartPosition = {\n        position: position,\n        dx: dx,\n        dy: dy\n      };\n    };\n\n    _this.handleHover = _this.handleHover.bind(_assertThisInitialized(_this));\n    _this.handleDragStart = _this.handleDragStart.bind(_assertThisInitialized(_this));\n    _this.handleDrag = _this.handleDrag.bind(_assertThisInitialized(_this));\n    _this.isHover = isHover.bind(_assertThisInitialized(_this));\n    _this.saveNodeType = saveNodeType.bind(_assertThisInitialized(_this));\n    _this.state = {\n      hover: false\n    };\n    return _this;\n  }\n\n  _createClass(EachText, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          position = _this$props2.position,\n          bgFill = _this$props2.bgFill,\n          bgStroke = _this$props2.bgStroke,\n          bgStrokeWidth = _this$props2.bgStrokeWidth,\n          textFill = _this$props2.textFill,\n          fontFamily = _this$props2.fontFamily,\n          fontSize = _this$props2.fontSize,\n          fontWeight = _this$props2.fontWeight,\n          fontStyle = _this$props2.fontStyle,\n          text = _this$props2.text,\n          hoverText = _this$props2.hoverText,\n          selected = _this$props2.selected,\n          onDragComplete = _this$props2.onDragComplete;\n      var hover = this.state.hover;\n      var hoverHandler = {\n        onHover: this.handleHover,\n        onUnHover: this.handleHover\n      };\n\n      var hoverTextEnabled = hoverText.enable,\n          hoverTextSelected = hoverText.selectedText,\n          hoverTextUnselected = hoverText.text,\n          restHoverTextProps = __rest(hoverText, [\"enable\", \"selectedText\", \"text\"]);\n\n      return React.createElement(\"g\", null, React.createElement(InteractiveText, Object.assign({\n        ref: this.saveNodeType(\"text\"),\n        selected: selected || hover,\n        interactiveCursorClass: \"react-financial-charts-move-cursor\"\n      }, hoverHandler, {\n        onDragStart: this.handleDragStart,\n        onDrag: this.handleDrag,\n        onDragComplete: onDragComplete,\n        position: position,\n        bgFillStyle: bgFill,\n        bgStroke: bgStroke || textFill,\n        bgStrokeWidth: bgStrokeWidth,\n        textFill: textFill,\n        fontFamily: fontFamily,\n        fontStyle: fontStyle,\n        fontWeight: fontWeight,\n        fontSize: fontSize,\n        text: text\n      })), React.createElement(HoverTextNearMouse, Object.assign({\n        show: hoverTextEnabled && hover\n      }, restHoverTextProps, {\n        text: selected ? hoverTextSelected : hoverTextUnselected\n      })));\n    }\n  }]);\n\n  return EachText;\n}(React.Component);\nEachText.defaultProps = {\n  bgStrokeWidth: 1,\n  selected: false,\n  hoverText: Object.assign(Object.assign({}, HoverTextNearMouse.defaultProps), {\n    enable: true,\n    bgHeight: \"auto\",\n    bgWidth: \"auto\",\n    text: \"Click to select object\"\n  })\n};","map":null,"metadata":{},"sourceType":"module"}