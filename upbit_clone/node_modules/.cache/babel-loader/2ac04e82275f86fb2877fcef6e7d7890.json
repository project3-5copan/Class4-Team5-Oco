{"ast":null,"code":"export { default as zipper } from \"./zipper\";\nexport { default as slidingWindow } from \"./slidingWindow\";\nexport * from \"./closestItem\";\nexport * from \"./identity\";\nexport * from \"./noop\";\nexport * from \"./shallowEqual\";\nexport { default as accumulatingWindow } from \"./accumulatingWindow\";\nexport * from \"./barWidth\";\nexport * from \"./strokeDasharray\";\nexport * from \"./PureComponent\";\nexport var sign = function sign(x) {\n  // @ts-ignore\n  return (x > 0) - (x < 0);\n};\nexport var path = function path() {\n  var loc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var key = Array.isArray(loc) ? loc : [loc];\n  var length = key.length;\n  return function (obj, defaultValue) {\n    if (length === 0) {\n      return isDefined(obj) ? obj : defaultValue;\n    }\n\n    var index = 0;\n\n    while (obj != null && index < length) {\n      obj = obj[key[index++]];\n    }\n\n    return index === length ? obj : defaultValue;\n  };\n};\nexport var functor = function functor(v) {\n  return typeof v === \"function\" ? v : function () {\n    return v;\n  };\n};\nexport function getClosestValue(inputValue, currentValue) {\n  var values = Array.isArray(inputValue) ? inputValue : [inputValue];\n  var diff = values.map(function (each) {\n    return each - currentValue;\n  }).reduce(function (diff1, diff2) {\n    return Math.abs(diff1) < Math.abs(diff2) ? diff1 : diff2;\n  });\n  return currentValue + diff;\n}\nexport function d3Window(node) {\n  var d3win = node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n  return d3win;\n}\nexport var MOUSEENTER = \"mouseenter.interaction\";\nexport var MOUSELEAVE = \"mouseleave.interaction\";\nexport var MOUSEMOVE = \"mousemove.pan\";\nexport var MOUSEUP = \"mouseup.pan\";\nexport var TOUCHMOVE = \"touchmove.pan\";\nexport var TOUCHEND = \"touchend.pan touchcancel.pan\";\nexport function getTouchProps(touch) {\n  return {\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    clientX: touch.clientX,\n    clientY: touch.clientY\n  };\n}\nexport function head(array, accessor) {\n  if (accessor && array) {\n    var value; // tslint:disable-next-line: prefer-for-of\n\n    for (var i = 0; i < array.length; i++) {\n      value = array[i];\n\n      if (isDefined(accessor(value))) {\n        return value;\n      }\n    }\n\n    return undefined;\n  }\n\n  return array ? array[0] : undefined;\n}\nexport var first = head;\nexport function last(array, accessor) {\n  if (accessor && array) {\n    var value;\n\n    for (var i = array.length - 1; i >= 0; i--) {\n      value = array[i];\n\n      if (isDefined(accessor(value))) {\n        return value;\n      }\n    }\n\n    return undefined;\n  }\n\n  var length = array ? array.length : 0;\n  return length ? array[length - 1] : undefined;\n}\nexport var isDefined = function isDefined(d) {\n  return d !== null && d !== undefined;\n};\nexport function isNotDefined(d) {\n  return !isDefined(d);\n}\nexport function isObject(d) {\n  return isDefined(d) && typeof d === \"object\" && !Array.isArray(d);\n}\nexport function touchPosition(touch, e) {\n  var container = e.currentTarget;\n  var rect = container.getBoundingClientRect();\n  var x = touch.clientX - rect.left - container.clientLeft;\n  var y = touch.clientY - rect.top - container.clientTop;\n  return [Math.round(x), Math.round(y)];\n}\nexport function mousePosition(e, defaultRect) {\n  var container = e.currentTarget;\n  var rect = defaultRect !== null && defaultRect !== void 0 ? defaultRect : container.getBoundingClientRect();\n  var x = e.clientX - rect.left - container.clientLeft;\n  var y = e.clientY - rect.top - container.clientTop;\n  return [Math.round(x), Math.round(y)];\n}\nexport function clearCanvas(canvasList, ratio) {\n  canvasList.forEach(function (each) {\n    each.setTransform(1, 0, 0, 1, 0, 0);\n    each.clearRect(-1, -1, each.canvas.width + 2, each.canvas.height + 2);\n    each.scale(ratio, ratio);\n  });\n} // copied from https://github.com/lodash/lodash/blob/master/mapObject.js\n\nexport function mapObject() {\n  var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var iteratee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (x) {\n    return x;\n  };\n  var props = Object.keys(object);\n  var result = new Array(props.length);\n  props.forEach(function (key, index) {\n    // @ts-ignore\n    result[index] = iteratee(object[key], key, object);\n  });\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}