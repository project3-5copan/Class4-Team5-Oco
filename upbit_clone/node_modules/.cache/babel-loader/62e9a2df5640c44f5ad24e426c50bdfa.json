{"ast":null,"code":"import { functor, merge } from \"../utils\";\nimport atr from \"./atr\";\nimport { Renko as defaultOptions } from \"./defaultOptionsForComputation\";\nexport default function () {\n  var options = defaultOptions;\n\n  var dateAccessor = function dateAccessor(d) {\n    return d.date;\n  };\n\n  var dateMutator = function dateMutator(d, date) {\n    d.date = date;\n  };\n\n  var calculator = function calculator(rawData) {\n    var _options = options,\n        reversalType = _options.reversalType,\n        fixedBrickSize = _options.fixedBrickSize,\n        sourcePath = _options.sourcePath,\n        windowSize = _options.windowSize;\n    var source = sourcePath === \"high/low\" ? function (d) {\n      return {\n        high: d.high,\n        low: d.low\n      };\n    } : function (d) {\n      return {\n        high: d.close,\n        low: d.close\n      };\n    };\n    var pricingMethod = source;\n    var brickSize;\n\n    if (reversalType === \"ATR\") {\n      var atrAlgorithm = atr().options({\n        windowSize: windowSize\n      });\n      var atrCalculator = merge().algorithm(atrAlgorithm).merge(function (d, c) {\n        d[\"atr\" + windowSize] = c;\n      });\n      atrCalculator(rawData);\n\n      brickSize = function brickSize(d) {\n        return d[\"atr\" + windowSize];\n      };\n    } else {\n      brickSize = functor(fixedBrickSize);\n    }\n\n    var renkoData = [];\n    var index = 0;\n    var prevBrickClose = rawData[index].open;\n    var prevBrickOpen = rawData[index].open;\n    var brick = {};\n    var direction = 0;\n    rawData.forEach(function (d, idx) {\n      if (brick.from === undefined) {\n        brick.high = d.high;\n        brick.low = d.low;\n        brick.startOfYear = d.startOfYear;\n        brick.startOfQuarter = d.startOfQuarter;\n        brick.startOfMonth = d.startOfMonth;\n        brick.startOfWeek = d.startOfWeek;\n        brick.from = idx;\n        brick.fromDate = dateAccessor(d);\n        dateMutator(brick, dateAccessor(d));\n      }\n\n      brick.volume = (brick.volume || 0) + d.volume;\n      var prevCloseToHigh = prevBrickClose - pricingMethod(d).high;\n      var prevCloseToLow = prevBrickClose - pricingMethod(d).low;\n      var prevOpenToHigh = prevBrickOpen - pricingMethod(d).high;\n      var prevOpenToLow = prevBrickOpen - pricingMethod(d).low;\n      var priceMovement = Math.min(Math.abs(prevCloseToHigh), Math.abs(prevCloseToLow), Math.abs(prevOpenToHigh), Math.abs(prevOpenToLow)); // @ts-ignore\n\n      brick.high = Math.max(brick.high, d.high); // @ts-ignore\n\n      brick.low = Math.min(brick.low, d.low);\n\n      if (!brick.startOfYear) {\n        brick.startOfYear = d.startOfYear;\n\n        if (brick.startOfYear) {\n          dateMutator(brick, dateAccessor(d));\n        }\n      }\n\n      if (!brick.startOfQuarter) {\n        brick.startOfQuarter = d.startOfQuarter;\n\n        if (brick.startOfQuarter && !brick.startOfYear) {\n          dateMutator(brick, dateAccessor(d));\n        }\n      }\n\n      if (!brick.startOfMonth) {\n        brick.startOfMonth = d.startOfMonth;\n\n        if (brick.startOfMonth && !brick.startOfQuarter) {\n          dateMutator(brick, dateAccessor(d));\n        }\n      }\n\n      if (!brick.startOfWeek) {\n        brick.startOfWeek = d.startOfWeek;\n\n        if (brick.startOfWeek && !brick.startOfMonth) {\n          dateMutator(brick, dateAccessor(d));\n        }\n      }\n\n      if (brickSize(d)) {\n        var noOfBricks = Math.floor(priceMovement / brickSize(d));\n        brick.open = Math.abs(prevCloseToHigh) < Math.abs(prevOpenToHigh) || Math.abs(prevCloseToLow) < Math.abs(prevOpenToLow) ? prevBrickClose : prevBrickOpen;\n\n        if (noOfBricks >= 1) {\n          var j = 0;\n\n          for (j = 0; j < noOfBricks; j++) {\n            brick.close = // @ts-ignore\n            brick.open < pricingMethod(d).high ? // if brick open is less than current price it means it is green/hollow brick\n            brick.open + brickSize(d) : // @ts-ignore\n            brick.open - brickSize(d); // @ts-ignore\n\n            direction = brick.close > brick.open ? 1 : -1;\n            brick.direction = direction;\n            brick.to = idx;\n            brick.toDate = dateAccessor(d); // brick.diff = brick.open - brick.close;\n            // brick.atr = d.atr;\n\n            brick.fullyFormed = true;\n            renkoData.push(brick);\n            prevBrickClose = brick.close;\n            prevBrickOpen = brick.open;\n            var newBrick = {\n              high: brick.high,\n              low: brick.low,\n              open: brick.close,\n              startOfYear: false,\n              startOfMonth: false,\n              startOfQuarter: false,\n              startOfWeek: false\n            };\n            brick = newBrick;\n            brick.from = idx;\n            brick.fromDate = dateAccessor(d); // indexMutator(brick, index + j);\n\n            dateMutator(brick, dateAccessor(d));\n            brick.volume = (brick.volume || 0) + d.volume;\n          }\n\n          index = index + j - 1;\n          brick = {};\n        } else {\n          if (idx === rawData.length - 1) {\n            brick.close = direction > 0 ? pricingMethod(d).high : pricingMethod(d).low;\n            brick.to = idx;\n            brick.toDate = dateAccessor(d);\n            dateMutator(brick, dateAccessor(d));\n            brick.fullyFormed = false;\n            renkoData.push(brick);\n          }\n        }\n      }\n    });\n    return renkoData;\n  };\n\n  calculator.options = function (newOptions) {\n    if (newOptions === undefined) {\n      return options;\n    }\n\n    options = Object.assign(Object.assign({}, defaultOptions), newOptions);\n    return calculator;\n  };\n\n  calculator.dateMutator = function (newDateMutator) {\n    if (newDateMutator === undefined) {\n      return dateMutator;\n    }\n\n    dateMutator = newDateMutator;\n    return calculator;\n  };\n\n  calculator.dateAccessor = function (newDateAccessor) {\n    if (newDateAccessor === undefined) {\n      return dateAccessor;\n    }\n\n    dateAccessor = newDateAccessor;\n    return calculator;\n  };\n\n  return calculator;\n}","map":null,"metadata":{},"sourceType":"module"}