{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { scaleLinear } from \"d3-scale\";\nimport * as PropTypes from \"prop-types\";\nimport * as React from \"react\";\nimport { PureComponent } from \"./utils\";\nexport var Chart = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Chart, _PureComponent);\n\n  var _super = _createSuper(Chart);\n\n  function Chart() {\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    _this = _super.apply(this, arguments);\n\n    _this.listener = function (type, moreProps, _, e) {\n      var _this$props = _this.props,\n          id = _this$props.id,\n          onContextMenu = _this$props.onContextMenu,\n          onDoubleClick = _this$props.onDoubleClick;\n\n      switch (type) {\n        case \"contextmenu\":\n          {\n            if (onContextMenu === undefined) {\n              return;\n            }\n\n            var currentCharts = moreProps.currentCharts;\n\n            if (currentCharts.indexOf(id) > -1) {\n              onContextMenu(e, moreProps);\n            }\n\n            break;\n          }\n\n        case \"dblclick\":\n          {\n            if (onDoubleClick === undefined) {\n              return;\n            }\n\n            var _currentCharts = moreProps.currentCharts;\n\n            if (_currentCharts.indexOf(id) > -1) {\n              onDoubleClick(e, moreProps);\n            }\n\n            break;\n          }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var id = this.props.id;\n      var subscribe = this.context.subscribe;\n      subscribe(\"chart_\".concat(id), {\n        listener: this.listener\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var id = this.props.id;\n      var unsubscribe = this.context.unsubscribe;\n      unsubscribe(\"chart_\".concat(id));\n    }\n  }, {\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      var chartId = this.props.id;\n      var chartConfig = this.context.chartConfig.find(function (_ref) {\n        var id = _ref.id;\n        return id === chartId;\n      });\n      return {\n        chartId: chartId,\n        chartConfig: chartConfig\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$context$chartCo = this.context.chartConfig.find(function (_ref2) {\n        var id = _ref2.id;\n        return id === _this2.props.id;\n      }),\n          origin = _this$context$chartCo.origin;\n\n      var _origin = _slicedToArray(origin, 2),\n          x = _origin[0],\n          y = _origin[1];\n\n      return React.createElement(\"g\", {\n        transform: \"translate(\".concat(x, \", \").concat(y, \")\")\n      }, this.props.children);\n    }\n  }]);\n\n  return Chart;\n}(PureComponent);\nChart.defaultProps = {\n  flipYScale: false,\n  id: 0,\n  origin: [0, 0],\n  padding: 0,\n  yPan: true,\n  yPanEnabled: false,\n  yScale: scaleLinear()\n};\nChart.contextTypes = {\n  chartConfig: PropTypes.array,\n  subscribe: PropTypes.func.isRequired,\n  unsubscribe: PropTypes.func.isRequired\n};\nChart.childContextTypes = {\n  chartConfig: PropTypes.object.isRequired,\n  chartId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired\n};","map":null,"metadata":{},"sourceType":"module"}