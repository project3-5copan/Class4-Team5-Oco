{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as PropTypes from \"prop-types\";\nimport * as React from \"react\";\nimport { Axis } from \"./Axis\";\nexport var YAxis = /*#__PURE__*/function (_React$Component) {\n  _inherits(YAxis, _React$Component);\n\n  var _super = _createSuper(YAxis);\n\n  function YAxis() {\n    var _this;\n\n    _classCallCheck(this, YAxis);\n\n    _this = _super.apply(this, arguments);\n\n    _this.axisZoomCallback = function (newYDomain) {\n      var _this$context = _this.context,\n          chartId = _this$context.chartId,\n          yAxisZoom = _this$context.yAxisZoom;\n      yAxisZoom(chartId, newYDomain);\n    };\n\n    _this.helper = function () {\n      var _this$props = _this.props,\n          axisAt = _this$props.axisAt,\n          ticks = _this$props.ticks,\n          _this$props$yZoomWidt = _this$props.yZoomWidth,\n          yZoomWidth = _this$props$yZoomWidt === void 0 ? YAxis.defaultProps.yZoomWidth : _this$props$yZoomWidt,\n          orient = _this$props.orient;\n      var _this$context$chartCo = _this.context.chartConfig,\n          width = _this$context$chartCo.width,\n          height = _this$context$chartCo.height;\n      var axisLocation;\n      var y = 0;\n      var w = yZoomWidth;\n      var h = height;\n\n      switch (axisAt) {\n        case \"left\":\n          axisLocation = 0;\n          break;\n\n        case \"right\":\n          axisLocation = width;\n          break;\n\n        case \"middle\":\n          axisLocation = width / 2;\n          break;\n\n        default:\n          axisLocation = axisAt;\n      }\n\n      var x = orient === \"left\" ? -yZoomWidth : 0;\n      return {\n        transform: [axisLocation, 0],\n        range: [0, height],\n        getScale: _this.getYScale,\n        bg: {\n          x: x,\n          y: y,\n          h: h,\n          w: w\n        },\n        ticks: ticks !== null && ticks !== void 0 ? ticks : _this.getYTicks(height),\n        zoomEnabled: _this.context.chartConfig.yPan\n      };\n    };\n\n    _this.getYTicks = function (height) {\n      if (height < 300) {\n        return 2;\n      }\n\n      if (height < 500) {\n        return 6;\n      }\n\n      return 8;\n    };\n\n    _this.getYScale = function (moreProps) {\n      var _moreProps$chartConfi = moreProps.chartConfig,\n          scale = _moreProps$chartConfi.yScale,\n          flipYScale = _moreProps$chartConfi.flipYScale,\n          height = _moreProps$chartConfi.height;\n\n      if (scale.invert) {\n        var trueRange = flipYScale ? [0, height] : [height, 0];\n        var trueDomain = trueRange.map(scale.invert);\n        return scale.copy().domain(trueDomain).range(trueRange);\n      }\n\n      return scale;\n    };\n\n    return _this;\n  }\n\n  _createClass(YAxis, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          _a$getMouseDelta = _a.getMouseDelta,\n          getMouseDelta = _a$getMouseDelta === void 0 ? YAxis.defaultProps.getMouseDelta : _a$getMouseDelta,\n          _a$outerTickSize = _a.outerTickSize,\n          outerTickSize = _a$outerTickSize === void 0 ? YAxis.defaultProps.outerTickSize : _a$outerTickSize,\n          _a$strokeStyle = _a.strokeStyle,\n          strokeStyle = _a$strokeStyle === void 0 ? YAxis.defaultProps.strokeStyle : _a$strokeStyle,\n          _a$strokeWidth = _a.strokeWidth,\n          strokeWidth = _a$strokeWidth === void 0 ? YAxis.defaultProps.strokeWidth : _a$strokeWidth,\n          rest = __rest(_a, [\"getMouseDelta\", \"outerTickSize\", \"strokeStyle\", \"strokeWidth\"]);\n\n      var _b = this.helper(),\n          zoomEnabled = _b.zoomEnabled,\n          moreProps = __rest(_b, [\"zoomEnabled\"]);\n\n      return React.createElement(Axis, Object.assign({}, rest, moreProps, {\n        edgeClip: true,\n        getMouseDelta: getMouseDelta,\n        outerTickSize: outerTickSize,\n        strokeStyle: strokeStyle,\n        strokeWidth: strokeWidth,\n        zoomEnabled: this.props.zoomEnabled && zoomEnabled,\n        axisZoomCallback: this.axisZoomCallback\n      }));\n    }\n  }]);\n\n  return YAxis;\n}(React.Component);\nYAxis.defaultProps = {\n  axisAt: \"right\",\n  className: \"react-financial-charts-y-axis\",\n  domainClassName: \"react-financial-charts-axis-domain\",\n  fontFamily: \"-apple-system, system-ui, Roboto, 'Helvetica Neue', Ubuntu, sans-serif\",\n  fontSize: 12,\n  fontWeight: 400,\n  getMouseDelta: function getMouseDelta(startXY, mouseXY) {\n    return startXY[1] - mouseXY[1];\n  },\n  gridLinesStrokeStyle: \"#E2E4EC\",\n  gridLinesStrokeWidth: 1,\n  innerTickSize: 4,\n  outerTickSize: 0,\n  orient: \"right\",\n  showDomain: true,\n  showGridLines: false,\n  showTicks: true,\n  showTickLabel: true,\n  strokeStyle: \"#000000\",\n  strokeWidth: 1,\n  tickPadding: 4,\n  tickLabelFill: \"#000000\",\n  tickStrokeStyle: \"#000000\",\n  yZoomWidth: 40,\n  zoomEnabled: true,\n  zoomCursorClassName: \"react-financial-charts-ns-resize-cursor\"\n};\nYAxis.contextTypes = {\n  yAxisZoom: PropTypes.func.isRequired,\n  chartId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  chartConfig: PropTypes.object.isRequired\n};","map":null,"metadata":{},"sourceType":"module"}