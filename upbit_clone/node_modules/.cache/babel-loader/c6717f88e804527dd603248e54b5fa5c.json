{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { pairs } from \"d3-array\";\nimport * as React from \"react\";\nimport { generateLine, isHovering2 } from \"./InteractiveStraightLine\";\nimport { isDefined, isNotDefined, getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nexport var GannFan = /*#__PURE__*/function (_React$Component) {\n  _inherits(GannFan, _React$Component);\n\n  var _super = _createSuper(GannFan);\n\n  function GannFan() {\n    var _this;\n\n    _classCallCheck(this, GannFan);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var _this$props = _this.props,\n          strokeStyle = _this$props.strokeStyle,\n          strokeWidth = _this$props.strokeWidth,\n          fillStyle = _this$props.fillStyle,\n          fontFamily = _this$props.fontFamily,\n          fontSize = _this$props.fontSize,\n          fontFill = _this$props.fontFill;\n\n      var lines = _this.helper(_this.props, moreProps);\n\n      ctx.lineWidth = strokeWidth;\n      ctx.strokeStyle = strokeStyle;\n      ctx.font = \"\".concat(fontSize, \"px \").concat(fontFamily);\n      ctx.fillStyle = fontFill;\n      lines.forEach(function (line) {\n        var x1 = line.x1,\n            y1 = line.y1,\n            x2 = line.x2,\n            y2 = line.y2,\n            label = line.label;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.fillText(label.text, label.x, label.y);\n      });\n      var pairsOfLines = pairs(lines);\n      pairsOfLines.forEach(function (_ref, idx) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            line1 = _ref2[0],\n            line2 = _ref2[1];\n\n        ctx.fillStyle = fillStyle[idx];\n        ctx.beginPath();\n        ctx.moveTo(line1.x1, line1.y1);\n        ctx.lineTo(line1.x2, line1.y2);\n        ctx.lineTo(line2.x2, line2.y2);\n        ctx.closePath();\n        ctx.fill();\n      });\n    };\n\n    _this.isHover = function (moreProps) {\n      var _this$props2 = _this.props,\n          tolerance = _this$props2.tolerance,\n          onHover = _this$props2.onHover;\n      var mouseXY = moreProps.mouseXY;\n\n      var _mouseXY = _slicedToArray(mouseXY, 2),\n          mouseX = _mouseXY[0],\n          mouseY = _mouseXY[1];\n\n      var hovering = false;\n\n      if (isDefined(onHover)) {\n        var lines = _this.helper(_this.props, moreProps); // tslint:disable-next-line: prefer-for-of\n\n\n        for (var i = 0; i < lines.length; i++) {\n          var line1 = lines[i];\n          var left = Math.min(line1.x1, line1.x2);\n          var right = Math.max(line1.x1, line1.x2);\n          var top = Math.min(line1.y1, line1.y2);\n          var bottom = Math.max(line1.y1, line1.y2);\n          var isWithinLineBounds = mouseX >= left && mouseX <= right && mouseY >= top && mouseY <= bottom;\n          hovering = isWithinLineBounds && isHovering2([line1.x1, line1.y1], [line1.x2, line1.y2], mouseXY, tolerance);\n\n          if (hovering) {\n            break;\n          }\n        }\n      }\n\n      return hovering;\n    };\n\n    _this.getLineCoordinates = function (start, endX, endY, text) {\n      var end = [endX, endY];\n      return {\n        start: start,\n        end: end,\n        text: text\n      };\n    };\n\n    _this.helper = function (props, moreProps) {\n      var startXY = props.startXY,\n          endXY = props.endXY;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale;\n\n      if (isNotDefined(startXY) || isNotDefined(endXY)) {\n        return [];\n      }\n\n      var _startXY = _slicedToArray(startXY, 2),\n          x1 = _startXY[0],\n          y1 = _startXY[1];\n\n      var _endXY = _slicedToArray(endXY, 2),\n          x2 = _endXY[0],\n          y2 = _endXY[1];\n\n      var dx = x2 - x1;\n      var dy = y2 - y1;\n\n      if (dx !== 0 && dy !== 0) {\n        var halfY = _this.getLineCoordinates(startXY, x2, y1 + dy / 2, \"2/1\");\n\n        var oneThirdY = _this.getLineCoordinates(startXY, x2, y1 + dy / 3, \"3/1\");\n\n        var oneFourthY = _this.getLineCoordinates(startXY, x2, y1 + dy / 4, \"4/1\");\n\n        var oneEighthY = _this.getLineCoordinates(startXY, x2, y1 + dy / 8, \"8/1\");\n\n        var halfX = _this.getLineCoordinates(startXY, x1 + dx / 2, y2, \"1/2\");\n\n        var oneThirdX = _this.getLineCoordinates(startXY, x1 + dx / 3, y2, \"1/3\");\n\n        var oneFourthX = _this.getLineCoordinates(startXY, x1 + dx / 4, y2, \"1/4\");\n\n        var oneEighthX = _this.getLineCoordinates(startXY, x1 + dx / 8, y2, \"1/8\");\n\n        var lines = [oneEighthX, oneFourthX, oneThirdX, halfX, {\n          start: startXY,\n          end: endXY,\n          text: \"1/1\"\n        }, halfY, oneThirdY, oneFourthY, oneEighthY];\n        var lineCoods = lines.map(function (line) {\n          // tslint:disable-next-line: no-shadowed-variable\n          var _generateLine = generateLine({\n            type: \"RAY\",\n            start: line.start,\n            end: line.end,\n            xScale: xScale,\n            yScale: yScale\n          }),\n              x1 = _generateLine.x1,\n              y1 = _generateLine.y1,\n              x2 = _generateLine.x2,\n              y2 = _generateLine.y2;\n\n          return {\n            x1: xScale(x1),\n            y1: yScale(y1),\n            x2: xScale(x2),\n            y2: yScale(y2),\n            label: {\n              x: xScale(line.end[0]),\n              y: yScale(line.end[1]),\n              text: line.text\n            }\n          };\n        });\n        return lineCoods;\n      }\n\n      return [];\n    };\n\n    return _this;\n  }\n\n  _createClass(GannFan, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          selected = _this$props3.selected,\n          interactiveCursorClass = _this$props3.interactiveCursorClass;\n      var _this$props4 = this.props,\n          onDragStart = _this$props4.onDragStart,\n          onDrag = _this$props4.onDrag,\n          onDragComplete = _this$props4.onDragComplete,\n          onHover = _this$props4.onHover,\n          onUnHover = _this$props4.onUnHover;\n      return React.createElement(GenericChartComponent, {\n        isHover: this.isHover,\n        canvasToDraw: getMouseCanvas,\n        canvasDraw: this.drawOnCanvas,\n        interactiveCursorClass: interactiveCursorClass,\n        selected: selected,\n        onDragStart: onDragStart,\n        onDrag: onDrag,\n        onDragComplete: onDragComplete,\n        onHover: onHover,\n        onUnHover: onUnHover,\n        drawOn: [\"mousemove\", \"mouseleave\", \"pan\", \"drag\"]\n      });\n    }\n  }]);\n\n  return GannFan;\n}(React.Component);\nGannFan.defaultProps = {\n  strokeWidth: 1,\n  tolerance: 4,\n  selected: false\n};","map":null,"metadata":{},"sourceType":"module"}