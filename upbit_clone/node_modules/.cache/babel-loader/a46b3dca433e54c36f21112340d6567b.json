{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from \"react\";\nimport { getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nimport { isHovering2 } from \"./InteractiveStraightLine\";\nexport var ClickableShape = /*#__PURE__*/function (_React$Component) {\n  _inherits(ClickableShape, _React$Component);\n\n  var _super = _createSuper(ClickableShape);\n\n  function ClickableShape() {\n    var _this;\n\n    _classCallCheck(this, ClickableShape);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var _this$props = _this.props,\n          strokeStyle = _this$props.strokeStyle,\n          strokeWidth = _this$props.strokeWidth,\n          hovering = _this$props.hovering,\n          textBox = _this$props.textBox;\n\n      var _this$helper = _this.helper(_this.props, moreProps, ctx),\n          _this$helper2 = _slicedToArray(_this$helper, 2),\n          x = _this$helper2[0],\n          y = _this$helper2[1];\n\n      _this.closeIcon = {\n        x: x,\n        y: y\n      };\n      ctx.beginPath();\n      ctx.lineWidth = hovering ? strokeWidth + 1 : strokeWidth;\n      ctx.strokeStyle = strokeStyle;\n      var halfWidth = textBox.closeIcon.width / 2;\n      ctx.moveTo(x - halfWidth, y - halfWidth);\n      ctx.lineTo(x + halfWidth, y + halfWidth);\n      ctx.moveTo(x - halfWidth, y + halfWidth);\n      ctx.lineTo(x + halfWidth, y - halfWidth);\n      ctx.stroke();\n    };\n\n    _this.isHover = function (moreProps) {\n      var mouseXY = moreProps.mouseXY;\n\n      if (_this.closeIcon) {\n        var textBox = _this.props.textBox;\n        var _this$closeIcon = _this.closeIcon,\n            x = _this$closeIcon.x,\n            y = _this$closeIcon.y;\n        var halfWidth = textBox.closeIcon.width / 2;\n        var start1 = [x - halfWidth, y - halfWidth];\n        var end1 = [x + halfWidth, y + halfWidth];\n        var start2 = [x - halfWidth, y + halfWidth];\n        var end2 = [x + halfWidth, y - halfWidth];\n\n        if (isHovering2(start1, end1, mouseXY, 3) || isHovering2(start2, end2, mouseXY, 3)) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    _this.helper = function (props, moreProps, ctx) {\n      var yValue = props.yValue,\n          text = props.text,\n          textBox = props.textBox;\n      var fontFamily = props.fontFamily,\n          fontStyle = props.fontStyle,\n          fontWeight = props.fontWeight,\n          fontSize = props.fontSize;\n      ctx.font = \"\".concat(fontStyle, \" \").concat(fontWeight, \" \").concat(fontSize, \"px \").concat(fontFamily);\n      var yScale = moreProps.chartConfig.yScale;\n      var x = textBox.left + textBox.padding.left + ctx.measureText(text).width + textBox.padding.right + textBox.closeIcon.padding.left + textBox.closeIcon.width / 2;\n      var y = yScale(yValue);\n      return [x, y];\n    };\n\n    return _this;\n  }\n\n  _createClass(ClickableShape, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          interactiveCursorClass = _this$props2.interactiveCursorClass,\n          onHover = _this$props2.onHover,\n          onUnHover = _this$props2.onUnHover,\n          onClick = _this$props2.onClick,\n          show = _this$props2.show;\n\n      if (!show) {\n        return null;\n      }\n\n      return React.createElement(GenericChartComponent, {\n        interactiveCursorClass: interactiveCursorClass,\n        isHover: this.isHover,\n        onClickWhenHover: onClick,\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: getMouseCanvas,\n        onHover: onHover,\n        onUnHover: onUnHover,\n        drawOn: [\"pan\", \"mousemove\", \"drag\"]\n      });\n    }\n  }]);\n\n  return ClickableShape;\n}(React.Component);\nClickableShape.defaultProps = {\n  show: false,\n  strokeWidth: 1\n};","map":null,"metadata":{},"sourceType":"module"}