{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from \"react\";\nimport { getStrokeDasharrayCanvas, getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nexport var Brush = /*#__PURE__*/function (_React$Component) {\n  _inherits(Brush, _React$Component);\n\n  var _super = _createSuper(Brush);\n\n  function Brush(props) {\n    var _this;\n\n    _classCallCheck(this, Brush);\n\n    _this = _super.call(this, props);\n\n    _this.drawOnCanvas = function (ctx) {\n      var rect = _this.state.rect;\n\n      if (rect === null) {\n        return;\n      }\n\n      var x = rect.x,\n          y = rect.y,\n          height = rect.height,\n          width = rect.width;\n      var _this$props = _this.props,\n          _this$props$strokeSty = _this$props.strokeStyle,\n          strokeStyle = _this$props$strokeSty === void 0 ? Brush.defaultProps.strokeStyle : _this$props$strokeSty,\n          _this$props$fillStyle = _this$props.fillStyle,\n          fillStyle = _this$props$fillStyle === void 0 ? Brush.defaultProps.fillStyle : _this$props$fillStyle,\n          strokeDashArray = _this$props.strokeDashArray;\n      var dashArray = getStrokeDasharrayCanvas(strokeDashArray);\n      ctx.strokeStyle = strokeStyle;\n      ctx.fillStyle = fillStyle;\n      ctx.setLineDash(dashArray);\n      ctx.beginPath();\n      ctx.fillRect(x, y, width, height);\n      ctx.strokeRect(x, y, width, height);\n    };\n\n    _this.handleZoomStart = function (_, moreProps) {\n      _this.zoomHappening = false;\n\n      var _moreProps$mouseXY = _slicedToArray(moreProps.mouseXY, 2),\n          mouseY = _moreProps$mouseXY[1],\n          currentItem = moreProps.currentItem,\n          yScale = moreProps.chartConfig.yScale,\n          xAccessor = moreProps.xAccessor,\n          xScale = moreProps.xScale;\n\n      var x1y1 = [xScale(xAccessor(currentItem)), mouseY];\n\n      _this.setState({\n        selected: true,\n        x1y1: x1y1,\n        start: {\n          item: currentItem,\n          xValue: xAccessor(currentItem),\n          yValue: yScale.invert(mouseY)\n        }\n      });\n    };\n\n    _this.handleDrawSquare = function (_, moreProps) {\n      if (_this.state.x1y1 == null) {\n        return;\n      }\n\n      _this.zoomHappening = true;\n\n      var _moreProps$mouseXY2 = _slicedToArray(moreProps.mouseXY, 2),\n          mouseY = _moreProps$mouseXY2[1],\n          currentItem = moreProps.currentItem,\n          yScale = moreProps.chartConfig.yScale,\n          xAccessor = moreProps.xAccessor,\n          xScale = moreProps.xScale;\n\n      var _ref = [xScale(xAccessor(currentItem)), mouseY],\n          x2 = _ref[0],\n          y2 = _ref[1];\n\n      var _this$state$x1y = _slicedToArray(_this.state.x1y1, 2),\n          x1 = _this$state$x1y[0],\n          y1 = _this$state$x1y[1];\n\n      var x = Math.min(x1, x2);\n      var y = Math.min(y1, y2);\n      var height = Math.abs(y2 - y1);\n      var width = Math.abs(x2 - x1);\n\n      _this.setState({\n        selected: true,\n        end: {\n          item: currentItem,\n          xValue: xAccessor(currentItem),\n          yValue: yScale.invert(mouseY)\n        },\n        rect: {\n          x: x,\n          y: y,\n          height: height,\n          width: width\n        }\n      });\n    };\n\n    _this.handleZoomComplete = function (_, moreProps) {\n      if (_this.zoomHappening) {\n        var onBrush = _this.props.onBrush;\n\n        if (onBrush !== undefined) {\n          var _this$state = _this.state,\n              start = _this$state.start,\n              end = _this$state.end;\n          onBrush({\n            start: start,\n            end: end\n          }, moreProps);\n        }\n      }\n\n      _this.setState({\n        selected: false,\n        rect: null\n      });\n    };\n\n    _this.terminate = _this.terminate.bind(_assertThisInitialized(_this));\n    _this.state = {\n      rect: null\n    };\n    return _this;\n  }\n\n  _createClass(Brush, [{\n    key: \"terminate\",\n    value: function terminate() {\n      this.zoomHappening = false;\n      this.setState({\n        x1y1: null,\n        start: null,\n        end: null,\n        rect: null\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var enabled = this.props.enabled;\n\n      if (!enabled) {\n        return null;\n      }\n\n      return React.createElement(GenericChartComponent, {\n        disablePan: enabled,\n        canvasToDraw: getMouseCanvas,\n        canvasDraw: this.drawOnCanvas,\n        onMouseDown: this.handleZoomStart,\n        onMouseMove: this.handleDrawSquare,\n        onClick: this.handleZoomComplete,\n        drawOn: [\"mousemove\", \"pan\", \"drag\"]\n      });\n    }\n  }]);\n\n  return Brush;\n}(React.Component);\nBrush.defaultProps = {\n  type: \"2D\",\n  strokeStyle: \"#000000\",\n  fillStyle: \"#3h3h3h\",\n  strokeDashArray: \"ShortDash\"\n};","map":null,"metadata":{},"sourceType":"module"}