{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from \"react\";\nimport { getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nexport var MouseCoordinateXV2 = /*#__PURE__*/function (_React$Component) {\n  _inherits(MouseCoordinateXV2, _React$Component);\n\n  var _super = _createSuper(MouseCoordinateXV2);\n\n  function MouseCoordinateXV2() {\n    var _this;\n\n    _classCallCheck(this, MouseCoordinateXV2);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var show = moreProps.show,\n          currentItem = moreProps.currentItem;\n      var drawCoordinate = _this.props.drawCoordinate;\n\n      if (show && currentItem != null) {\n        var shape = getXCoordinateInfo(ctx, _this.props, moreProps);\n        drawCoordinate(ctx, shape, _this.props, moreProps);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(MouseCoordinateXV2, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(GenericChartComponent, {\n        clip: false,\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: getMouseCanvas,\n        drawOn: [\"mousemove\", \"pan\", \"drag\"]\n      });\n    }\n  }]);\n\n  return MouseCoordinateXV2;\n}(React.Component);\nMouseCoordinateXV2.defaultProps = {\n  xPosition: defaultXPosition,\n  drawCoordinate: defaultDrawCoordinate,\n  at: \"bottom\",\n  orient: \"bottom\",\n  text: {\n    fontStyle: \"\",\n    fontWeight: \"\",\n    fontFamily: \"-apple-system, system-ui, Roboto, 'Helvetica Neue', Ubuntu, sans-serif\",\n    fontSize: 13,\n    fill: \"rgb(35, 35, 35)\"\n  },\n  bg: {\n    fill: \"rgb(255, 255, 255)\",\n    stroke: \"rgb(35, 35, 35)\",\n    strokeWidth: 1,\n    padding: {\n      left: 7,\n      right: 7,\n      top: 4,\n      bottom: 4\n    }\n  },\n  dx: 7,\n  dy: 7\n};\n\nfunction defaultXPosition(props, moreProps) {\n  var currentItem = moreProps.currentItem,\n      xAccessor = moreProps.xAccessor;\n  return xAccessor(currentItem);\n}\n\nfunction getXCoordinateInfo(ctx, props, moreProps) {\n  var at = props.at,\n      displayFormat = props.displayFormat,\n      text = props.text,\n      xPosition = props.xPosition;\n  var xValue = xPosition(props, moreProps);\n  var xScale = moreProps.xScale,\n      height = moreProps.chartConfig.height;\n  ctx.font = \"\".concat(text.fontStyle, \" \").concat(text.fontWeight, \" \").concat(text.fontSize, \"px \").concat(text.fontFamily);\n  var t = displayFormat(xValue);\n  var textWidth = ctx.measureText(t).width;\n  var y = at === \"bottom\" ? height : 0;\n  var x = Math.round(xScale(xValue));\n  return {\n    x: x,\n    y: y,\n    textWidth: textWidth,\n    text: t\n  };\n}\n\nfunction defaultDrawCoordinate(ctx, shape, props, moreProps) {\n  var x = shape.x,\n      y = shape.y,\n      textWidth = shape.textWidth,\n      text = shape.text;\n  var orient = props.orient,\n      dx = props.dx,\n      dy = props.dy,\n      _props$bg = props.bg,\n      padding = _props$bg.padding,\n      fill = _props$bg.fill,\n      stroke = _props$bg.stroke,\n      strokeWidth = _props$bg.strokeWidth,\n      _props$text = props.text,\n      fontSize = _props$text.fontSize,\n      textFill = _props$text.fill;\n  ctx.textAlign = \"center\";\n  var sign = orient === \"top\" ? -1 : 1;\n  var halfWidth = Math.round(textWidth / 2 + padding.right);\n  var height = Math.round(fontSize + padding.top + padding.bottom);\n  ctx.strokeStyle = typeof stroke === \"function\" ? stroke(moreProps, ctx) : stroke;\n  ctx.fillStyle = typeof fill === \"function\" ? fill(moreProps, ctx) : fill;\n  ctx.lineWidth = typeof strokeWidth === \"function\" ? strokeWidth(moreProps) : strokeWidth;\n  ctx.beginPath();\n  ctx.moveTo(x, y);\n  ctx.lineTo(x + dx, y + sign * dy);\n  ctx.lineTo(x + halfWidth, y + sign * dy);\n  ctx.lineTo(x + halfWidth, y + sign * (dy + height));\n  ctx.lineTo(x - halfWidth, y + sign * (dy + height));\n  ctx.lineTo(x - halfWidth, y + sign * dy);\n  ctx.lineTo(x - dx, y + sign * dy);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.fill();\n  ctx.beginPath();\n  ctx.fillStyle = typeof textFill === \"function\" ? textFill(moreProps, ctx) : textFill;\n  ctx.textBaseline = orient === \"top\" ? \"alphabetic\" : \"hanging\";\n  var pad = orient === \"top\" ? padding.bottom : padding.top;\n  ctx.fillText(text, x, y + sign * (dy + pad + 2));\n}","map":null,"metadata":{},"sourceType":"module"}