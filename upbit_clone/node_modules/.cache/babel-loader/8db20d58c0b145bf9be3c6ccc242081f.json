{"ast":null,"code":"import { sum } from \"d3-array\";\nimport { slidingWindow } from \"../utils\";\nimport { ATR as defaultOptions } from \"./defaultOptionsForComputation\";\nexport default function () {\n  var options = defaultOptions;\n\n  var source = function source(d) {\n    return {\n      open: d.open,\n      high: d.high,\n      low: d.low,\n      close: d.close\n    };\n  };\n\n  var calculator = function calculator(data) {\n    var _options = options,\n        windowSize = _options.windowSize;\n    var trueRangeAlgorithm = slidingWindow().windowSize(2).source(source).undefinedValue(function (d) {\n      return d.high - d.low;\n    }) // the first TR value is simply the High minus the Low\n    .accumulator(function (values) {\n      var prev = values[0];\n      var d = values[1];\n      return Math.max(d.high - d.low, d.high - prev.close, d.low - prev.close);\n    });\n    var prevATR;\n    var atrAlgorithm = slidingWindow().skipInitial(1) // trueRange starts from index 1 so ATR starts from 1\n    .windowSize(windowSize).accumulator(function (values) {\n      var tr = values[values.length - 1];\n      var atr = prevATR !== undefined ? (prevATR * (windowSize - 1) + tr) / windowSize : sum(values) / windowSize;\n      prevATR = atr;\n      return atr;\n    });\n    var newData = atrAlgorithm(trueRangeAlgorithm(data));\n    return newData;\n  };\n\n  calculator.undefinedLength = function () {\n    var _options2 = options,\n        windowSize = _options2.windowSize;\n    return windowSize - 1;\n  };\n\n  calculator.options = function (newOptions) {\n    if (newOptions === undefined) {\n      return options;\n    }\n\n    options = Object.assign(Object.assign({}, defaultOptions), newOptions);\n    return calculator;\n  };\n\n  calculator.source = function (newSource) {\n    if (newSource === undefined) {\n      return source;\n    }\n\n    source = newSource;\n    return calculator;\n  };\n\n  return calculator;\n}","map":null,"metadata":{},"sourceType":"module"}