{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from \"react\";\nimport { drawOnCanvas } from \"@react-financial-charts/coordinates/lib/EdgeCoordinateV3\";\nimport { getYCoordinate } from \"@react-financial-charts/coordinates/lib/MouseCoordinateY\";\nimport { getStrokeDasharrayCanvas, getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nexport var InteractiveYCoordinate = /*#__PURE__*/function (_React$Component) {\n  _inherits(InteractiveYCoordinate, _React$Component);\n\n  var _super = _createSuper(InteractiveYCoordinate);\n\n  function InteractiveYCoordinate() {\n    var _this;\n\n    _classCallCheck(this, InteractiveYCoordinate);\n\n    _this = _super.apply(this, arguments);\n    _this.width = 0;\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var _this$props = _this.props,\n          bgFillStyle = _this$props.bgFillStyle,\n          textFill = _this$props.textFill,\n          fontFamily = _this$props.fontFamily,\n          fontSize = _this$props.fontSize,\n          fontStyle = _this$props.fontStyle,\n          fontWeight = _this$props.fontWeight,\n          strokeStyle = _this$props.strokeStyle,\n          strokeWidth = _this$props.strokeWidth,\n          strokeDasharray = _this$props.strokeDasharray,\n          text = _this$props.text,\n          textBox = _this$props.textBox,\n          edge = _this$props.edge,\n          selected = _this$props.selected,\n          hovering = _this$props.hovering;\n\n      var values = _this.helper(moreProps);\n\n      if (values == null) {\n        return;\n      }\n\n      var x1 = values.x1,\n          x2 = values.x2,\n          y = values.y,\n          rect = values.rect;\n      ctx.strokeStyle = strokeStyle;\n      ctx.beginPath();\n\n      if (selected || hovering) {\n        ctx.lineWidth = strokeWidth + 1;\n      } else {\n        ctx.lineWidth = strokeWidth;\n      }\n\n      ctx.textBaseline = \"middle\";\n      ctx.textAlign = \"start\";\n      ctx.font = \"\".concat(fontStyle, \" \").concat(fontWeight, \" \").concat(fontSize, \"px \").concat(fontFamily);\n      _this.width = textBox.padding.left + ctx.measureText(text).width + textBox.padding.right + textBox.closeIcon.padding.left + textBox.closeIcon.width + textBox.closeIcon.padding.right;\n      ctx.setLineDash(getStrokeDasharrayCanvas(strokeDasharray));\n      ctx.moveTo(x1, y);\n      ctx.lineTo(rect.x, y);\n      ctx.moveTo(rect.x + _this.width, y);\n      ctx.lineTo(x2, y);\n      ctx.stroke();\n      ctx.setLineDash([]);\n      ctx.fillStyle = bgFillStyle;\n      ctx.fillRect(rect.x, rect.y, _this.width, rect.height);\n      ctx.strokeRect(rect.x, rect.y, _this.width, rect.height);\n      ctx.fillStyle = textFill;\n      ctx.beginPath();\n      ctx.fillText(text, rect.x + 10, y);\n      var newEdge = Object.assign(Object.assign({}, edge), {\n        textFill: textFill,\n        fontFamily: fontFamily,\n        fontSize: fontSize\n      }); // @ts-ignore\n\n      var yValue = edge.displayFormat(_this.props.yValue);\n      var yCoord = getYCoordinate(y, yValue, newEdge, moreProps);\n      drawOnCanvas(ctx, yCoord);\n    };\n\n    _this.isHover = function (moreProps) {\n      var onHover = _this.props.onHover;\n\n      if (onHover !== undefined) {\n        var values = _this.helper(moreProps);\n\n        if (values == null) {\n          return false;\n        }\n\n        var x1 = values.x1,\n            x2 = values.x2,\n            y = values.y,\n            rect = values.rect;\n\n        var _moreProps$mouseXY = _slicedToArray(moreProps.mouseXY, 2),\n            mouseX = _moreProps$mouseXY[0],\n            mouseY = _moreProps$mouseXY[1];\n\n        if (mouseX >= rect.x && mouseX <= rect.x + _this.width && mouseY >= rect.y && mouseY <= rect.y + rect.height) {\n          return true;\n        }\n\n        if (x1 <= mouseX && x2 >= mouseX && Math.abs(mouseY - y) < 4) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    _this.helper = function (moreProps) {\n      var _this$props2 = _this.props,\n          yValue = _this$props2.yValue,\n          textBox = _this$props2.textBox;\n      var _moreProps$chartConfi = moreProps.chartConfig,\n          width = _moreProps$chartConfi.width,\n          yScale = _moreProps$chartConfi.yScale,\n          height = _moreProps$chartConfi.height;\n      var y = Math.round(yScale(yValue));\n\n      if (y >= 0 && y <= height) {\n        var rect = {\n          x: textBox.left,\n          y: y - textBox.height / 2,\n          height: textBox.height\n        };\n        return {\n          x1: 0,\n          x2: width,\n          y: y,\n          rect: rect\n        };\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(InteractiveYCoordinate, [{\n    key: \"render\",\n    value: function render() {\n      var interactiveCursorClass = this.props.interactiveCursorClass;\n      var _this$props3 = this.props,\n          onHover = _this$props3.onHover,\n          onUnHover = _this$props3.onUnHover;\n      var _this$props4 = this.props,\n          onDragStart = _this$props4.onDragStart,\n          onDrag = _this$props4.onDrag,\n          onDragComplete = _this$props4.onDragComplete;\n      return React.createElement(GenericChartComponent, {\n        clip: false,\n        isHover: this.isHover,\n        canvasToDraw: getMouseCanvas,\n        canvasDraw: this.drawOnCanvas,\n        interactiveCursorClass: interactiveCursorClass,\n        enableDragOnHover: true,\n        onDragStart: onDragStart,\n        onDrag: onDrag,\n        onDragComplete: onDragComplete,\n        onHover: onHover,\n        onUnHover: onUnHover,\n        drawOn: [\"mousemove\", \"mouseleave\", \"pan\", \"drag\"]\n      });\n    }\n  }]);\n\n  return InteractiveYCoordinate;\n}(React.Component);\nInteractiveYCoordinate.defaultProps = {\n  fontWeight: \"normal\",\n  strokeWidth: 1,\n  tolerance: 4,\n  selected: false,\n  hovering: false\n};","map":null,"metadata":{},"sourceType":"module"}