{"ast":null,"code":"/* an extension to d3.zip so we call a function instead of an array */\nimport { min } from \"d3-array\";\nimport { identity } from \"./identity\";\nexport default function zipper() {\n  var combine = identity;\n\n  function zip() {\n    var _a;\n\n    var n = arguments.length;\n\n    if (n === 0) {\n      return [];\n    }\n\n    var m = (_a = min(arguments, d3_zipLength)) !== null && _a !== void 0 ? _a : 0;\n    var zips = new Array(m);\n\n    for (var i = -1; ++i < m;) {\n      // tslint:disable-next-line: no-shadowed-variable\n      for (var j = -1, _zip = zips[i] = new Array(n); ++j < n;) {\n        _zip[j] = arguments[j][i];\n      } // @ts-ignore\n\n\n      zips[i] = combine.apply(this, zips[i]);\n    }\n\n    return zips;\n  }\n\n  function d3_zipLength(d) {\n    return d.length;\n  }\n\n  zip.combine = function (x) {\n    if (!arguments.length) {\n      return combine;\n    }\n\n    combine = x;\n    return zip;\n  };\n\n  return zip;\n}","map":null,"metadata":{},"sourceType":"module"}