{"ast":null,"code":"import _regeneratorRuntime from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(startInittSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(startChangeMarketAndDataSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(startAddMoreCandleDataSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(changeTimeTypeAndDataSaga),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(changePriceAndTotalPriceSaga),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(changeAmountAndTotalPriceSaga),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(changeTotalPriceAndAmountSaga),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(coinSaga);\n\nimport { createRequestSaga, createConnectSocketThunk, createChangeOptionSaga, requestActions, changeOptionActions, requestInitActions, createConnectSocketSaga } from \"../Lib/asyncUtil\";\nimport { candleDataUtils, orderbookUtils, tradeListUtils } from \"../Lib/utils\";\nimport { coinApi } from \"../Api/api\";\nimport { takeEvery, put, select } from \"redux-saga/effects\";\nimport moment from \"moment-timezone\";\nvar START_INIT = \"coin/START_INIT\";\nvar START_CHANGE_MARKET_AND_DATA = \"coin/START_CHANGE_MARKET_AND_DATA\";\nvar CHANGE_TIME_TYPE_AND_DATA = \"coin/CHANGE_TIME_TYPE_AND_DATA\";\nvar START_ADD_MORE_CANDLE_DATA = \"coin/START_ADD_MORE_CANDLE_DATA\";\nvar GET_MARKET_NAMES = \"coin/GET_MARKET_NAMES\";\nvar GET_MARKET_NAMES_SUCCESS = \"coin/GET_MARKET_NAMES_SUCCESS\";\nvar GET_MARKET_NAMES_ERROR = \"coin/GET_MARKET_NAMES_ERROR\";\nvar GET_INIT_CANDLES = \"coin/GET_INIT_CANDLES\";\nvar GET_INIT_CANDLES_SUCCESS = \"coin/GET_INIT_CANDLES_SUCCESS\";\nvar GET_INIT_CANDLES_ERROR = \"coin/GET_INIT_CANDLES_ERROR\";\nvar GET_ONE_COIN_CANDLES = \"coin/GET_ONE_COIN_CANDLES\";\nvar GET_ONE_COIN_CANDLES_SUCCESS = \"coin/GET_ONE_COIN_CANDLES_SUCCESS\";\nvar GET_ONE_COIN_CANDLES_ERROR = \"coin/GET_ONE_COIN_CANDLES_ERROR\";\nvar GET_ADDITIONAL_COIN_CANDLES = \"coin/GET_ADDITIONAL_COIN_CANDLES\";\nvar GET_ADDITIONAL_COIN_CANDLES_SUCCESS = \"coin/GET_ADDITIONAL_COIN_CANDLES_SUCCESS\";\nvar GET_ADDITIONAL_COIN_CANDLES_ERROR = \"coin/GET_ADDITIONAL_COIN_CANDLES_ERROR\";\nvar CONNECT_CANDLE_SOCKET = \"coin/CONNECT_CANDLE_SOCKET\";\nvar CONNECT_CANDLE_SOCKET_SUCCESS = \"coin/CONNECT_CANDLE_SOCKET_SUCCESS\";\nvar CONNECT_CANDLE_SOCKET_ERROR = \"coin/CONNECT_CANDLE_SOCKET_ERROR\";\nvar GET_ONE_COIN_TRADELISTS = \"coin/GET_ONE_COIN_TRADELISTS\";\nvar GET_ONE_COIN_TRADELISTS_SUCCESS = \"coin/GET_ONE_COIN_TRADELISTS_SUCCESS\";\nvar GET_ONE_COIN_TRADELISTS_ERROR = \"coin/GET_ONE_COIN_TRADELISTS_ERROR\";\nvar CONNECT_TRADELIST_SOCKET = \"coin/CONNECT_TRADELIST_SOCKET\";\nvar CONNECT_TRADELIST_SOCKET_SUCCESS = \"coin/CONNECT_TRADELIST_SOCKET_SUCCESS\";\nvar CONNECT_TRADELIST_SOCKET_ERROR = \"coin/CONNECT_TRADELIST_SOCKET_ERROR\";\nvar GET_INIT_ORDERBOOKS = \"coin/GET_INIT_ORDERBOOKS\";\nvar GET_INIT_ORDERBOOKS_SUCCESS = \"coin/GET_INIT_ORDERBOOKS_SUCCESS\";\nvar GET_INIT_ORDERBOOKS_ERROR = \"coin/GET_INIT_ORDERBOOKS_ERROR\";\nvar CONNECT_ORDERBOOK_SOCKET = \"coin/CONNECT_ORDERBOOK_SOCKET\";\nvar CONNECT_ORDERBOOK_SOCKET_SUCCESS = \"coin/CONNECT_ORDERBOOK_SOCKET_SUCCESS\";\nvar CONNECT_ORDERBOOK_SOCKET_ERROR = \"coin/CONNECT_ORDERBOOK_SOCKET_ERROR\";\nvar CHANGE_COIN_MARKET = \"coin/CHANGE_COIN_MARKET\";\nvar CHANGE_COIN_MARKET_SUCCESS = \"coin/CHANGE_COIN_MARKET_SUCCESS\";\nvar CHANGE_TIME_TYPE = \"coin/CHANGE_TIME_TYPE\";\nvar CHANGE_TIME_TYPE_SUCCESS = \"coin/CHANGE_TIME_TYPE_SUCCESS\";\nvar CHANGE_TIME_COUNT = \"coin/CHANGE_TIME_COUNT\";\nvar CHANGE_TIME_COUNT_SUCCESS = \"coin/CHANGE_TIME_COUNT_SUCCESS\";\nvar CHANGE_ASK_BID_ORDER = \"coin/CHANGE_ASK_BID_ORDER\";\nvar CHANGE_ASK_BID_ORDER_SUCCESS = \"coin/CHANGE_ASK_BID_ORDER_SUCCESS\";\nvar CHANGE_ORDER_PRICE = \"coin/CHANGE_ORDER_PRICE\";\nvar CHANGE_ORDER_PRICE_SUCCESS = \"coin/CHANGE_ORDER_PRICE_SUCCESS\";\nvar CHANGE_ORDER_AMOUNT = \"coin/CHANGE_ORDER_AMOUNT\";\nvar CHANGE_ORDER_AMOUNT_SUCCESS = \"coin/CHANGE_ORDER_AMOUNT_SUCCESS\";\nvar CHANGE_ORDER_TOTAL_PRICE = \"coin/CHANGE_ORDER_TOTAL_PRICE\";\nvar CHANGE_ORDER_TOTAL_PRICE_SUCCESS = \"coin/CHANGE_ORDER_TOTAL_PRICE_SUCCESS\";\nvar CHANGE_PRICE_AND_TOTAL_PRICE = \"coin/CHANGE_PRICE_AND_TOTAL_PRICE\";\nvar CHANGE_AMOUNT_AND_TOTAL_PRICE = \"coin/CHANGE_AMOUNT_AND_TOTAL_PRICE\";\nvar CHANGE_TOTAL_PRICE_AND_AMOUNT = \"coin/CHANGE_TOTAL_PRICE_AND_AMOUNT\";\nvar SEARCH_COIN = \"coin/SEARCH_COIN\";\nvar SEARCH_COIN_SUCCESS = \"coin/SEARCH_COIN_SUCCESS\"; // 업비트에서 제공하는 코인/마켓 이름들 가져오기 Saga\n\nvar getMarketNameSaga = createRequestSaga(GET_MARKET_NAMES, coinApi.getMarketCodes, candleDataUtils.marketNames); // 코인/마켓 캔들들의 일봉 한 개씩 가져오기 Saga\n\nvar getInitCandleSaga = createRequestSaga(GET_INIT_CANDLES, coinApi.getInitCanldes, candleDataUtils.init); // 특정 코인 봉 200개 가져오기 Saga\n\nvar getOneCoinCandlesSaga = createRequestSaga(GET_ONE_COIN_CANDLES, coinApi.getOneCoinCandles, candleDataUtils.oneCoin);\nvar getAdditionalCoinCandlesSaga = createRequestSaga(GET_ADDITIONAL_COIN_CANDLES, coinApi.getAdditionalCoinCandles, candleDataUtils.add); // 캔들 웹소켓 연결 Thunk\n\nvar connectCandleSocketThunk = createConnectSocketThunk(CONNECT_CANDLE_SOCKET, \"ticker\", candleDataUtils.update); // const connectCandleSocketThunk = createConnectSocketThrottleThunk(\n//   CONNECT_CANDLE_SOCKET,\n//   \"ticker\",\n//   candleDataUtils.update\n// );\n\nvar connectCandleSocketSaga = createConnectSocketSaga(CONNECT_CANDLE_SOCKET, \"ticker\", candleDataUtils.updates); // 호가창 조기 값 가져오기\n\nvar getInitOrderbookSaga = createRequestSaga(GET_INIT_ORDERBOOKS, coinApi.getInitOrderbooks, orderbookUtils.init); // 호가창 웹소켓 연결 Thunk\n\nvar connectOrderbookSocketThunk = createConnectSocketThunk(CONNECT_ORDERBOOK_SOCKET, \"orderbook\", orderbookUtils.update); // 체결내역 200개 가져오기\n\nvar getOneCoinTradeListsSaga = createRequestSaga(GET_ONE_COIN_TRADELISTS, coinApi.getOneCoinTradeLists, tradeListUtils.init); // 체결내역 웹소켓 연결 Thunk\n\nvar connectTradeListSocketThunk = createConnectSocketThunk(CONNECT_TRADELIST_SOCKET, \"trade\", tradeListUtils.update); // 선택한 코인마켓 변경하기 Saga\n\nvar changeSelectedMarket = function changeSelectedMarket(marketName) {\n  return {\n    type: CHANGE_COIN_MARKET,\n    payload: marketName\n  };\n};\n\nvar changeSelectedMarketSaga = createChangeOptionSaga(CHANGE_COIN_MARKET); // 선택한 타임 타입(5분봉 할때 '분') 변경하기 Saga\n\nvar changeSelectedTimeTypeSaga = createChangeOptionSaga(CHANGE_TIME_TYPE); // 선택한 타임 카운트(5분봉 할때 '5') 변경하기 Saga\n\nvar changeSelectedTimeCountSaga = createChangeOptionSaga(CHANGE_TIME_COUNT); // 매수 매도 옵션 변경하기\n\nvar changeAskBidOrder = function changeAskBidOrder(askBidOption) {\n  return {\n    type: CHANGE_ASK_BID_ORDER,\n    payload: askBidOption\n  };\n};\n\nvar changeAskBidOrderSaga = createChangeOptionSaga(CHANGE_ASK_BID_ORDER); // 주문 가격 변경하기\n\nvar changeOrderPriceSaga = createChangeOptionSaga(CHANGE_ORDER_PRICE); // 주문 수량 변경하기\n\nvar changeOrderAmountSaga = createChangeOptionSaga(CHANGE_ORDER_AMOUNT); // 주문 총액 변경하기\n\nvar changeOrderTotalPriceSaga = createChangeOptionSaga(CHANGE_ORDER_TOTAL_PRICE); // 코인 검색 내용 변경하기 Saga\n\nvar searchCoin = function searchCoin(searchName) {\n  return {\n    type: SEARCH_COIN,\n    payload: searchName\n  };\n};\n\nvar searchCoinSaga = createChangeOptionSaga(SEARCH_COIN); // 시작시 데이터 초기화 작업들\n\nvar startInit = function startInit() {\n  return {\n    type: START_INIT\n  };\n};\n\nfunction startInittSaga() {\n  var state, marketNames, selectedMarket, selectedTimeType, selectedTimeCount;\n  return _regeneratorRuntime.wrap(function startInittSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return getMarketNameSaga();\n\n        case 2:\n          _context.next = 4;\n          return select();\n\n        case 4:\n          state = _context.sent;\n          marketNames = Object.keys(state.Coin.marketNames.data);\n          selectedMarket = state.Coin.selectedMarket;\n          selectedTimeType = state.Coin.selectedTimeType;\n          selectedTimeCount = state.Coin.selectedTimeCount;\n          _context.next = 11;\n          return getInitCandleSaga({\n            payload: marketNames\n          });\n\n        case 11:\n          _context.next = 13;\n          return getInitOrderbookSaga({\n            payload: selectedMarket\n          });\n\n        case 13:\n          _context.next = 15;\n          return getOneCoinTradeListsSaga({\n            payload: selectedMarket\n          });\n\n        case 15:\n          _context.next = 17;\n          return getOneCoinCandlesSaga({\n            payload: {\n              coin: selectedMarket,\n              timeType: selectedTimeType,\n              timeCount: selectedTimeCount\n            }\n          });\n\n        case 17:\n          _context.next = 19;\n          return put(connectOrderbookSocketThunk({\n            payload: marketNames\n          }));\n\n        case 19:\n          _context.next = 21;\n          return put(connectTradeListSocketThunk({\n            payload: marketNames\n          }));\n\n        case 21:\n          _context.next = 23;\n          return connectCandleSocketSaga({\n            payload: marketNames\n          });\n\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n} // 선택된 코인/마켓 변경 및 해당 마켓 데이터 받기\n\n\nvar startChangeMarketAndData = function startChangeMarketAndData(marketName) {\n  return {\n    type: START_CHANGE_MARKET_AND_DATA,\n    payload: marketName\n  };\n};\n\nfunction startChangeMarketAndDataSaga(action) {\n  var state, selectedTimeType, selectedTimeCount, changingMarketName, selectedCoinCandles;\n  return _regeneratorRuntime.wrap(function startChangeMarketAndDataSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return select();\n\n        case 2:\n          state = _context2.sent;\n          selectedTimeType = state.Coin.selectedTimeType;\n          selectedTimeCount = state.Coin.selectedTimeCount;\n          changingMarketName = action.payload;\n          selectedCoinCandles = state.Coin.candle.data[changingMarketName].candles;\n          _context2.next = 9;\n          return put(changeSelectedMarket(changingMarketName));\n\n        case 9:\n          _context2.next = 11;\n          return getInitOrderbookSaga({\n            payload: changingMarketName\n          });\n\n        case 11:\n          _context2.next = 13;\n          return getOneCoinTradeListsSaga({\n            payload: changingMarketName\n          });\n\n        case 13:\n          if (!(selectedCoinCandles.length < 200)) {\n            _context2.next = 16;\n            break;\n          }\n\n          _context2.next = 16;\n          return getOneCoinCandlesSaga({\n            payload: {\n              coin: changingMarketName,\n              timeType: selectedTimeType,\n              timeCount: selectedTimeCount\n            }\n          });\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // 추가 캔들 데이터 가져오기\n\n\nvar startAddMoreCandleData = function startAddMoreCandleData() {\n  return {\n    type: START_ADD_MORE_CANDLE_DATA\n  };\n};\n\nfunction startAddMoreCandleDataSaga() {\n  var state, selectedMarket, selectedTimeType, selectedTimeCount, isLoading, datetime;\n  return _regeneratorRuntime.wrap(function startAddMoreCandleDataSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return select();\n\n        case 2:\n          state = _context3.sent;\n          selectedMarket = state.Coin.selectedMarket;\n          selectedTimeType = state.Coin.selectedTimeType;\n          selectedTimeCount = state.Coin.selectedTimeCount;\n          isLoading = state.Loading[GET_ADDITIONAL_COIN_CANDLES];\n\n          if (!isLoading) {\n            _context3.next = 9;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 9:\n          datetime = moment(state.Coin.candle.data[selectedMarket].candles[0].date).utc().format(\"YYYY-MM-DDTHH:mm\") + \":00Z\";\n          _context3.next = 12;\n          return getAdditionalCoinCandlesSaga({\n            payload: {\n              coin: selectedMarket,\n              timeType: selectedTimeType,\n              timeCount: selectedTimeCount,\n              datetime: datetime\n            }\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n} // 차트 시간 데이터 변경하고 데이터 받기\n\n\nvar changeTimeTypeAndData = function changeTimeTypeAndData(timeTypeAndCount) {\n  return {\n    type: CHANGE_TIME_TYPE_AND_DATA,\n    payload: timeTypeAndCount\n  };\n};\n\nfunction changeTimeTypeAndDataSaga(action) {\n  var state, selectedMarket, selectedTimeType, selectedTimeCount, newTimeType, newTimeCount;\n  return _regeneratorRuntime.wrap(function changeTimeTypeAndDataSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return select();\n\n        case 2:\n          state = _context4.sent;\n          selectedMarket = state.Coin.selectedMarket;\n          selectedTimeType = state.Coin.selectedTimeType;\n          selectedTimeCount = state.Coin.selectedTimeCount;\n          newTimeType = action.payload.timeType;\n          newTimeCount = action.payload.timeCount;\n\n          if (!(selectedTimeType === newTimeType && selectedTimeCount === newTimeCount)) {\n            _context4.next = 10;\n            break;\n          }\n\n          return _context4.abrupt(\"return\");\n\n        case 10:\n          _context4.next = 12;\n          return changeSelectedTimeTypeSaga({\n            payload: newTimeType\n          });\n\n        case 12:\n          _context4.next = 14;\n          return changeSelectedTimeCountSaga({\n            payload: newTimeCount\n          });\n\n        case 14:\n          _context4.next = 16;\n          return getOneCoinCandlesSaga({\n            payload: {\n              coin: selectedMarket,\n              timeType: newTimeType,\n              timeCount: newTimeCount\n            }\n          });\n\n        case 16:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} // 가격 변경 후 주문 총액 바꾸기\n\n\nvar changePriceAndTotalPrice = function changePriceAndTotalPrice(price) {\n  return {\n    type: CHANGE_PRICE_AND_TOTAL_PRICE,\n    payload: price\n  };\n};\n\nfunction changePriceAndTotalPriceSaga(action) {\n  var state, orderAmount;\n  return _regeneratorRuntime.wrap(function changePriceAndTotalPriceSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return select();\n\n        case 2:\n          state = _context5.sent;\n          orderAmount = state.Coin.orderAmount;\n          _context5.next = 6;\n          return changeOrderPriceSaga({\n            payload: action.payload\n          });\n\n        case 6:\n          _context5.next = 8;\n          return changeOrderTotalPriceSaga({\n            payload: Math.ceil(action.payload * orderAmount)\n          });\n\n        case 8:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n} // 주문수량 변경 후 주문 총액 바꾸기\n\n\nvar changeAmountAndTotalPrice = function changeAmountAndTotalPrice(amount) {\n  return {\n    type: CHANGE_AMOUNT_AND_TOTAL_PRICE,\n    payload: amount\n  };\n};\n\nfunction changeAmountAndTotalPriceSaga(action) {\n  var state, orderPrice;\n  return _regeneratorRuntime.wrap(function changeAmountAndTotalPriceSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return select();\n\n        case 2:\n          state = _context6.sent;\n          orderPrice = state.Coin.orderPrice;\n          _context6.next = 6;\n          return changeOrderAmountSaga({\n            payload: action.payload\n          });\n\n        case 6:\n          _context6.next = 8;\n          return changeOrderTotalPriceSaga({\n            payload: Math.ceil(action.payload * orderPrice)\n          });\n\n        case 8:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} // 주문총액 변경 후 주문수량 바꾸기\n\n\nvar changeTotalPriceAndAmount = function changeTotalPriceAndAmount(totalPrice) {\n  return {\n    type: CHANGE_TOTAL_PRICE_AND_AMOUNT,\n    payload: totalPrice\n  };\n};\n\nfunction changeTotalPriceAndAmountSaga(action) {\n  var state, orderPrice;\n  return _regeneratorRuntime.wrap(function changeTotalPriceAndAmountSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return select();\n\n        case 2:\n          state = _context7.sent;\n          orderPrice = state.Coin.orderPrice;\n          _context7.next = 6;\n          return changeOrderTotalPriceSaga({\n            payload: action.payload\n          });\n\n        case 6:\n          _context7.next = 8;\n          return changeOrderAmountSaga({\n            payload: orderPrice ? (action.payload / orderPrice).toFixed(8) : 0\n          });\n\n        case 8:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction coinSaga() {\n  return _regeneratorRuntime.wrap(function coinSaga$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(GET_MARKET_NAMES, getMarketNameSaga);\n\n        case 2:\n          _context8.next = 4;\n          return takeEvery(GET_INIT_CANDLES, getInitCandleSaga);\n\n        case 4:\n          _context8.next = 6;\n          return takeEvery(GET_INIT_ORDERBOOKS, getInitOrderbookSaga);\n\n        case 6:\n          _context8.next = 8;\n          return takeEvery(GET_ONE_COIN_CANDLES, getOneCoinCandlesSaga);\n\n        case 8:\n          _context8.next = 10;\n          return takeEvery(GET_ONE_COIN_TRADELISTS, getOneCoinTradeListsSaga);\n\n        case 10:\n          _context8.next = 12;\n          return takeEvery(CHANGE_COIN_MARKET, changeSelectedMarketSaga);\n\n        case 12:\n          _context8.next = 14;\n          return takeEvery(CHANGE_ASK_BID_ORDER, changeAskBidOrderSaga);\n\n        case 14:\n          _context8.next = 16;\n          return takeEvery(CHANGE_ORDER_PRICE, changeOrderPriceSaga);\n\n        case 16:\n          _context8.next = 18;\n          return takeEvery(CHANGE_ORDER_AMOUNT, changeOrderAmountSaga);\n\n        case 18:\n          _context8.next = 20;\n          return takeEvery(CHANGE_ORDER_TOTAL_PRICE, changeOrderTotalPriceSaga);\n\n        case 20:\n          _context8.next = 22;\n          return takeEvery(SEARCH_COIN, searchCoinSaga);\n\n        case 22:\n          _context8.next = 24;\n          return takeEvery(START_INIT, startInittSaga);\n\n        case 24:\n          _context8.next = 26;\n          return takeEvery(START_CHANGE_MARKET_AND_DATA, startChangeMarketAndDataSaga);\n\n        case 26:\n          _context8.next = 28;\n          return takeEvery(START_ADD_MORE_CANDLE_DATA, startAddMoreCandleDataSaga);\n\n        case 28:\n          _context8.next = 30;\n          return takeEvery(CHANGE_TIME_TYPE_AND_DATA, changeTimeTypeAndDataSaga);\n\n        case 30:\n          _context8.next = 32;\n          return takeEvery(CHANGE_PRICE_AND_TOTAL_PRICE, changePriceAndTotalPriceSaga);\n\n        case 32:\n          _context8.next = 34;\n          return takeEvery(CHANGE_AMOUNT_AND_TOTAL_PRICE, changeAmountAndTotalPriceSaga);\n\n        case 34:\n          _context8.next = 36;\n          return takeEvery(CHANGE_TOTAL_PRICE_AND_AMOUNT, changeTotalPriceAndAmountSaga);\n\n        case 36:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nvar initialState = {\n  selectedMarket: \"KRW-BTC\",\n  selectedTimeType: \"minutes\",\n  selectedTimeCount: 5,\n  selectedAskBidOrder: \"bid\",\n  orderPrice: 0,\n  orderAmount: 0,\n  orderTotalPrice: 0,\n  searchCoin: \"\",\n  marketNames: {\n    error: false,\n    data: {\n      \"KRW-BTC\": \"비트코인\"\n    }\n  },\n  candle: {\n    error: false,\n    data: {\n      \"KRW-BTC\": {\n        candles: [// { date: new Date(), open: 1, close: 1, high: 1, low: 1, volume: 1 },\n        ],\n        tradePrice24Hour: 0,\n        volume24Hour: 0,\n        changeRate24Hour: 0\n      }\n    }\n  },\n  orderbook: {\n    error: false,\n    data: {\n      \"KRW-BTC\": {\n        total_bid_size: 0,\n        total_ask_size: 0,\n        orderbook_units: []\n      }\n    }\n  },\n  tradeList: {\n    error: false,\n    data: {}\n  }\n};\n\nvar coinReducer = function coinReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // 코인 마켓 이름들\n    case GET_MARKET_NAMES_SUCCESS:\n    case GET_MARKET_NAMES_ERROR:\n      return requestActions(GET_MARKET_NAMES, \"marketNames\")(state, action);\n    // 초기 캔들\n\n    case GET_INIT_CANDLES_SUCCESS:\n    case GET_INIT_CANDLES_ERROR:\n      return requestInitActions(GET_INIT_CANDLES, \"candle\")(state, action);\n    // 코인 한 개 정해서 200개\n\n    case GET_ONE_COIN_CANDLES_SUCCESS:\n    case GET_ONE_COIN_CANDLES_ERROR:\n      return requestActions(GET_ONE_COIN_CANDLES, \"candle\")(state, action);\n    // 추가 코인 데이터 로드\n\n    case GET_ADDITIONAL_COIN_CANDLES_SUCCESS:\n    case GET_ADDITIONAL_COIN_CANDLES_ERROR:\n      return requestActions(GET_ADDITIONAL_COIN_CANDLES, \"candle\")(state, action);\n    // 캔들 실시간 정보\n\n    case CONNECT_CANDLE_SOCKET_SUCCESS:\n    case CONNECT_CANDLE_SOCKET_ERROR:\n      return requestActions(CONNECT_CANDLE_SOCKET, \"candle\")(state, action);\n    // 호가창 초기값\n\n    case GET_INIT_ORDERBOOKS_SUCCESS:\n    case GET_INIT_ORDERBOOKS_ERROR:\n      return requestActions(GET_INIT_ORDERBOOKS, \"orderbook\")(state, action);\n    // 호가창 실시간 정보\n\n    case CONNECT_ORDERBOOK_SOCKET_SUCCESS:\n    case CONNECT_ORDERBOOK_SOCKET_ERROR:\n      return requestActions(CONNECT_ORDERBOOK_SOCKET, \"orderbook\")(state, action);\n    // 체결내역 200개 초기값\n\n    case GET_ONE_COIN_TRADELISTS_SUCCESS:\n    case GET_ONE_COIN_TRADELISTS_ERROR:\n      return requestActions(GET_ONE_COIN_TRADELISTS, \"tradeList\")(state, action);\n    // 체결내역 실시간 정보\n\n    case CONNECT_TRADELIST_SOCKET_SUCCESS:\n    case CONNECT_TRADELIST_SOCKET_ERROR:\n      return requestActions(CONNECT_TRADELIST_SOCKET, \"tradeList\")(state, action);\n\n    case CHANGE_COIN_MARKET_SUCCESS:\n      return changeOptionActions(CHANGE_COIN_MARKET, \"selectedMarket\")(state, action);\n\n    case CHANGE_TIME_TYPE_SUCCESS:\n      return changeOptionActions(CHANGE_TIME_TYPE, \"selectedTimeType\")(state, action);\n\n    case CHANGE_TIME_COUNT_SUCCESS:\n      return changeOptionActions(CHANGE_TIME_COUNT, \"selectedTimeCount\")(state, action);\n\n    case CHANGE_ASK_BID_ORDER_SUCCESS:\n      return changeOptionActions(CHANGE_ASK_BID_ORDER, \"selectedAskBidOrder\")(state, action);\n\n    case CHANGE_ORDER_PRICE_SUCCESS:\n      return changeOptionActions(CHANGE_ORDER_PRICE, \"orderPrice\")(state, action);\n\n    case CHANGE_ORDER_AMOUNT_SUCCESS:\n      return changeOptionActions(CHANGE_ORDER_AMOUNT, \"orderAmount\")(state, action);\n\n    case CHANGE_ORDER_TOTAL_PRICE_SUCCESS:\n      return changeOptionActions(CHANGE_ORDER_TOTAL_PRICE, \"orderTotalPrice\")(state, action);\n\n    case SEARCH_COIN_SUCCESS:\n      return changeOptionActions(SEARCH_COIN, \"searchCoin\")(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport { startInit, startChangeMarketAndData, startAddMoreCandleData, changeTimeTypeAndData, coinReducer, coinSaga, changeAskBidOrder, changePriceAndTotalPrice, changeAmountAndTotalPrice, changeTotalPriceAndAmount, searchCoin };","map":{"version":3,"sources":["/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/src/Reducer/coinReducer.js"],"names":["startInittSaga","startChangeMarketAndDataSaga","startAddMoreCandleDataSaga","changeTimeTypeAndDataSaga","changePriceAndTotalPriceSaga","changeAmountAndTotalPriceSaga","changeTotalPriceAndAmountSaga","coinSaga","createRequestSaga","createConnectSocketThunk","createChangeOptionSaga","requestActions","changeOptionActions","requestInitActions","createConnectSocketSaga","candleDataUtils","orderbookUtils","tradeListUtils","coinApi","takeEvery","put","select","moment","START_INIT","START_CHANGE_MARKET_AND_DATA","CHANGE_TIME_TYPE_AND_DATA","START_ADD_MORE_CANDLE_DATA","GET_MARKET_NAMES","GET_MARKET_NAMES_SUCCESS","GET_MARKET_NAMES_ERROR","GET_INIT_CANDLES","GET_INIT_CANDLES_SUCCESS","GET_INIT_CANDLES_ERROR","GET_ONE_COIN_CANDLES","GET_ONE_COIN_CANDLES_SUCCESS","GET_ONE_COIN_CANDLES_ERROR","GET_ADDITIONAL_COIN_CANDLES","GET_ADDITIONAL_COIN_CANDLES_SUCCESS","GET_ADDITIONAL_COIN_CANDLES_ERROR","CONNECT_CANDLE_SOCKET","CONNECT_CANDLE_SOCKET_SUCCESS","CONNECT_CANDLE_SOCKET_ERROR","GET_ONE_COIN_TRADELISTS","GET_ONE_COIN_TRADELISTS_SUCCESS","GET_ONE_COIN_TRADELISTS_ERROR","CONNECT_TRADELIST_SOCKET","CONNECT_TRADELIST_SOCKET_SUCCESS","CONNECT_TRADELIST_SOCKET_ERROR","GET_INIT_ORDERBOOKS","GET_INIT_ORDERBOOKS_SUCCESS","GET_INIT_ORDERBOOKS_ERROR","CONNECT_ORDERBOOK_SOCKET","CONNECT_ORDERBOOK_SOCKET_SUCCESS","CONNECT_ORDERBOOK_SOCKET_ERROR","CHANGE_COIN_MARKET","CHANGE_COIN_MARKET_SUCCESS","CHANGE_TIME_TYPE","CHANGE_TIME_TYPE_SUCCESS","CHANGE_TIME_COUNT","CHANGE_TIME_COUNT_SUCCESS","CHANGE_ASK_BID_ORDER","CHANGE_ASK_BID_ORDER_SUCCESS","CHANGE_ORDER_PRICE","CHANGE_ORDER_PRICE_SUCCESS","CHANGE_ORDER_AMOUNT","CHANGE_ORDER_AMOUNT_SUCCESS","CHANGE_ORDER_TOTAL_PRICE","CHANGE_ORDER_TOTAL_PRICE_SUCCESS","CHANGE_PRICE_AND_TOTAL_PRICE","CHANGE_AMOUNT_AND_TOTAL_PRICE","CHANGE_TOTAL_PRICE_AND_AMOUNT","SEARCH_COIN","SEARCH_COIN_SUCCESS","getMarketNameSaga","getMarketCodes","marketNames","getInitCandleSaga","getInitCanldes","init","getOneCoinCandlesSaga","getOneCoinCandles","oneCoin","getAdditionalCoinCandlesSaga","getAdditionalCoinCandles","add","connectCandleSocketThunk","update","connectCandleSocketSaga","updates","getInitOrderbookSaga","getInitOrderbooks","connectOrderbookSocketThunk","getOneCoinTradeListsSaga","getOneCoinTradeLists","connectTradeListSocketThunk","changeSelectedMarket","marketName","type","payload","changeSelectedMarketSaga","changeSelectedTimeTypeSaga","changeSelectedTimeCountSaga","changeAskBidOrder","askBidOption","changeAskBidOrderSaga","changeOrderPriceSaga","changeOrderAmountSaga","changeOrderTotalPriceSaga","searchCoin","searchName","searchCoinSaga","startInit","state","Object","keys","Coin","data","selectedMarket","selectedTimeType","selectedTimeCount","coin","timeType","timeCount","startChangeMarketAndData","action","changingMarketName","selectedCoinCandles","candle","candles","length","startAddMoreCandleData","isLoading","Loading","datetime","date","utc","format","changeTimeTypeAndData","timeTypeAndCount","newTimeType","newTimeCount","changePriceAndTotalPrice","price","orderAmount","Math","ceil","changeAmountAndTotalPrice","amount","orderPrice","changeTotalPriceAndAmount","totalPrice","toFixed","initialState","selectedAskBidOrder","orderTotalPrice","error","tradePrice24Hour","volume24Hour","changeRate24Hour","orderbook","total_bid_size","total_ask_size","orderbook_units","tradeList","coinReducer"],"mappings":"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","sourcesContent":["import {\n  createRequestSaga,\n  createConnectSocketThunk,\n  createChangeOptionSaga,\n  requestActions,\n  changeOptionActions,\n  requestInitActions,\n  createConnectSocketSaga,\n} from \"../Lib/asyncUtil\";\nimport { candleDataUtils, orderbookUtils, tradeListUtils } from \"../Lib/utils\";\nimport { coinApi } from \"../Api/api\";\nimport { takeEvery, put, select } from \"redux-saga/effects\";\nimport moment from \"moment-timezone\";\n\nconst START_INIT = \"coin/START_INIT\";\nconst START_CHANGE_MARKET_AND_DATA = \"coin/START_CHANGE_MARKET_AND_DATA\";\nconst CHANGE_TIME_TYPE_AND_DATA = \"coin/CHANGE_TIME_TYPE_AND_DATA\";\nconst START_ADD_MORE_CANDLE_DATA = \"coin/START_ADD_MORE_CANDLE_DATA\";\n\nconst GET_MARKET_NAMES = \"coin/GET_MARKET_NAMES\";\nconst GET_MARKET_NAMES_SUCCESS = \"coin/GET_MARKET_NAMES_SUCCESS\";\nconst GET_MARKET_NAMES_ERROR = \"coin/GET_MARKET_NAMES_ERROR\";\n\nconst GET_INIT_CANDLES = \"coin/GET_INIT_CANDLES\";\nconst GET_INIT_CANDLES_SUCCESS = \"coin/GET_INIT_CANDLES_SUCCESS\";\nconst GET_INIT_CANDLES_ERROR = \"coin/GET_INIT_CANDLES_ERROR\";\n\nconst GET_ONE_COIN_CANDLES = \"coin/GET_ONE_COIN_CANDLES\";\nconst GET_ONE_COIN_CANDLES_SUCCESS = \"coin/GET_ONE_COIN_CANDLES_SUCCESS\";\nconst GET_ONE_COIN_CANDLES_ERROR = \"coin/GET_ONE_COIN_CANDLES_ERROR\";\n\nconst GET_ADDITIONAL_COIN_CANDLES = \"coin/GET_ADDITIONAL_COIN_CANDLES\";\nconst GET_ADDITIONAL_COIN_CANDLES_SUCCESS =\n  \"coin/GET_ADDITIONAL_COIN_CANDLES_SUCCESS\";\nconst GET_ADDITIONAL_COIN_CANDLES_ERROR =\n  \"coin/GET_ADDITIONAL_COIN_CANDLES_ERROR\";\n\nconst CONNECT_CANDLE_SOCKET = \"coin/CONNECT_CANDLE_SOCKET\";\nconst CONNECT_CANDLE_SOCKET_SUCCESS = \"coin/CONNECT_CANDLE_SOCKET_SUCCESS\";\nconst CONNECT_CANDLE_SOCKET_ERROR = \"coin/CONNECT_CANDLE_SOCKET_ERROR\";\n\nconst GET_ONE_COIN_TRADELISTS = \"coin/GET_ONE_COIN_TRADELISTS\";\nconst GET_ONE_COIN_TRADELISTS_SUCCESS = \"coin/GET_ONE_COIN_TRADELISTS_SUCCESS\";\nconst GET_ONE_COIN_TRADELISTS_ERROR = \"coin/GET_ONE_COIN_TRADELISTS_ERROR\";\n\nconst CONNECT_TRADELIST_SOCKET = \"coin/CONNECT_TRADELIST_SOCKET\";\nconst CONNECT_TRADELIST_SOCKET_SUCCESS =\n  \"coin/CONNECT_TRADELIST_SOCKET_SUCCESS\";\nconst CONNECT_TRADELIST_SOCKET_ERROR = \"coin/CONNECT_TRADELIST_SOCKET_ERROR\";\n\nconst GET_INIT_ORDERBOOKS = \"coin/GET_INIT_ORDERBOOKS\";\nconst GET_INIT_ORDERBOOKS_SUCCESS = \"coin/GET_INIT_ORDERBOOKS_SUCCESS\";\nconst GET_INIT_ORDERBOOKS_ERROR = \"coin/GET_INIT_ORDERBOOKS_ERROR\";\n\nconst CONNECT_ORDERBOOK_SOCKET = \"coin/CONNECT_ORDERBOOK_SOCKET\";\nconst CONNECT_ORDERBOOK_SOCKET_SUCCESS =\n  \"coin/CONNECT_ORDERBOOK_SOCKET_SUCCESS\";\nconst CONNECT_ORDERBOOK_SOCKET_ERROR = \"coin/CONNECT_ORDERBOOK_SOCKET_ERROR\";\n\nconst CHANGE_COIN_MARKET = \"coin/CHANGE_COIN_MARKET\";\nconst CHANGE_COIN_MARKET_SUCCESS = \"coin/CHANGE_COIN_MARKET_SUCCESS\";\n\nconst CHANGE_TIME_TYPE = \"coin/CHANGE_TIME_TYPE\";\nconst CHANGE_TIME_TYPE_SUCCESS = \"coin/CHANGE_TIME_TYPE_SUCCESS\";\n\nconst CHANGE_TIME_COUNT = \"coin/CHANGE_TIME_COUNT\";\nconst CHANGE_TIME_COUNT_SUCCESS = \"coin/CHANGE_TIME_COUNT_SUCCESS\";\n\nconst CHANGE_ASK_BID_ORDER = \"coin/CHANGE_ASK_BID_ORDER\";\nconst CHANGE_ASK_BID_ORDER_SUCCESS = \"coin/CHANGE_ASK_BID_ORDER_SUCCESS\";\n\nconst CHANGE_ORDER_PRICE = \"coin/CHANGE_ORDER_PRICE\";\nconst CHANGE_ORDER_PRICE_SUCCESS = \"coin/CHANGE_ORDER_PRICE_SUCCESS\";\n\nconst CHANGE_ORDER_AMOUNT = \"coin/CHANGE_ORDER_AMOUNT\";\nconst CHANGE_ORDER_AMOUNT_SUCCESS = \"coin/CHANGE_ORDER_AMOUNT_SUCCESS\";\n\nconst CHANGE_ORDER_TOTAL_PRICE = \"coin/CHANGE_ORDER_TOTAL_PRICE\";\nconst CHANGE_ORDER_TOTAL_PRICE_SUCCESS =\n  \"coin/CHANGE_ORDER_TOTAL_PRICE_SUCCESS\";\n\nconst CHANGE_PRICE_AND_TOTAL_PRICE = \"coin/CHANGE_PRICE_AND_TOTAL_PRICE\";\nconst CHANGE_AMOUNT_AND_TOTAL_PRICE = \"coin/CHANGE_AMOUNT_AND_TOTAL_PRICE\";\nconst CHANGE_TOTAL_PRICE_AND_AMOUNT = \"coin/CHANGE_TOTAL_PRICE_AND_AMOUNT\";\n\nconst SEARCH_COIN = \"coin/SEARCH_COIN\";\nconst SEARCH_COIN_SUCCESS = \"coin/SEARCH_COIN_SUCCESS\";\n\n// 업비트에서 제공하는 코인/마켓 이름들 가져오기 Saga\nconst getMarketNameSaga = createRequestSaga(\n  GET_MARKET_NAMES,\n  coinApi.getMarketCodes,\n  candleDataUtils.marketNames\n);\n\n// 코인/마켓 캔들들의 일봉 한 개씩 가져오기 Saga\nconst getInitCandleSaga = createRequestSaga(\n  GET_INIT_CANDLES,\n  coinApi.getInitCanldes,\n  candleDataUtils.init\n);\n\n// 특정 코인 봉 200개 가져오기 Saga\nconst getOneCoinCandlesSaga = createRequestSaga(\n  GET_ONE_COIN_CANDLES,\n  coinApi.getOneCoinCandles,\n  candleDataUtils.oneCoin\n);\n\nconst getAdditionalCoinCandlesSaga = createRequestSaga(\n  GET_ADDITIONAL_COIN_CANDLES,\n  coinApi.getAdditionalCoinCandles,\n  candleDataUtils.add\n);\n\n// 캔들 웹소켓 연결 Thunk\nconst connectCandleSocketThunk = createConnectSocketThunk(\n  CONNECT_CANDLE_SOCKET,\n  \"ticker\",\n  candleDataUtils.update\n);\n\n// const connectCandleSocketThunk = createConnectSocketThrottleThunk(\n//   CONNECT_CANDLE_SOCKET,\n//   \"ticker\",\n//   candleDataUtils.update\n// );\n\nconst connectCandleSocketSaga = createConnectSocketSaga(\n  CONNECT_CANDLE_SOCKET,\n  \"ticker\",\n  candleDataUtils.updates\n);\n\n// 호가창 조기 값 가져오기\nconst getInitOrderbookSaga = createRequestSaga(\n  GET_INIT_ORDERBOOKS,\n  coinApi.getInitOrderbooks,\n  orderbookUtils.init\n);\n\n// 호가창 웹소켓 연결 Thunk\nconst connectOrderbookSocketThunk = createConnectSocketThunk(\n  CONNECT_ORDERBOOK_SOCKET,\n  \"orderbook\",\n  orderbookUtils.update\n);\n\n// 체결내역 200개 가져오기\nconst getOneCoinTradeListsSaga = createRequestSaga(\n  GET_ONE_COIN_TRADELISTS,\n  coinApi.getOneCoinTradeLists,\n  tradeListUtils.init\n);\n\n// 체결내역 웹소켓 연결 Thunk\nconst connectTradeListSocketThunk = createConnectSocketThunk(\n  CONNECT_TRADELIST_SOCKET,\n  \"trade\",\n  tradeListUtils.update\n);\n\n// 선택한 코인마켓 변경하기 Saga\nconst changeSelectedMarket = (marketName) => ({\n  type: CHANGE_COIN_MARKET,\n  payload: marketName,\n});\nconst changeSelectedMarketSaga = createChangeOptionSaga(CHANGE_COIN_MARKET);\n\n// 선택한 타임 타입(5분봉 할때 '분') 변경하기 Saga\nconst changeSelectedTimeTypeSaga = createChangeOptionSaga(CHANGE_TIME_TYPE);\n\n// 선택한 타임 카운트(5분봉 할때 '5') 변경하기 Saga\nconst changeSelectedTimeCountSaga = createChangeOptionSaga(CHANGE_TIME_COUNT);\n\n// 매수 매도 옵션 변경하기\nconst changeAskBidOrder = (askBidOption) => ({\n  type: CHANGE_ASK_BID_ORDER,\n  payload: askBidOption,\n});\nconst changeAskBidOrderSaga = createChangeOptionSaga(CHANGE_ASK_BID_ORDER);\n\n// 주문 가격 변경하기\nconst changeOrderPriceSaga = createChangeOptionSaga(CHANGE_ORDER_PRICE);\n\n// 주문 수량 변경하기\nconst changeOrderAmountSaga = createChangeOptionSaga(CHANGE_ORDER_AMOUNT);\n\n// 주문 총액 변경하기\nconst changeOrderTotalPriceSaga = createChangeOptionSaga(\n  CHANGE_ORDER_TOTAL_PRICE\n);\n\n// 코인 검색 내용 변경하기 Saga\nconst searchCoin = (searchName) => ({\n  type: SEARCH_COIN,\n  payload: searchName,\n});\nconst searchCoinSaga = createChangeOptionSaga(SEARCH_COIN);\n\n// 시작시 데이터 초기화 작업들\nconst startInit = () => ({ type: START_INIT });\nfunction* startInittSaga() {\n  yield getMarketNameSaga(); // 코인/시장 종류 받기\n\n  const state = yield select();\n  const marketNames = Object.keys(state.Coin.marketNames.data);\n  const selectedMarket = state.Coin.selectedMarket;\n  const selectedTimeType = state.Coin.selectedTimeType;\n  const selectedTimeCount = state.Coin.selectedTimeCount;\n\n  yield getInitCandleSaga({ payload: marketNames }); // 코인 캔들 초기값 받기\n  yield getInitOrderbookSaga({ payload: selectedMarket }); // 호가창 초기값 받기\n  yield getOneCoinTradeListsSaga({ payload: selectedMarket }); // 체결내역 초기값 받기\n  yield getOneCoinCandlesSaga({\n    payload: {\n      coin: selectedMarket,\n      timeType: selectedTimeType,\n      timeCount: selectedTimeCount,\n    },\n  }); // 200개 코인 데이터 받기\n\n  // yield connectCandleSocketSaga({ payload: marketNames }); // 캔들 소켓 연결 사가버전\n  yield put(connectOrderbookSocketThunk({ payload: marketNames })); // 오더북 소켓 연결\n  yield put(connectTradeListSocketThunk({ payload: marketNames })); // 체결내역 소켓 연결\n  // yield put(connectCandleSocketThunk({ payload: marketNames })); // 캔들 소켓 연결\n  yield connectCandleSocketSaga({ payload: marketNames }); // 캔들 소켓 연결 사가버전\n}\n\n// 선택된 코인/마켓 변경 및 해당 마켓 데이터 받기\nconst startChangeMarketAndData = (marketName) => ({\n  type: START_CHANGE_MARKET_AND_DATA,\n  payload: marketName,\n});\nfunction* startChangeMarketAndDataSaga(action) {\n  const state = yield select();\n  const selectedTimeType = state.Coin.selectedTimeType;\n  const selectedTimeCount = state.Coin.selectedTimeCount;\n  const changingMarketName = action.payload;\n  const selectedCoinCandles =\n    state.Coin.candle.data[changingMarketName].candles;\n\n  yield put(changeSelectedMarket(changingMarketName)); // 선택된 마켓 변경\n  yield getInitOrderbookSaga({ payload: changingMarketName }); // 호가창 초기값 받기\n  yield getOneCoinTradeListsSaga({ payload: changingMarketName }); // 체결내역 초기값 받기\n\n  // 상태에 저장된 데이터가 200개 미만일때만 api콜 요청함\n  if (selectedCoinCandles.length < 200) {\n    yield getOneCoinCandlesSaga({\n      payload: {\n        coin: changingMarketName,\n        timeType: selectedTimeType,\n        timeCount: selectedTimeCount,\n      },\n    });\n  }\n}\n\n// 추가 캔들 데이터 가져오기\nconst startAddMoreCandleData = () => ({ type: START_ADD_MORE_CANDLE_DATA });\nfunction* startAddMoreCandleDataSaga() {\n  const state = yield select();\n\n  const selectedMarket = state.Coin.selectedMarket;\n  const selectedTimeType = state.Coin.selectedTimeType;\n  const selectedTimeCount = state.Coin.selectedTimeCount;\n\n  const isLoading = state.Loading[GET_ADDITIONAL_COIN_CANDLES];\n\n  if (isLoading) return;\n  const datetime =\n    moment(state.Coin.candle.data[selectedMarket].candles[0].date)\n      .utc()\n      .format(\"YYYY-MM-DDTHH:mm\") + \":00Z\";\n\n  yield getAdditionalCoinCandlesSaga({\n    payload: {\n      coin: selectedMarket,\n      timeType: selectedTimeType,\n      timeCount: selectedTimeCount,\n      datetime,\n    },\n  });\n}\n\n// 차트 시간 데이터 변경하고 데이터 받기\nconst changeTimeTypeAndData = (timeTypeAndCount) => ({\n  type: CHANGE_TIME_TYPE_AND_DATA,\n  payload: timeTypeAndCount,\n});\n\nfunction* changeTimeTypeAndDataSaga(action) {\n  const state = yield select();\n  const selectedMarket = state.Coin.selectedMarket;\n  const selectedTimeType = state.Coin.selectedTimeType;\n  const selectedTimeCount = state.Coin.selectedTimeCount;\n\n  const newTimeType = action.payload.timeType;\n  const newTimeCount = action.payload.timeCount;\n\n  if (selectedTimeType === newTimeType && selectedTimeCount === newTimeCount)\n    return;\n\n  yield changeSelectedTimeTypeSaga({ payload: newTimeType });\n  yield changeSelectedTimeCountSaga({ payload: newTimeCount });\n\n  yield getOneCoinCandlesSaga({\n    payload: {\n      coin: selectedMarket,\n      timeType: newTimeType,\n      timeCount: newTimeCount,\n    },\n  });\n}\n\n// 가격 변경 후 주문 총액 바꾸기\nconst changePriceAndTotalPrice = (price) => ({\n  type: CHANGE_PRICE_AND_TOTAL_PRICE,\n  payload: price,\n});\nfunction* changePriceAndTotalPriceSaga(action) {\n  const state = yield select();\n  const orderAmount = state.Coin.orderAmount;\n\n  yield changeOrderPriceSaga({ payload: action.payload });\n  yield changeOrderTotalPriceSaga({\n    payload: Math.ceil(action.payload * orderAmount),\n  });\n}\n\n// 주문수량 변경 후 주문 총액 바꾸기\nconst changeAmountAndTotalPrice = (amount) => ({\n  type: CHANGE_AMOUNT_AND_TOTAL_PRICE,\n  payload: amount,\n});\nfunction* changeAmountAndTotalPriceSaga(action) {\n  const state = yield select();\n  const orderPrice = state.Coin.orderPrice;\n\n  yield changeOrderAmountSaga({ payload: action.payload });\n  yield changeOrderTotalPriceSaga({\n    payload: Math.ceil(action.payload * orderPrice),\n  });\n}\n\n// 주문총액 변경 후 주문수량 바꾸기\nconst changeTotalPriceAndAmount = (totalPrice) => ({\n  type: CHANGE_TOTAL_PRICE_AND_AMOUNT,\n  payload: totalPrice,\n});\nfunction* changeTotalPriceAndAmountSaga(action) {\n  const state = yield select();\n  const orderPrice = state.Coin.orderPrice;\n\n  yield changeOrderTotalPriceSaga({ payload: action.payload });\n  yield changeOrderAmountSaga({\n    payload: orderPrice ? (action.payload / orderPrice).toFixed(8) : 0,\n  });\n}\n\nfunction* coinSaga() {\n  yield takeEvery(GET_MARKET_NAMES, getMarketNameSaga);\n  yield takeEvery(GET_INIT_CANDLES, getInitCandleSaga);\n  yield takeEvery(GET_INIT_ORDERBOOKS, getInitOrderbookSaga);\n  yield takeEvery(GET_ONE_COIN_CANDLES, getOneCoinCandlesSaga);\n  yield takeEvery(GET_ONE_COIN_TRADELISTS, getOneCoinTradeListsSaga);\n\n  yield takeEvery(CHANGE_COIN_MARKET, changeSelectedMarketSaga);\n  yield takeEvery(CHANGE_ASK_BID_ORDER, changeAskBidOrderSaga);\n  yield takeEvery(CHANGE_ORDER_PRICE, changeOrderPriceSaga);\n  yield takeEvery(CHANGE_ORDER_AMOUNT, changeOrderAmountSaga);\n  yield takeEvery(CHANGE_ORDER_TOTAL_PRICE, changeOrderTotalPriceSaga);\n  yield takeEvery(SEARCH_COIN, searchCoinSaga);\n\n  yield takeEvery(START_INIT, startInittSaga);\n  yield takeEvery(START_CHANGE_MARKET_AND_DATA, startChangeMarketAndDataSaga);\n  yield takeEvery(START_ADD_MORE_CANDLE_DATA, startAddMoreCandleDataSaga);\n  yield takeEvery(CHANGE_TIME_TYPE_AND_DATA, changeTimeTypeAndDataSaga);\n\n  yield takeEvery(CHANGE_PRICE_AND_TOTAL_PRICE, changePriceAndTotalPriceSaga);\n  yield takeEvery(CHANGE_AMOUNT_AND_TOTAL_PRICE, changeAmountAndTotalPriceSaga);\n  yield takeEvery(CHANGE_TOTAL_PRICE_AND_AMOUNT, changeTotalPriceAndAmountSaga);\n}\n\nconst initialState = {\n  selectedMarket: \"KRW-BTC\",\n  selectedTimeType: \"minutes\",\n  selectedTimeCount: 5,\n  selectedAskBidOrder: \"bid\",\n  orderPrice: 0,\n  orderAmount: 0,\n  orderTotalPrice: 0,\n  searchCoin: \"\",\n  marketNames: {\n    error: false,\n    data: {\n      \"KRW-BTC\": \"비트코인\",\n    },\n  },\n  candle: {\n    error: false,\n    data: {\n      \"KRW-BTC\": {\n        candles: [\n          // { date: new Date(), open: 1, close: 1, high: 1, low: 1, volume: 1 },\n        ],\n        tradePrice24Hour: 0,\n        volume24Hour: 0,\n        changeRate24Hour: 0,\n      },\n    },\n  },\n  orderbook: {\n    error: false,\n    data: {\n      \"KRW-BTC\": {\n        total_bid_size: 0,\n        total_ask_size: 0,\n        orderbook_units: [],\n      },\n    },\n  },\n  tradeList: {\n    error: false,\n    data: {},\n  },\n};\n\nconst coinReducer = (state = initialState, action) => {\n  switch (action.type) {\n    // 코인 마켓 이름들\n    case GET_MARKET_NAMES_SUCCESS:\n    case GET_MARKET_NAMES_ERROR:\n      return requestActions(GET_MARKET_NAMES, \"marketNames\")(state, action);\n\n    // 초기 캔들\n    case GET_INIT_CANDLES_SUCCESS:\n    case GET_INIT_CANDLES_ERROR:\n      return requestInitActions(GET_INIT_CANDLES, \"candle\")(state, action);\n\n    // 코인 한 개 정해서 200개\n    case GET_ONE_COIN_CANDLES_SUCCESS:\n    case GET_ONE_COIN_CANDLES_ERROR:\n      return requestActions(GET_ONE_COIN_CANDLES, \"candle\")(state, action);\n\n    // 추가 코인 데이터 로드\n    case GET_ADDITIONAL_COIN_CANDLES_SUCCESS:\n    case GET_ADDITIONAL_COIN_CANDLES_ERROR:\n      return requestActions(GET_ADDITIONAL_COIN_CANDLES, \"candle\")(\n        state,\n        action\n      );\n\n    // 캔들 실시간 정보\n    case CONNECT_CANDLE_SOCKET_SUCCESS:\n    case CONNECT_CANDLE_SOCKET_ERROR:\n      return requestActions(CONNECT_CANDLE_SOCKET, \"candle\")(state, action);\n\n    // 호가창 초기값\n    case GET_INIT_ORDERBOOKS_SUCCESS:\n    case GET_INIT_ORDERBOOKS_ERROR:\n      return requestActions(GET_INIT_ORDERBOOKS, \"orderbook\")(state, action);\n\n    // 호가창 실시간 정보\n    case CONNECT_ORDERBOOK_SOCKET_SUCCESS:\n    case CONNECT_ORDERBOOK_SOCKET_ERROR:\n      return requestActions(CONNECT_ORDERBOOK_SOCKET, \"orderbook\")(\n        state,\n        action\n      );\n\n    // 체결내역 200개 초기값\n    case GET_ONE_COIN_TRADELISTS_SUCCESS:\n    case GET_ONE_COIN_TRADELISTS_ERROR:\n      return requestActions(GET_ONE_COIN_TRADELISTS, \"tradeList\")(\n        state,\n        action\n      );\n\n    // 체결내역 실시간 정보\n    case CONNECT_TRADELIST_SOCKET_SUCCESS:\n    case CONNECT_TRADELIST_SOCKET_ERROR:\n      return requestActions(CONNECT_TRADELIST_SOCKET, \"tradeList\")(\n        state,\n        action\n      );\n\n    case CHANGE_COIN_MARKET_SUCCESS:\n      return changeOptionActions(CHANGE_COIN_MARKET, \"selectedMarket\")(\n        state,\n        action\n      );\n\n    case CHANGE_TIME_TYPE_SUCCESS:\n      return changeOptionActions(CHANGE_TIME_TYPE, \"selectedTimeType\")(\n        state,\n        action\n      );\n\n    case CHANGE_TIME_COUNT_SUCCESS:\n      return changeOptionActions(CHANGE_TIME_COUNT, \"selectedTimeCount\")(\n        state,\n        action\n      );\n\n    case CHANGE_ASK_BID_ORDER_SUCCESS:\n      return changeOptionActions(CHANGE_ASK_BID_ORDER, \"selectedAskBidOrder\")(\n        state,\n        action\n      );\n\n    case CHANGE_ORDER_PRICE_SUCCESS:\n      return changeOptionActions(CHANGE_ORDER_PRICE, \"orderPrice\")(\n        state,\n        action\n      );\n    case CHANGE_ORDER_AMOUNT_SUCCESS:\n      return changeOptionActions(CHANGE_ORDER_AMOUNT, \"orderAmount\")(\n        state,\n        action\n      );\n    case CHANGE_ORDER_TOTAL_PRICE_SUCCESS:\n      return changeOptionActions(CHANGE_ORDER_TOTAL_PRICE, \"orderTotalPrice\")(\n        state,\n        action\n      );\n\n    case SEARCH_COIN_SUCCESS:\n      return changeOptionActions(SEARCH_COIN, \"searchCoin\")(state, action);\n    default:\n      return state;\n  }\n};\n\nexport {\n  startInit,\n  startChangeMarketAndData,\n  startAddMoreCandleData,\n  changeTimeTypeAndData,\n  coinReducer,\n  coinSaga,\n  changeAskBidOrder,\n  changePriceAndTotalPrice,\n  changeAmountAndTotalPrice,\n  changeTotalPriceAndAmount,\n  searchCoin,\n};\n"]},"metadata":{},"sourceType":"module"}