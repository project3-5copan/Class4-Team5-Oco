{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { deviation, sum, zip } from \"d3-array\";\nimport * as React from \"react\";\nimport { getClosestItemIndexes, getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nimport { isHovering2 } from \"./InteractiveStraightLine\";\nexport var LinearRegressionChannelWithArea = /*#__PURE__*/function (_React$Component) {\n  _inherits(LinearRegressionChannelWithArea, _React$Component);\n\n  var _super = _createSuper(LinearRegressionChannelWithArea);\n\n  function LinearRegressionChannelWithArea() {\n    var _this;\n\n    _classCallCheck(this, LinearRegressionChannelWithArea);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var _this$props = _this.props,\n          strokeStyle = _this$props.strokeStyle,\n          strokeWidth = _this$props.strokeWidth,\n          fillStyle = _this$props.fillStyle;\n\n      var _helper = helper(_this.props, moreProps),\n          x1 = _helper.x1,\n          y1 = _helper.y1,\n          x2 = _helper.x2,\n          y2 = _helper.y2,\n          dy = _helper.dy;\n\n      ctx.lineWidth = strokeWidth;\n      ctx.strokeStyle = strokeStyle;\n      ctx.fillStyle = fillStyle;\n      ctx.beginPath();\n      ctx.moveTo(x1, y1 - dy);\n      ctx.lineTo(x2, y2 - dy);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(x2, y2 + dy);\n      ctx.lineTo(x1, y1 + dy);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(x1, y1 - dy);\n      ctx.lineTo(x2, y2 - dy);\n      ctx.lineTo(x2, y2 + dy);\n      ctx.lineTo(x1, y1 + dy);\n      ctx.closePath();\n      ctx.fill();\n      ctx.beginPath();\n      ctx.moveTo(x2, y2);\n      ctx.lineTo(x1, y1);\n      ctx.stroke();\n    };\n\n    _this.isHover = function (moreProps) {\n      var _this$props2 = _this.props,\n          tolerance = _this$props2.tolerance,\n          onHover = _this$props2.onHover;\n\n      if (onHover !== undefined) {\n        var mouseXY = moreProps.mouseXY;\n\n        var _helper2 = helper(_this.props, moreProps),\n            x1 = _helper2.x1,\n            y1 = _helper2.y1,\n            x2 = _helper2.x2,\n            y2 = _helper2.y2,\n            dy = _helper2.dy;\n\n        var yDiffs = [-dy, 0, dy];\n        var hovering = yDiffs.reduce(function (result, diff) {\n          return result || isHovering2([x1, y1 + diff], [x2, y2 + diff], mouseXY, tolerance);\n        }, false);\n        return hovering;\n      }\n\n      return false;\n    };\n\n    return _this;\n  }\n\n  _createClass(LinearRegressionChannelWithArea, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          selected = _this$props3.selected,\n          interactiveCursorClass = _this$props3.interactiveCursorClass;\n      var _this$props4 = this.props,\n          onDragStart = _this$props4.onDragStart,\n          onDrag = _this$props4.onDrag,\n          onDragComplete = _this$props4.onDragComplete,\n          onHover = _this$props4.onHover,\n          onUnHover = _this$props4.onUnHover;\n      return React.createElement(GenericChartComponent, {\n        isHover: this.isHover,\n        canvasToDraw: getMouseCanvas,\n        canvasDraw: this.drawOnCanvas,\n        interactiveCursorClass: interactiveCursorClass,\n        selected: selected,\n        onDragStart: onDragStart,\n        onDrag: onDrag,\n        onDragComplete: onDragComplete,\n        onHover: onHover,\n        onUnHover: onUnHover,\n        drawOn: [\"mousemove\", \"mouseleave\", \"pan\", \"drag\"]\n      });\n    }\n  }]);\n\n  return LinearRegressionChannelWithArea;\n}(React.Component);\nLinearRegressionChannelWithArea.defaultProps = {\n  type: \"SD\",\n  strokeWidth: 1,\n  tolerance: 4,\n  selected: false\n};\nexport function edge1Provider(props) {\n  return function (moreProps) {\n    var _helper3 = helper(props, moreProps),\n        x1 = _helper3.x1,\n        y1 = _helper3.y1;\n\n    return [x1, y1];\n  };\n}\nexport function edge2Provider(props) {\n  return function (moreProps) {\n    var _helper4 = helper(props, moreProps),\n        x2 = _helper4.x2,\n        y2 = _helper4.y2;\n\n    return [x2, y2];\n  };\n}\n\nfunction helper(props, moreProps) {\n  var x1Value = props.x1Value,\n      x2Value = props.x2Value,\n      type = props.type;\n  var xScale = moreProps.xScale,\n      yScale = moreProps.chartConfig.yScale,\n      fullData = moreProps.fullData;\n  var xAccessor = moreProps.xAccessor;\n\n  var _getClosestItemIndexe = getClosestItemIndexes(fullData, x1Value, xAccessor),\n      left = _getClosestItemIndexe.left;\n\n  var _getClosestItemIndexe2 = getClosestItemIndexes(fullData, x2Value, xAccessor),\n      right = _getClosestItemIndexe2.right;\n\n  var startIndex = Math.min(left, right);\n  var endIndex = Math.max(left, right) + 1;\n  var array = fullData.slice(startIndex, endIndex);\n  var xs = array.map(function (d) {\n    return xAccessor(d).valueOf();\n  });\n  var ys = array.map(function (d) {\n    return d.close;\n  });\n  var n = array.length;\n  var xys = zip(xs, ys).map(function (d) {\n    return d[0] * d[1];\n  });\n  var xSquareds = xs.map(function (x) {\n    return Math.pow(x, 2);\n  });\n  var b = (n * sum(xys) - sum(xs) * sum(ys)) / (n * sum(xSquareds) - Math.pow(sum(xs), 2));\n  var a = (sum(ys) - b * sum(xs)) / n;\n  var newy1 = a + b * x1Value;\n  var newy2 = a + b * x2Value;\n  var x1 = xScale(x1Value);\n  var y1 = yScale(newy1);\n  var x2 = xScale(x2Value);\n  var y2 = yScale(newy2);\n  var stdDev = type === \"SD\" ? deviation(array, function (d) {\n    return d.close;\n  }) : 0;\n  var dy = yScale(newy1 - stdDev) - y1;\n  return {\n    x1: x1,\n    y1: y1,\n    x2: x2,\n    y2: y2,\n    dy: dy\n  };\n}","map":null,"metadata":{},"sourceType":"module"}