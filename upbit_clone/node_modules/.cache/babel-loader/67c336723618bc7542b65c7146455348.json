{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { functor, head, getAxisCanvas, GenericChartComponent, plotDataLengthBarWidth } from \"@react-financial-charts/core\";\nimport { group } from \"d3-array\";\nimport * as React from \"react\";\nimport { drawOnCanvasHelper, identityStack } from \"./StackedBarSeries\";\n/**\n * A `BarSeries` component.\n */\n\nexport var BarSeries = /*#__PURE__*/function (_React$Component) {\n  _inherits(BarSeries, _React$Component);\n\n  var _super = _createSuper(BarSeries);\n\n  function BarSeries() {\n    var _this;\n\n    _classCallCheck(this, BarSeries);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      if (_this.props.swapScales) {\n        var xAccessor = moreProps.xAccessor;\n        drawOnCanvasHelper(ctx, _this.props, moreProps, xAccessor, identityStack);\n      } else {\n        var bars = _this.getBars(moreProps);\n\n        var strokeStyle = _this.props.strokeStyle;\n        var nest = group(bars, function (d) {\n          return d.fillStyle;\n        });\n        nest.forEach(function (values, key) {\n          if (strokeStyle !== undefined) {\n            if (head(values).width > 1) {\n              ctx.strokeStyle = strokeStyle;\n            }\n          }\n\n          ctx.fillStyle = key;\n          values.forEach(function (d) {\n            if (d.width <= 1) {\n              ctx.fillRect(d.x - 0.5, d.y, 1, d.height);\n            } else {\n              ctx.fillRect(d.x + 0.5, d.y + 0.5, d.width, d.height);\n\n              if (strokeStyle !== undefined) {\n                ctx.strokeRect(d.x, d.y, d.width, d.height);\n              }\n            }\n          });\n        });\n      }\n    };\n\n    _this.getBars = function (moreProps) {\n      var _this$props = _this.props,\n          baseAt = _this$props.baseAt,\n          fillStyle = _this$props.fillStyle,\n          width = _this$props.width,\n          yAccessor = _this$props.yAccessor;\n      var xScale = moreProps.xScale,\n          xAccessor = moreProps.xAccessor,\n          plotData = moreProps.plotData,\n          yScale = moreProps.chartConfig.yScale;\n      var getFill = functor(fillStyle);\n      var getBase = functor(baseAt);\n      var getWidth = functor(width);\n      var barWidth = getWidth(_this.props, {\n        xScale: xScale,\n        xAccessor: xAccessor,\n        plotData: plotData\n      });\n      var offset = Math.floor(0.5 * barWidth);\n      return plotData.map(function (d) {\n        var yValue = yAccessor(d);\n\n        if (yValue === undefined) {\n          return undefined;\n        }\n\n        var xValue = xAccessor(d);\n        var x = Math.round(xScale(xValue)) - offset;\n        var y = yScale(yValue);\n        var h = getBase(xScale, yScale, d) - yScale(yValue);\n\n        if (h < 0) {\n          y = y + h;\n          h = -h;\n        }\n\n        return {\n          x: x,\n          y: Math.round(y),\n          height: Math.round(h),\n          width: offset * 2,\n          fillStyle: getFill(d)\n        };\n      }).filter(function (d) {\n        return d !== undefined;\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(BarSeries, [{\n    key: \"render\",\n    value: function render() {\n      var clip = this.props.clip;\n      return React.createElement(GenericChartComponent, {\n        clip: clip,\n        canvasToDraw: getAxisCanvas,\n        canvasDraw: this.drawOnCanvas,\n        drawOn: [\"pan\"]\n      });\n    }\n  }]);\n\n  return BarSeries;\n}(React.Component);\nBarSeries.defaultProps = {\n  baseAt: function baseAt(xScale, yScale\n  /* , d*/\n  ) {\n    return head(yScale.range());\n  },\n  clip: true,\n  fillStyle: \"rgba(70, 130, 180, 0.5)\",\n  swapScales: false,\n  width: plotDataLengthBarWidth,\n  widthRatio: 0.8\n};","map":null,"metadata":{},"sourceType":"module"}