{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { merge } from \"d3-array\";\nimport * as React from \"react\";\nimport { first, functor, getAxisCanvas, GenericChartComponent, plotDataLengthBarWidth } from \"@react-financial-charts/core\";\nimport { drawOnCanvas2 } from \"./StackedBarSeries\";\nexport var OverlayBarSeries = /*#__PURE__*/function (_React$Component) {\n  _inherits(OverlayBarSeries, _React$Component);\n\n  var _super = _createSuper(OverlayBarSeries);\n\n  function OverlayBarSeries() {\n    var _this;\n\n    _classCallCheck(this, OverlayBarSeries);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var bars = _this.getBars(moreProps);\n\n      drawOnCanvas2(_this.props, ctx, bars);\n    };\n\n    _this.getBars = function (moreProps) {\n      var xScale = moreProps.xScale,\n          xAccessor = moreProps.xAccessor,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData;\n      var _this$props = _this.props,\n          baseAt = _this$props.baseAt,\n          fillStyle = _this$props.fillStyle,\n          stroke = _this$props.stroke,\n          yAccessor = _this$props.yAccessor;\n      var getFill = functor(fillStyle);\n      var getBase = functor(baseAt);\n      var widthFunctor = functor(_this.props.width);\n      var width = widthFunctor(_this.props, moreProps);\n      var offset = Math.floor(0.5 * width);\n      var bars = plotData.map(function (d) {\n        var innerBars = yAccessor.map(function (eachYAccessor, i) {\n          var yValue = eachYAccessor(d);\n\n          if (yValue === undefined) {\n            return undefined;\n          }\n\n          var xValue = xAccessor(d);\n          var x = Math.round(xScale(xValue)) - offset;\n          var y = yScale(yValue);\n          return {\n            height: 0,\n            width: offset * 2,\n            x: x,\n            y: y,\n            stroke: stroke ? getFill(d, i) : \"none\",\n            fillStyle: getFill(d, i),\n            i: i\n          };\n        }).filter(function (yValue) {\n          return yValue !== undefined;\n        });\n        var b = getBase(xScale, yScale, d);\n        var h;\n\n        for (var i = innerBars.length - 1; i >= 0; i--) {\n          h = b - innerBars[i].y;\n\n          if (h < 0) {\n            innerBars[i].y = b;\n            h = -1 * h;\n          }\n\n          innerBars[i].height = h;\n          b = innerBars[i].y;\n        }\n\n        return innerBars;\n      });\n      return merge(bars);\n    };\n\n    return _this;\n  }\n\n  _createClass(OverlayBarSeries, [{\n    key: \"render\",\n    value: function render() {\n      var clip = this.props.clip;\n      return React.createElement(GenericChartComponent, {\n        canvasToDraw: getAxisCanvas,\n        canvasDraw: this.drawOnCanvas,\n        clip: clip,\n        drawOn: [\"pan\"]\n      });\n    }\n  }]);\n\n  return OverlayBarSeries;\n}(React.Component);\nOverlayBarSeries.defaultProps = {\n  baseAt: function baseAt(xScale, yScale) {\n    return first(yScale.range());\n  },\n  clip: true,\n  direction: \"up\",\n  stroke: false,\n  fillStyle: \"#4682B4\",\n  widthRatio: 0.5,\n  width: plotDataLengthBarWidth\n};","map":null,"metadata":{},"sourceType":"module"}