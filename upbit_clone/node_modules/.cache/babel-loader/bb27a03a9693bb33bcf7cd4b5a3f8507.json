{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { functor, getClosestValue, getMouseCanvas, GenericChartComponent, isDefined, noop, shallowEqual } from \"@react-financial-charts/core\";\nimport * as React from \"react\";\nimport { getXValue } from \"@react-financial-charts/core/lib/utils/ChartDataUtil\";\nexport var MouseLocationIndicator = /*#__PURE__*/function (_React$Component) {\n  _inherits(MouseLocationIndicator, _React$Component);\n\n  var _super = _createSuper(MouseLocationIndicator);\n\n  function MouseLocationIndicator() {\n    var _this;\n\n    _classCallCheck(this, MouseLocationIndicator);\n\n    _this = _super.apply(this, arguments);\n    _this.mutableState = {};\n\n    _this.xy = function (e, moreProps) {\n      var xAccessor = moreProps.xAccessor,\n          plotData = moreProps.plotData;\n      var mouseXY = moreProps.mouseXY,\n          currentItem = moreProps.currentItem,\n          xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale;\n      var _this$props = _this.props,\n          enabled = _this$props.enabled,\n          snap = _this$props.snap,\n          shouldDisableSnap = _this$props.shouldDisableSnap,\n          snapTo = _this$props.snapTo;\n\n      if (enabled && isDefined(currentItem) && isDefined(e)) {\n        var xValue = snap && !shouldDisableSnap(e) ? xAccessor(currentItem) : getXValue(xScale, xAccessor, mouseXY, plotData);\n        var yValue = snap && snapTo !== undefined && !shouldDisableSnap(e) ? getClosestValue(snapTo(currentItem), yScale.invert(mouseXY[1])) : yScale.invert(mouseXY[1]);\n        var x = xScale(xValue);\n        var y = yScale(yValue);\n        return {\n          xValue: xValue,\n          yValue: yValue,\n          x: x,\n          y: y\n        };\n      }\n    };\n\n    _this.handleClick = function (e, moreProps) {\n      var pos = _this.xy(e, moreProps);\n\n      if (pos !== undefined && isDefined(pos)) {\n        var xValue = pos.xValue,\n            yValue = pos.yValue,\n            x = pos.x,\n            y = pos.y;\n        _this.mutableState = {\n          x: x,\n          y: y\n        };\n\n        _this.props.onClick(e, [xValue, yValue], moreProps);\n      }\n    };\n\n    _this.handleMouseDown = function (e, moreProps) {\n      var pos = _this.xy(e, moreProps);\n\n      if (pos !== undefined && isDefined(pos)) {\n        var xValue = pos.xValue,\n            yValue = pos.yValue,\n            x = pos.x,\n            y = pos.y;\n        _this.mutableState = {\n          x: x,\n          y: y\n        };\n\n        _this.props.onMouseDown(e, [xValue, yValue], moreProps);\n      }\n    };\n\n    _this.handleMousePosChange = function (e, moreProps) {\n      if (!shallowEqual(moreProps.mousXY, moreProps.prevMouseXY)) {\n        var pos = _this.xy(e, moreProps);\n\n        if (pos !== undefined && isDefined(pos)) {\n          var xValue = pos.xValue,\n              yValue = pos.yValue,\n              x = pos.x,\n              y = pos.y;\n          _this.mutableState = {\n            x: x,\n            y: y\n          };\n\n          _this.props.onMouseMove(e, [xValue, yValue], moreProps);\n        }\n      }\n    };\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var _this$props2 = _this.props,\n          enabled = _this$props2.enabled,\n          r = _this$props2.r,\n          stroke = _this$props2.stroke,\n          strokeWidth = _this$props2.strokeWidth;\n      var _this$mutableState = _this.mutableState,\n          x = _this$mutableState.x,\n          y = _this$mutableState.y;\n      var show = moreProps.show;\n\n      if (enabled && show && isDefined(x)) {\n        ctx.lineWidth = strokeWidth;\n        ctx.strokeStyle = stroke;\n        ctx.moveTo(x, y);\n        ctx.beginPath();\n        ctx.arc(x, y, r, 0, 2 * Math.PI, false);\n        ctx.stroke();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(MouseLocationIndicator, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          enabled = _this$props3.enabled,\n          disablePan = _this$props3.disablePan;\n      return React.createElement(GenericChartComponent, {\n        onMouseDown: this.handleMouseDown,\n        onClick: this.handleClick,\n        onMouseMove: this.handleMousePosChange,\n        onPan: this.handleMousePosChange,\n        disablePan: enabled && disablePan,\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: getMouseCanvas,\n        drawOn: [\"mousemove\", \"pan\"]\n      });\n    }\n  }]);\n\n  return MouseLocationIndicator;\n}(React.Component);\nMouseLocationIndicator.defaultProps = {\n  onMouseMove: noop,\n  onMouseDown: noop,\n  onClick: noop,\n  shouldDisableSnap: functor(false),\n  stroke: \"#000000\",\n  strokeWidth: 1,\n  opacity: 1,\n  disablePan: true\n};","map":null,"metadata":{},"sourceType":"module"}