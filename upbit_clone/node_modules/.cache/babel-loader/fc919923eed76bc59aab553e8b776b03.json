{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { group } from \"d3-array\";\nimport * as React from \"react\";\nimport { functor, isDefined, getAxisCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nexport var OHLCSeries = /*#__PURE__*/function (_React$Component) {\n  _inherits(OHLCSeries, _React$Component);\n\n  var _super = _createSuper(OHLCSeries);\n\n  function OHLCSeries() {\n    var _this;\n\n    _classCallCheck(this, OHLCSeries);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var xAccessor = moreProps.xAccessor,\n          xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData;\n\n      var barData = _this.getOHLCBars(_this.props, xAccessor, xScale, yScale, plotData);\n\n      _this.drawBarDataOnCanvas(ctx, barData);\n    };\n\n    _this.getOHLCBars = function (props, xAccessor, xScale, yScale, plotData) {\n      var strokeProp = props.stroke,\n          _props$strokeWidth = props.strokeWidth,\n          strokeWidthProp = _props$strokeWidth === void 0 ? 1 : _props$strokeWidth,\n          yAccessor = props.yAccessor;\n      var strokeFunc = functor(strokeProp);\n      var width = xScale(xAccessor(plotData[plotData.length - 1])) - xScale(xAccessor(plotData[0]));\n      var barWidth = Math.max(1, Math.round(width / (plotData.length - 1) / 2) - 1.5);\n      var strokeWidth = Math.min(barWidth, strokeWidthProp);\n      var bars = plotData.filter(function (d) {\n        return yAccessor(d).close !== undefined;\n      }).map(function (d) {\n        var ohlc = yAccessor(d);\n        var x = Math.round(xScale(xAccessor(d)));\n        var y1 = yScale(ohlc.high);\n        var y2 = yScale(ohlc.low);\n        var openX1 = x - barWidth;\n        var openX2 = x + strokeWidth / 2;\n        var openY = yScale(ohlc.open);\n        var closeX1 = x - strokeWidth / 2;\n        var closeX2 = x + barWidth;\n        var closeY = yScale(ohlc.close);\n        var stroke = strokeFunc(d);\n        return {\n          x: x,\n          y1: y1,\n          y2: y2,\n          openX1: openX1,\n          openX2: openX2,\n          openY: openY,\n          closeX1: closeX1,\n          closeX2: closeX2,\n          closeY: closeY,\n          stroke: stroke\n        };\n      });\n      return {\n        barWidth: barWidth,\n        strokeWidth: strokeWidth,\n        bars: bars\n      };\n    };\n\n    _this.drawBarDataOnCanvas = function (ctx, barData) {\n      var strokeWidth = barData.strokeWidth,\n          bars = barData.bars;\n      var wickNest = group(bars, function (d) {\n        return d.stroke;\n      });\n      ctx.lineWidth = strokeWidth;\n      wickNest.forEach(function (values, key) {\n        ctx.strokeStyle = key;\n        values.forEach(function (d) {\n          ctx.beginPath();\n          ctx.moveTo(d.x, d.y1);\n          ctx.lineTo(d.x, d.y2);\n          ctx.moveTo(d.openX1, d.openY);\n          ctx.lineTo(d.openX2, d.openY);\n          ctx.moveTo(d.closeX1, d.closeY);\n          ctx.lineTo(d.closeX2, d.closeY);\n          ctx.stroke();\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(OHLCSeries, [{\n    key: \"render\",\n    value: function render() {\n      var clip = this.props.clip;\n      return React.createElement(GenericChartComponent, {\n        canvasToDraw: getAxisCanvas,\n        canvasDraw: this.drawOnCanvas,\n        clip: clip,\n        drawOn: [\"pan\"]\n      });\n    }\n  }]);\n\n  return OHLCSeries;\n}(React.Component);\nOHLCSeries.defaultProps = {\n  yAccessor: function yAccessor(d) {\n    return {\n      open: d.open,\n      high: d.high,\n      low: d.low,\n      close: d.close\n    };\n  },\n  classNames: function classNames(d) {\n    return isDefined(d.absoluteChange) ? d.absoluteChange > 0 ? \"up\" : \"down\" : \"firstbar\";\n  },\n  stroke: function stroke(d) {\n    return isDefined(d.absoluteChange) ? d.absoluteChange > 0 ? \"#26a69a\" : \"#ef5350\" : \"#000000\";\n  },\n  strokeWidth: 1,\n  clip: true\n};","map":null,"metadata":{},"sourceType":"module"}