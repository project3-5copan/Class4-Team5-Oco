{"ast":null,"code":"import _toConsumableArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from \"react\";\nimport { isDefined, isNotDefined, noop } from \"@react-financial-charts/core\";\nimport { getValueFromOverride, isHoverForInteractiveType, saveNodeType, terminate } from \"./utils\";\nimport { HoverTextNearMouse, MouseLocationIndicator, InteractiveStraightLine } from \"./components\";\nimport { EachTrendLine } from \"./wrapper\";\nexport var TrendLine = /*#__PURE__*/function (_React$Component) {\n  _inherits(TrendLine, _React$Component);\n\n  var _super = _createSuper(TrendLine);\n\n  function TrendLine(props) {\n    var _this;\n\n    _classCallCheck(this, TrendLine);\n\n    _this = _super.call(this, props);\n\n    _this.handleEnd = function (e, xyValue, moreProps) {\n      var current = _this.state.current;\n      var _this$props = _this.props,\n          trends = _this$props.trends,\n          appearance = _this$props.appearance,\n          type = _this$props.type;\n\n      if (_this.mouseMoved && isDefined(current) && isDefined(current.start)) {\n        var newTrends = [].concat(_toConsumableArray(trends.map(function (d) {\n          return Object.assign(Object.assign({}, d), {\n            selected: false\n          });\n        })), [{\n          start: current.start,\n          end: xyValue,\n          selected: true,\n          appearance: appearance,\n          type: type\n        }]);\n\n        _this.setState({\n          current: null,\n          trends: newTrends\n        }, function () {\n          var onComplete = _this.props.onComplete;\n\n          if (onComplete !== undefined) {\n            onComplete(e, newTrends, moreProps);\n          }\n        });\n      }\n    };\n\n    _this.handleStart = function (e, xyValue, moreProps) {\n      var current = _this.state.current;\n\n      if (isNotDefined(current) || isNotDefined(current.start)) {\n        _this.mouseMoved = false;\n\n        _this.setState({\n          current: {\n            start: xyValue,\n            end: null\n          }\n        }, function () {\n          var onStart = _this.props.onStart;\n\n          if (onStart !== undefined) {\n            onStart(e, moreProps);\n          }\n        });\n      }\n    };\n\n    _this.handleDrawLine = function (_, xyValue) {\n      var current = _this.state.current;\n\n      if (isDefined(current) && isDefined(current.start)) {\n        _this.mouseMoved = true;\n\n        _this.setState({\n          current: {\n            start: current.start,\n            end: xyValue\n          }\n        });\n      }\n    };\n\n    _this.handleDragLineComplete = function (e, moreProps) {\n      var override = _this.state.override;\n\n      if (isDefined(override)) {\n        var trends = _this.props.trends;\n        var newTrends = trends.map(function (each, idx) {\n          return idx === override.index ? Object.assign(Object.assign({}, each), {\n            start: [override.x1Value, override.y1Value],\n            end: [override.x2Value, override.y2Value],\n            selected: true\n          }) : Object.assign(Object.assign({}, each), {\n            selected: false\n          });\n        });\n\n        _this.setState({\n          override: null\n        }, function () {\n          var onComplete = _this.props.onComplete;\n\n          if (onComplete !== undefined) {\n            onComplete(e, newTrends, moreProps);\n          }\n        });\n      }\n    };\n\n    _this.handleDragLine = function (_, index, newXYValue) {\n      _this.setState({\n        override: Object.assign({\n          index: index\n        }, newXYValue)\n      });\n    };\n\n    _this.terminate = terminate.bind(_assertThisInitialized(_this));\n    _this.saveNodeType = saveNodeType.bind(_assertThisInitialized(_this));\n    _this.getSelectionState = isHoverForInteractiveType(\"trends\").bind(_assertThisInitialized(_this));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(TrendLine, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          appearance = _this$props2.appearance,\n          currentPositionstrokeOpacity = _this$props2.currentPositionstrokeOpacity,\n          _this$props2$currentP = _this$props2.currentPositionRadius,\n          currentPositionRadius = _this$props2$currentP === void 0 ? TrendLine.defaultProps.currentPositionRadius : _this$props2$currentP,\n          currentPositionStroke = _this$props2.currentPositionStroke,\n          currentPositionStrokeWidth = _this$props2.currentPositionStrokeWidth,\n          enabled = _this$props2.enabled,\n          hoverText = _this$props2.hoverText,\n          shouldDisableSnap = _this$props2.shouldDisableSnap,\n          snap = _this$props2.snap,\n          snapTo = _this$props2.snapTo,\n          trends = _this$props2.trends,\n          type = _this$props2.type;\n      var _this$state = this.state,\n          current = _this$state.current,\n          override = _this$state.override;\n      var tempLine = isDefined(current) && isDefined(current.end) ? React.createElement(InteractiveStraightLine, {\n        type: type,\n        x1Value: current.start[0],\n        y1Value: current.start[1],\n        x2Value: current.end[0],\n        y2Value: current.end[1],\n        strokeStyle: appearance.strokeStyle,\n        strokeWidth: appearance.strokeWidth\n      }) : null;\n      return React.createElement(\"g\", null, trends.map(function (each, idx) {\n        var eachAppearance = isDefined(each.appearance) ? Object.assign(Object.assign({}, appearance), each.appearance) : appearance;\n        var hoverTextWithDefault = Object.assign(Object.assign({}, TrendLine.defaultProps.hoverText), hoverText);\n        return React.createElement(EachTrendLine, {\n          key: idx,\n          ref: _this2.saveNodeType(idx),\n          index: idx,\n          type: each.type,\n          selected: each.selected,\n          x1Value: getValueFromOverride(override, idx, \"x1Value\", each.start[0]),\n          y1Value: getValueFromOverride(override, idx, \"y1Value\", each.start[1]),\n          x2Value: getValueFromOverride(override, idx, \"x2Value\", each.end[0]),\n          y2Value: getValueFromOverride(override, idx, \"y2Value\", each.end[1]),\n          strokeStyle: eachAppearance.strokeStyle,\n          strokeWidth: eachAppearance.strokeWidth,\n          strokeOpacity: eachAppearance.strokeOpacity,\n          strokeDasharray: eachAppearance.strokeDasharray,\n          edgeStroke: eachAppearance.edgeStroke,\n          edgeFill: eachAppearance.edgeFill,\n          edgeStrokeWidth: eachAppearance.edgeStrokeWidth,\n          r: eachAppearance.r,\n          hoverText: hoverTextWithDefault,\n          onDrag: _this2.handleDragLine,\n          onDragComplete: _this2.handleDragLineComplete,\n          edgeInteractiveCursor: \"react-financial-charts-move-cursor\",\n          lineInteractiveCursor: \"react-financial-charts-move-cursor\"\n        });\n      }), tempLine, React.createElement(MouseLocationIndicator, {\n        enabled: enabled,\n        snap: snap,\n        shouldDisableSnap: shouldDisableSnap,\n        snapTo: snapTo,\n        r: currentPositionRadius,\n        stroke: currentPositionStroke,\n        opacity: currentPositionstrokeOpacity,\n        strokeWidth: currentPositionStrokeWidth,\n        onMouseDown: this.handleStart,\n        onClick: this.handleEnd,\n        onMouseMove: this.handleDrawLine\n      }));\n    }\n  }]);\n\n  return TrendLine;\n}(React.Component);\nTrendLine.defaultProps = {\n  type: \"XLINE\",\n  onStart: noop,\n  onSelect: noop,\n  currentPositionStroke: \"#000000\",\n  currentPositionstrokeOpacity: 1,\n  currentPositionStrokeWidth: 3,\n  currentPositionRadius: 0,\n  shouldDisableSnap: function shouldDisableSnap(e) {\n    return e.button === 2 || e.shiftKey;\n  },\n  hoverText: Object.assign(Object.assign({}, HoverTextNearMouse.defaultProps), {\n    enable: true,\n    bgHeight: \"auto\",\n    bgWidth: \"auto\",\n    text: \"Click to select object\",\n    selectedText: \"\"\n  }),\n  trends: [],\n  appearance: {\n    strokeStyle: \"#000000\",\n    strokeWidth: 1,\n    strokeDasharray: \"Solid\",\n    edgeStrokeWidth: 1,\n    edgeFill: \"#FFFFFF\",\n    edgeStroke: \"#000000\",\n    r: 6\n  }\n};","map":null,"metadata":{},"sourceType":"module"}