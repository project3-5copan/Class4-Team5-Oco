{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from \"react\";\nimport { head, last, noop } from \"@react-financial-charts/core\";\nimport { getXValue } from \"@react-financial-charts/core/lib/utils/ChartDataUtil\";\nimport { isHover, saveNodeType } from \"../utils\";\nimport { ClickableCircle, HoverTextNearMouse, InteractiveStraightLine, generateLine, Text } from \"../components\";\nimport { getNewXY } from \"./EachTrendLine\";\nexport var EachFibRetracement = /*#__PURE__*/function (_React$Component) {\n  _inherits(EachFibRetracement, _React$Component);\n\n  var _super = _createSuper(EachFibRetracement);\n\n  function EachFibRetracement(props) {\n    var _this;\n\n    _classCallCheck(this, EachFibRetracement);\n\n    _this = _super.call(this, props);\n\n    _this.handleEdge2Drag = function (e, moreProps) {\n      var _this$props = _this.props,\n          index = _this$props.index,\n          onDrag = _this$props.onDrag,\n          x1 = _this$props.x1,\n          y1 = _this$props.y1,\n          y2 = _this$props.y2;\n\n      var _getNewXY = getNewXY(moreProps),\n          _getNewXY2 = _slicedToArray(_getNewXY, 1),\n          x2 = _getNewXY2[0];\n\n      onDrag(e, index, {\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2\n      });\n    };\n\n    _this.handleEdge1Drag = function (e, moreProps) {\n      var _this$props2 = _this.props,\n          index = _this$props2.index,\n          onDrag = _this$props2.onDrag,\n          y1 = _this$props2.y1,\n          x2 = _this$props2.x2,\n          y2 = _this$props2.y2;\n\n      var _getNewXY3 = getNewXY(moreProps),\n          _getNewXY4 = _slicedToArray(_getNewXY3, 1),\n          x1 = _getNewXY4[0];\n\n      onDrag(e, index, {\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2\n      });\n    };\n\n    _this.handleLineNSResizeBottom = function (e, moreProps) {\n      var _this$props3 = _this.props,\n          index = _this$props3.index,\n          onDrag = _this$props3.onDrag,\n          x1 = _this$props3.x1,\n          y1 = _this$props3.y1,\n          x2 = _this$props3.x2;\n\n      var _getNewXY5 = getNewXY(moreProps),\n          _getNewXY6 = _slicedToArray(_getNewXY5, 2),\n          y2 = _getNewXY6[1];\n\n      onDrag(e, index, {\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2\n      });\n    };\n\n    _this.handleLineNSResizeTop = function (e, moreProps) {\n      var _this$props4 = _this.props,\n          index = _this$props4.index,\n          onDrag = _this$props4.onDrag,\n          x1 = _this$props4.x1,\n          x2 = _this$props4.x2,\n          y2 = _this$props4.y2;\n\n      var _getNewXY7 = getNewXY(moreProps),\n          _getNewXY8 = _slicedToArray(_getNewXY7, 2),\n          y1 = _getNewXY8[1];\n\n      onDrag(e, index, {\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2\n      });\n    };\n\n    _this.handleLineMove = function (e, moreProps) {\n      var _this$props5 = _this.props,\n          index = _this$props5.index,\n          onDrag = _this$props5.onDrag;\n      var _this$dragStart = _this.dragStart,\n          x1Value = _this$dragStart.x1,\n          y1Value = _this$dragStart.y1,\n          x2Value = _this$dragStart.x2,\n          y2Value = _this$dragStart.y2;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          xAccessor = moreProps.xAccessor,\n          fullData = moreProps.fullData;\n      var startPos = moreProps.startPos,\n          mouseXY = moreProps.mouseXY;\n      var x1 = xScale(x1Value);\n      var y1 = yScale(y1Value);\n      var x2 = xScale(x2Value);\n      var y2 = yScale(y2Value);\n      var dx = startPos[0] - mouseXY[0];\n      var dy = startPos[1] - mouseXY[1];\n      var newX1Value = getXValue(xScale, xAccessor, [x1 - dx, y1 - dy], fullData);\n      var newY1Value = yScale.invert(y1 - dy);\n      var newX2Value = getXValue(xScale, xAccessor, [x2 - dx, y2 - dy], fullData);\n      var newY2Value = yScale.invert(y2 - dy);\n      onDrag(e, index, {\n        x1: newX1Value,\n        y1: newY1Value,\n        x2: newX2Value,\n        y2: newY2Value\n      });\n    };\n\n    _this.handleLineDragStart = function () {\n      var _this$props6 = _this.props,\n          x1 = _this$props6.x1,\n          y1 = _this$props6.y1,\n          x2 = _this$props6.x2,\n          y2 = _this$props6.y2;\n      _this.dragStart = {\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2\n      };\n    };\n\n    _this.handleHover = function (_, moreProps) {\n      if (_this.state.hover !== moreProps.hovering) {\n        _this.setState({\n          hover: moreProps.hovering\n        });\n      }\n    };\n\n    _this.isHover = isHover.bind(_assertThisInitialized(_this));\n    _this.saveNodeType = saveNodeType.bind(_assertThisInitialized(_this));\n    _this.state = {\n      hover: false\n    };\n    return _this;\n  }\n\n  _createClass(EachFibRetracement, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props7 = this.props,\n          x1 = _this$props7.x1,\n          x2 = _this$props7.x2,\n          y1 = _this$props7.y1,\n          y2 = _this$props7.y2;\n      var _this$props8 = this.props,\n          interactive = _this$props8.interactive,\n          yDisplayFormat = _this$props8.yDisplayFormat,\n          type = _this$props8.type,\n          appearance = _this$props8.appearance;\n      var strokeStyle = appearance.strokeStyle,\n          strokeWidth = appearance.strokeWidth;\n      var fontFamily = appearance.fontFamily,\n          fontSize = appearance.fontSize,\n          fontFill = appearance.fontFill;\n      var edgeStroke = appearance.edgeStroke,\n          edgeFill = appearance.edgeFill,\n          nsEdgeFill = appearance.nsEdgeFill,\n          edgeStrokeWidth = appearance.edgeStrokeWidth,\n          r = appearance.r;\n      var _this$props9 = this.props,\n          hoverText = _this$props9.hoverText,\n          selected = _this$props9.selected;\n      var hover = this.state.hover;\n      var onDragComplete = this.props.onDragComplete;\n      var lines = helper({\n        x1: x1,\n        x2: x2,\n        y1: y1,\n        y2: y2\n      });\n\n      var hoverTextEnabled = hoverText.enable,\n          hoverTextSelected = hoverText.selectedText,\n          hoverTextUnselected = hoverText.text,\n          restHoverTextProps = __rest(hoverText, [\"enable\", \"selectedText\", \"text\"]);\n\n      var lineType = type === \"EXTEND\" ? \"XLINE\" : type === \"BOUND\" ? \"LINE\" : \"RAY\";\n      var dir = head(lines).y1 > last(lines).y1 ? 3 : -1.3;\n      return React.createElement(\"g\", null, lines.map(function (line, j) {\n        var text = \"\".concat(yDisplayFormat(line.y), \" (\").concat(line.percent.toFixed(2), \"%)\");\n\n        var xyProvider = function xyProvider(_ref) {\n          var xScale = _ref.xScale,\n              chartConfig = _ref.chartConfig;\n          var yScale = chartConfig.yScale;\n\n          var _generateLine = generateLine({\n            type: lineType,\n            start: [line.x1, line.y],\n            end: [line.x2, line.y],\n            xScale: xScale,\n            yScale: yScale\n          }),\n              lineX1 = _generateLine.x1,\n              lineY1 = _generateLine.y1,\n              lineX2 = _generateLine.x2;\n\n          var x = xScale(Math.min(lineX1, lineX2)) + 10;\n          var y = yScale(lineY1) + dir * 4;\n          return [x, y];\n        };\n\n        var firstOrLast = j === 0 || j === lines.length - 1;\n        var interactiveCursorClass = firstOrLast ? \"react-financial-charts-ns-resize-cursor\" : \"react-financial-charts-move-cursor\";\n        var interactiveEdgeCursorClass = firstOrLast ? \"react-financial-charts-ns-resize-cursor\" : \"react-financial-charts-ew-resize-cursor\";\n        var dragHandler = j === 0 ? _this2.handleLineNSResizeTop : j === lines.length - 1 ? _this2.handleLineNSResizeBottom : _this2.handleLineMove;\n        var edge1DragHandler = j === 0 ? _this2.handleLineNSResizeTop : j === lines.length - 1 ? _this2.handleLineNSResizeBottom : _this2.handleEdge1Drag;\n        var edge2DragHandler = j === 0 ? _this2.handleLineNSResizeTop : j === lines.length - 1 ? _this2.handleLineNSResizeBottom : _this2.handleEdge2Drag;\n        var hoverHandler = interactive ? {\n          onHover: _this2.handleHover,\n          onUnHover: _this2.handleHover\n        } : {};\n        return React.createElement(\"g\", {\n          key: j\n        }, React.createElement(InteractiveStraightLine, Object.assign({\n          ref: _this2.saveNodeType(\"line_\".concat(j)),\n          selected: selected || hover\n        }, hoverHandler, {\n          type: lineType,\n          x1Value: line.x1,\n          y1Value: line.y,\n          x2Value: line.x2,\n          y2Value: line.y,\n          strokeStyle: strokeStyle,\n          strokeWidth: hover || selected ? strokeWidth + 1 : strokeWidth,\n          interactiveCursorClass: interactiveCursorClass,\n          onDragStart: _this2.handleLineDragStart,\n          onDrag: dragHandler,\n          onDragComplete: onDragComplete\n        })), React.createElement(Text, {\n          selected: selected,\n          xyProvider: xyProvider,\n          fontFamily: fontFamily,\n          fontSize: fontSize,\n          fillStyle: fontFill\n        }, text), React.createElement(ClickableCircle, {\n          ref: _this2.saveNodeType(\"edge1\"),\n          show: selected || hover,\n          cx: line.x1,\n          cy: line.y,\n          r: r,\n          fillStyle: firstOrLast ? nsEdgeFill : edgeFill,\n          strokeStyle: edgeStroke,\n          strokeWidth: edgeStrokeWidth,\n          interactiveCursorClass: interactiveEdgeCursorClass,\n          onDrag: edge1DragHandler,\n          onDragComplete: onDragComplete\n        }), React.createElement(ClickableCircle, {\n          ref: _this2.saveNodeType(\"edge2\"),\n          show: selected || hover,\n          cx: line.x2,\n          cy: line.y,\n          r: r,\n          fillStyle: firstOrLast ? nsEdgeFill : edgeFill,\n          strokeStyle: edgeStroke,\n          strokeWidth: edgeStrokeWidth,\n          interactiveCursorClass: interactiveEdgeCursorClass,\n          onDrag: edge2DragHandler,\n          onDragComplete: onDragComplete\n        }));\n      }), React.createElement(HoverTextNearMouse, Object.assign({\n        show: hoverTextEnabled && hover\n      }, restHoverTextProps, {\n        text: selected ? hoverTextSelected : hoverTextUnselected\n      })));\n    }\n  }]);\n\n  return EachFibRetracement;\n}(React.Component);\nEachFibRetracement.defaultProps = {\n  yDisplayFormat: function yDisplayFormat(d) {\n    return d.toFixed(2);\n  },\n  interactive: true,\n  appearance: {\n    strokeStyle: \"#000000\",\n    strokeWidth: 1,\n    fontFamily: \"-apple-system, system-ui, Roboto, 'Helvetica Neue', Ubuntu, sans-serif\",\n    fontSize: 10,\n    fontFill: \"#000000\",\n    edgeStroke: \"#000000\",\n    edgeFill: \"#FFFFFF\",\n    nsEdgeFill: \"#000000\",\n    edgeStrokeWidth: 1,\n    r: 5\n  },\n  selected: false,\n  onDrag: noop,\n  hoverText: {\n    enable: false\n  }\n};\n\nfunction helper(_ref2) {\n  var x1 = _ref2.x1,\n      y1 = _ref2.y1,\n      x2 = _ref2.x2,\n      y2 = _ref2.y2;\n  var dy = y2 - y1;\n  var retracements = [100, 61.8, 50, 38.2, 23.6, 0].map(function (each) {\n    return {\n      percent: each,\n      x1: x1,\n      x2: x2,\n      y: y2 - each / 100 * dy\n    };\n  });\n  return retracements;\n}","map":null,"metadata":{},"sourceType":"module"}