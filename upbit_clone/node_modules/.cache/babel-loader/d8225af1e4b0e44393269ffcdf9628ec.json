{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from \"react\";\nimport { isDefined, getAxisCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nexport var RenkoSeries = /*#__PURE__*/function (_React$Component) {\n  _inherits(RenkoSeries, _React$Component);\n\n  var _super = _createSuper(RenkoSeries);\n\n  function RenkoSeries() {\n    var _this;\n\n    _classCallCheck(this, RenkoSeries);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var xAccessor = moreProps.xAccessor,\n          xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData;\n\n      var renko = _this.getRenko(plotData, xScale, xAccessor, yScale);\n\n      renko.forEach(function (d) {\n        var fillStyle = d.fillStyle,\n            strokeStyle = d.strokeStyle;\n        ctx.beginPath();\n\n        if (strokeStyle !== undefined) {\n          ctx.strokeStyle = strokeStyle;\n        }\n\n        if (fillStyle !== undefined) {\n          ctx.fillStyle = fillStyle;\n        }\n\n        ctx.rect(d.x, d.y, d.width, d.height);\n        ctx.closePath();\n        ctx.fill();\n      });\n    };\n\n    _this.getRenko = function (plotData, xScale, xAccessor, yScale) {\n      var _this$props = _this.props,\n          fill = _this$props.fill,\n          stroke = _this$props.stroke,\n          _this$props$yAccessor = _this$props.yAccessor,\n          yAccessor = _this$props$yAccessor === void 0 ? RenkoSeries.defaultProps.yAccessor : _this$props$yAccessor;\n      var width = xScale(xAccessor(plotData[plotData.length - 1])) - xScale(xAccessor(plotData[0]));\n      var candleWidth = width / (plotData.length - 1);\n      return plotData.filter(function (d) {\n        return isDefined(yAccessor(d).close);\n      }).map(function (d) {\n        var ohlc = yAccessor(d);\n        var x = xScale(xAccessor(d)) - 0.5 * candleWidth;\n        var y = yScale(Math.max(ohlc.open, ohlc.close));\n        var height = Math.abs(yScale(ohlc.open) - yScale(ohlc.close));\n        var fillStyle = d.fullyFormed ? ohlc.open <= ohlc.close ? fill === null || fill === void 0 ? void 0 : fill.up : fill === null || fill === void 0 ? void 0 : fill.down : fill === null || fill === void 0 ? void 0 : fill.partial;\n        var strokeStyle = d.fullyFormed ? ohlc.open <= ohlc.close ? stroke === null || stroke === void 0 ? void 0 : stroke.up : stroke === null || stroke === void 0 ? void 0 : stroke.down : undefined;\n        return {\n          fillStyle: fillStyle,\n          height: height,\n          strokeStyle: strokeStyle,\n          width: candleWidth,\n          x: x,\n          y: y\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(RenkoSeries, [{\n    key: \"render\",\n    value: function render() {\n      var clip = this.props.clip;\n      return React.createElement(GenericChartComponent, {\n        clip: clip,\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: getAxisCanvas,\n        drawOn: [\"pan\"]\n      });\n    }\n  }]);\n\n  return RenkoSeries;\n}(React.Component);\nRenkoSeries.defaultProps = {\n  clip: true,\n  fill: {\n    up: \"#26a69a\",\n    down: \"#ef5350\",\n    partial: \"#4682B4\"\n  },\n  stroke: {\n    up: \"none\",\n    down: \"none\"\n  },\n  yAccessor: function yAccessor(d) {\n    return {\n      open: d.open,\n      high: d.high,\n      low: d.low,\n      close: d.close\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}