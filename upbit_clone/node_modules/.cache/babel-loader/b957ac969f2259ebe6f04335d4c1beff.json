{"ast":null,"code":"import _toConsumableArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from \"react\";\nimport { isDefined, isNotDefined, noop } from \"@react-financial-charts/core\";\nimport { HoverTextNearMouse, MouseLocationIndicator } from \"./components\";\nimport { getSlope, getYIntercept } from \"./components/InteractiveStraightLine\";\nimport { isHoverForInteractiveType, saveNodeType, terminate } from \"./utils\";\nimport { EachEquidistantChannel } from \"./wrapper\";\nexport var EquidistantChannel = /*#__PURE__*/function (_React$Component) {\n  _inherits(EquidistantChannel, _React$Component);\n\n  var _super = _createSuper(EquidistantChannel);\n\n  function EquidistantChannel(props) {\n    var _this;\n\n    _classCallCheck(this, EquidistantChannel);\n\n    _this = _super.call(this, props);\n\n    _this.handleDragChannel = function (_, index, newXYValue) {\n      _this.setState({\n        override: Object.assign({\n          index: index\n        }, newXYValue)\n      });\n    };\n\n    _this.handleDragChannelComplete = function (e, moreProps) {\n      var override = _this.state.override;\n      var channels = _this.props.channels;\n\n      if (isDefined(override)) {\n        var index = override.index,\n            rest = __rest(override, [\"index\"]);\n\n        var newChannels = channels.map(function (each, idx) {\n          return idx === index ? Object.assign(Object.assign(Object.assign({}, each), rest), {\n            selected: true\n          }) : each;\n        });\n\n        _this.setState({\n          override: null\n        }, function () {\n          var onComplete = _this.props.onComplete;\n\n          if (onComplete !== undefined) {\n            onComplete(e, newChannels, moreProps);\n          }\n        });\n      }\n    };\n\n    _this.handleStart = function (_, xyValue) {\n      var current = _this.state.current;\n\n      if (isNotDefined(current) || isNotDefined(current.startXY)) {\n        _this.mouseMoved = false;\n\n        _this.setState({\n          current: {\n            startXY: xyValue,\n            endXY: null\n          }\n        }, function () {\n          var onStart = _this.props.onStart;\n\n          if (onStart !== undefined) {\n            onStart();\n          }\n        });\n      }\n    };\n\n    _this.handleEnd = function (e, _, moreProps) {\n      var current = _this.state.current;\n      var _this$props = _this.props,\n          channels = _this$props.channels,\n          appearance = _this$props.appearance;\n\n      if (_this.mouseMoved && isDefined(current) && isDefined(current.startXY)) {\n        if (isNotDefined(current.dy)) {\n          _this.setState({\n            current: Object.assign(Object.assign({}, current), {\n              dy: 0\n            })\n          });\n        } else {\n          var newChannels = [].concat(_toConsumableArray(channels.map(function (d) {\n            return Object.assign(Object.assign({}, d), {\n              selected: false\n            });\n          })), [Object.assign(Object.assign({}, current), {\n            selected: true,\n            appearance: appearance\n          })]);\n\n          _this.setState({\n            current: null\n          }, function () {\n            var onComplete = _this.props.onComplete;\n\n            if (onComplete !== undefined) {\n              onComplete(e, newChannels, moreProps);\n            }\n          });\n        }\n      }\n    };\n\n    _this.handleDrawChannel = function (_, xyValue) {\n      var current = _this.state.current;\n\n      if (isDefined(current) && isDefined(current.startXY)) {\n        _this.mouseMoved = true;\n\n        if (isNotDefined(current.dy)) {\n          _this.setState({\n            current: {\n              startXY: current.startXY,\n              endXY: xyValue\n            }\n          });\n        } else {\n          var m = getSlope(current.startXY, current.endXY);\n          var b = getYIntercept(m, current.endXY); // @ts-ignore\n\n          var y = m * xyValue[0] + b;\n          var dy = xyValue[1] - y;\n\n          _this.setState({\n            current: Object.assign(Object.assign({}, current), {\n              dy: dy\n            })\n          });\n        }\n      }\n    };\n\n    _this.terminate = terminate.bind(_assertThisInitialized(_this));\n    _this.saveNodeType = saveNodeType.bind(_assertThisInitialized(_this));\n    _this.getSelectionState = isHoverForInteractiveType(\"channels\").bind(_assertThisInitialized(_this));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(EquidistantChannel, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          appearance = _this$props2.appearance,\n          channels = _this$props2.channels,\n          currentPositionOpacity = _this$props2.currentPositionOpacity,\n          _this$props2$currentP = _this$props2.currentPositionRadius,\n          currentPositionRadius = _this$props2$currentP === void 0 ? EquidistantChannel.defaultProps.currentPositionRadius : _this$props2$currentP,\n          currentPositionStroke = _this$props2.currentPositionStroke,\n          currentPositionStrokeWidth = _this$props2.currentPositionStrokeWidth,\n          enabled = _this$props2.enabled,\n          hoverText = _this$props2.hoverText;\n      var _this$state = this.state,\n          current = _this$state.current,\n          override = _this$state.override;\n      var overrideIndex = isDefined(override) ? override.index : null;\n      var tempChannel = isDefined(current) && isDefined(current.endXY) ? React.createElement(EachEquidistantChannel, Object.assign({\n        interactive: false\n      }, current, {\n        appearance: appearance,\n        hoverText: hoverText\n      })) : null;\n      return React.createElement(\"g\", null, channels.map(function (each, idx) {\n        var eachAppearance = isDefined(each.appearance) ? Object.assign(Object.assign({}, appearance), each.appearance) : appearance;\n        return React.createElement(EachEquidistantChannel, Object.assign({\n          key: idx,\n          ref: _this2.saveNodeType(idx),\n          index: idx,\n          selected: each.selected,\n          hoverText: hoverText\n        }, idx === overrideIndex ? override : each, {\n          appearance: eachAppearance,\n          onDrag: _this2.handleDragChannel,\n          onDragComplete: _this2.handleDragChannelComplete\n        }));\n      }), tempChannel, React.createElement(MouseLocationIndicator, {\n        enabled: enabled,\n        snap: false,\n        r: currentPositionRadius,\n        stroke: currentPositionStroke,\n        opacity: currentPositionOpacity,\n        strokeWidth: currentPositionStrokeWidth,\n        onMouseDown: this.handleStart,\n        onClick: this.handleEnd,\n        onMouseMove: this.handleDrawChannel\n      }));\n    }\n  }]);\n\n  return EquidistantChannel;\n}(React.Component);\nEquidistantChannel.defaultProps = {\n  onSelect: noop,\n  currentPositionStroke: \"#000000\",\n  currentPositionOpacity: 1,\n  currentPositionStrokeWidth: 3,\n  currentPositionRadius: 4,\n  hoverText: Object.assign(Object.assign({}, HoverTextNearMouse.defaultProps), {\n    enable: true,\n    bgHeight: 18,\n    bgWidth: 120,\n    text: \"Click to select object\"\n  }),\n  channels: [],\n  appearance: {\n    stroke: \"#000000\",\n    strokeOpacity: 1,\n    strokeWidth: 1,\n    fill: \"#8AAFE2\",\n    fillOpacity: 0.7,\n    edgeStroke: \"#000000\",\n    edgeFill: \"#FFFFFF\",\n    edgeFill2: \"#250B98\",\n    edgeStrokeWidth: 1,\n    r: 5\n  }\n};","map":null,"metadata":{},"sourceType":"module"}