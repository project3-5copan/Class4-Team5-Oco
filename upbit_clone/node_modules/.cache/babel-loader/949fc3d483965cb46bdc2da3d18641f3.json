{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { functor, getAxisCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nimport { group } from \"d3-array\";\nimport * as React from \"react\";\nexport var ScatterSeries = /*#__PURE__*/function (_React$Component) {\n  _inherits(ScatterSeries, _React$Component);\n\n  var _super = _createSuper(ScatterSeries);\n\n  function ScatterSeries() {\n    var _this;\n\n    _classCallCheck(this, ScatterSeries);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var points = _this.getMarkers(moreProps);\n\n      var markerProps = _this.props.markerProps;\n      var nest = group(points, // @ts-ignore\n      function (d) {\n        return d.fillStyle;\n      }, // @ts-ignore\n      function (d) {\n        return d.strokeStyle;\n      });\n      nest.forEach(function (fillValues, fillKey) {\n        if (fillKey !== \"none\") {\n          // @ts-ignore\n          ctx.fillStyle = fillKey;\n        }\n\n        fillValues.forEach(function (strokeValues) {\n          // @ts-ignore\n          strokeValues.forEach(function (point) {\n            var marker = point.marker;\n            marker.drawOnCanvas(Object.assign(Object.assign(Object.assign({}, marker.defaultProps), markerProps), {\n              fillStyle: fillKey\n            }), point, ctx);\n          });\n        });\n      });\n    };\n\n    _this.getMarkers = function (moreProps) {\n      var _this$props = _this.props,\n          yAccessor = _this$props.yAccessor,\n          markerProvider = _this$props.markerProvider,\n          markerProps = _this$props.markerProps;\n      var xAccessor = moreProps.xAccessor,\n          xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          plotData = moreProps.plotData;\n      var Marker = _this.props.marker;\n\n      if (!(markerProvider || Marker)) {\n        throw new Error(\"required prop, either marker or markerProvider missing\");\n      }\n\n      return plotData.map(function (d) {\n        var yValue = yAccessor(d);\n\n        if (yValue === undefined) {\n          return undefined;\n        }\n\n        var xValue = xAccessor(d);\n\n        if (markerProvider) {\n          Marker = markerProvider(d);\n        }\n\n        var mProps = Object.assign(Object.assign({}, Marker.defaultProps), markerProps);\n        var fill = functor(mProps.fillStyle);\n        var stroke = functor(mProps.strokeStyle);\n        return {\n          x: xScale(xValue),\n          y: yScale(yValue),\n          fillStyle: fill(d),\n          strokeStyle: stroke(d),\n          datum: d,\n          marker: Marker\n        };\n      }).filter(function (marker) {\n        return marker !== undefined;\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ScatterSeries, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(GenericChartComponent, {\n        canvasDraw: this.drawOnCanvas,\n        canvasToDraw: getAxisCanvas,\n        drawOn: [\"pan\"]\n      });\n    }\n  }]);\n\n  return ScatterSeries;\n}(React.Component);","map":null,"metadata":{},"sourceType":"module"}