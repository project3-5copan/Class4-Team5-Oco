{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { mappedSlidingWindow } from \"../utils\";\nimport { SAR as defaultOptions } from \"./defaultOptionsForComputation\";\n\nfunction calc(prev, now) {\n  var risingSar = prev.risingSar + prev.af * (prev.risingEp - prev.risingSar);\n  var fallingSar = prev.fallingSar - prev.af * (prev.fallingSar - prev.fallingEp);\n  var risingEp = Math.max(prev.risingEp, now.high);\n  var fallingEp = Math.min(prev.fallingEp, now.low);\n  return {\n    risingSar: risingSar,\n    fallingSar: fallingSar,\n    risingEp: risingEp,\n    fallingEp: fallingEp\n  };\n}\n\nexport default function () {\n  var options = defaultOptions;\n\n  var calculator = function calculator(data) {\n    var _options = options,\n        accelerationFactor = _options.accelerationFactor,\n        maxAccelerationFactor = _options.maxAccelerationFactor;\n    var algorithm = mappedSlidingWindow().windowSize(2) // @ts-ignore\n    .undefinedValue(function (_ref) {\n      var high = _ref.high,\n          low = _ref.low;\n      return {\n        risingSar: low,\n        risingEp: high,\n        fallingSar: high,\n        fallingEp: low,\n        af: accelerationFactor\n      };\n    }).accumulator(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          prev = _ref3[0],\n          now = _ref3[1];\n\n      var _calc = calc(prev, now),\n          risingSar = _calc.risingSar,\n          fallingSar = _calc.fallingSar,\n          risingEp = _calc.risingEp,\n          fallingEp = _calc.fallingEp;\n\n      if (prev.use === undefined && risingSar > now.low && fallingSar < now.high) {\n        return {\n          risingSar: risingSar,\n          fallingSar: fallingSar,\n          risingEp: risingEp,\n          fallingEp: fallingEp\n        };\n      }\n\n      var use = prev.use !== undefined ? prev.use === \"rising\" ? risingSar > now.low ? \"falling\" : \"rising\" : fallingSar < now.high ? \"rising\" : \"falling\" : risingSar > now.low ? \"falling\" : \"rising\";\n      var current = prev.use === use ? {\n        af: Math.min(maxAccelerationFactor, prev.af + accelerationFactor),\n        fallingEp: fallingEp,\n        risingEp: risingEp,\n        fallingSar: fallingSar,\n        risingSar: risingSar\n      } : {\n        af: accelerationFactor,\n        fallingEp: now.low,\n        risingEp: now.high,\n        fallingSar: Math.max(prev.risingEp, now.high),\n        risingSar: Math.min(prev.fallingEp, now.low)\n      };\n      var date = now.date,\n          high = now.high,\n          low = now.low;\n      return Object.assign(Object.assign({\n        date: date,\n        high: high,\n        low: low\n      }, current), {\n        use: use,\n        sar: use === \"falling\" ? current.fallingSar : current.risingSar\n      });\n    });\n    var calculatedData = algorithm(data).map(function (d) {\n      return d.sar;\n    });\n    return calculatedData;\n  };\n\n  calculator.undefinedLength = function () {\n    return 1;\n  };\n\n  calculator.options = function (newOptions) {\n    if (newOptions === undefined) {\n      return options;\n    }\n\n    options = Object.assign(Object.assign({}, defaultOptions), newOptions);\n    return calculator;\n  };\n\n  return calculator;\n}","map":null,"metadata":{},"sourceType":"module"}