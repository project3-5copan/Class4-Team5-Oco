{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from \"react\";\nimport { getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nexport var InteractiveText = /*#__PURE__*/function (_React$Component) {\n  _inherits(InteractiveText, _React$Component);\n\n  var _super = _createSuper(InteractiveText);\n\n  function InteractiveText() {\n    var _this;\n\n    _classCallCheck(this, InteractiveText);\n\n    _this = _super.apply(this, arguments);\n    _this.calculateTextWidth = true;\n\n    _this.isHover = function (moreProps) {\n      var onHover = _this.props.onHover;\n\n      if (onHover !== undefined && _this.textWidth !== undefined && !_this.calculateTextWidth) {\n        var _this$helper = _this.helper(moreProps, _this.textWidth),\n            rect = _this$helper.rect;\n\n        var _moreProps$mouseXY = _slicedToArray(moreProps.mouseXY, 2),\n            x = _moreProps$mouseXY[0],\n            y = _moreProps$mouseXY[1];\n\n        if (x >= rect.x && y >= rect.y && x <= rect.x + rect.width && y <= rect.y + rect.height) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var _a;\n\n      var _this$props = _this.props,\n          bgFillStyle = _this$props.bgFillStyle,\n          bgStrokeWidth = _this$props.bgStrokeWidth,\n          bgStroke = _this$props.bgStroke,\n          textFill = _this$props.textFill,\n          fontFamily = _this$props.fontFamily,\n          fontSize = _this$props.fontSize,\n          fontStyle = _this$props.fontStyle,\n          fontWeight = _this$props.fontWeight,\n          text = _this$props.text;\n\n      if (_this.calculateTextWidth) {\n        ctx.font = \"\".concat(fontStyle, \" \").concat(fontWeight, \" \").concat(fontSize, \"px \").concat(fontFamily);\n\n        var _ctx$measureText = ctx.measureText(text),\n            width = _ctx$measureText.width;\n\n        _this.textWidth = width;\n        _this.calculateTextWidth = false;\n      }\n\n      var selected = _this.props.selected;\n\n      var _this$helper2 = _this.helper(moreProps, (_a = _this.textWidth) !== null && _a !== void 0 ? _a : 0),\n          x = _this$helper2.x,\n          y = _this$helper2.y,\n          rect = _this$helper2.rect;\n\n      ctx.fillStyle = bgFillStyle;\n      ctx.beginPath();\n      ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n\n      if (selected) {\n        ctx.strokeStyle = bgStroke;\n        ctx.lineWidth = bgStrokeWidth;\n        ctx.strokeRect(rect.x, rect.y, rect.width, rect.height);\n      }\n\n      ctx.fillStyle = textFill;\n      ctx.textBaseline = \"middle\";\n      ctx.textAlign = \"center\";\n      ctx.font = \"\".concat(fontStyle, \" \").concat(fontWeight, \" \").concat(fontSize, \"px \").concat(fontFamily);\n      ctx.beginPath();\n      ctx.fillText(text, x, y);\n    };\n\n    _this.helper = function (moreProps, textWidth) {\n      var _this$props2 = _this.props,\n          position = _this$props2.position,\n          fontSize = _this$props2.fontSize;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale;\n\n      var _position = _slicedToArray(position, 2),\n          xValue = _position[0],\n          yValue = _position[1];\n\n      var x = xScale(xValue);\n      var y = yScale(yValue);\n      var rect = {\n        x: x - textWidth / 2 - fontSize,\n        y: y - fontSize,\n        width: textWidth + fontSize * 2,\n        height: fontSize * 2\n      };\n      return {\n        x: x,\n        y: y,\n        rect: rect\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(InteractiveText, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(previousProps) {\n      this.calculateTextWidth = previousProps.text !== this.props.text || previousProps.fontStyle !== this.props.fontStyle || previousProps.fontWeight !== this.props.fontWeight || previousProps.fontSize !== this.props.fontSize || previousProps.fontFamily !== this.props.fontFamily;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          selected = _this$props3.selected,\n          interactiveCursorClass = _this$props3.interactiveCursorClass;\n      var _this$props4 = this.props,\n          onHover = _this$props4.onHover,\n          onUnHover = _this$props4.onUnHover;\n      var _this$props5 = this.props,\n          onDragStart = _this$props5.onDragStart,\n          onDrag = _this$props5.onDrag,\n          onDragComplete = _this$props5.onDragComplete;\n      return React.createElement(GenericChartComponent, {\n        isHover: this.isHover,\n        canvasToDraw: getMouseCanvas,\n        canvasDraw: this.drawOnCanvas,\n        interactiveCursorClass: interactiveCursorClass,\n        selected: selected,\n        onDragStart: onDragStart,\n        onDrag: onDrag,\n        onDragComplete: onDragComplete,\n        onHover: onHover,\n        onUnHover: onUnHover,\n        drawOn: [\"mousemove\", \"mouseleave\", \"pan\", \"drag\"]\n      });\n    }\n  }]);\n\n  return InteractiveText;\n}(React.Component);\nInteractiveText.defaultProps = {\n  type: \"SD\",\n  fontWeight: \"normal\",\n  tolerance: 4,\n  selected: false\n};","map":null,"metadata":{},"sourceType":"module"}