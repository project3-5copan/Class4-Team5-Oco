{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { GenericComponent, functor } from \"@react-financial-charts/core\";\nimport * as PropTypes from \"prop-types\";\nimport * as React from \"react\";\nexport var Label = /*#__PURE__*/function (_React$Component) {\n  _inherits(Label, _React$Component);\n\n  var _super = _createSuper(Label);\n\n  function Label() {\n    var _this;\n\n    _classCallCheck(this, Label);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      ctx.save();\n      var _this$props = _this.props,\n          _this$props$textAlign = _this$props.textAlign,\n          textAlign = _this$props$textAlign === void 0 ? \"center\" : _this$props$textAlign,\n          fontFamily = _this$props.fontFamily,\n          fontSize = _this$props.fontSize,\n          fontWeight = _this$props.fontWeight,\n          rotate = _this$props.rotate;\n      var _this$context = _this.context,\n          canvasOriginX = _this$context.canvasOriginX,\n          canvasOriginY = _this$context.canvasOriginY,\n          margin = _this$context.margin,\n          ratio = _this$context.ratio;\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.scale(ratio, ratio);\n\n      if (canvasOriginX !== undefined) {\n        ctx.translate(canvasOriginX, canvasOriginY);\n      } else {\n        ctx.translate(margin.left + 0.5 * ratio, margin.top + 0.5 * ratio);\n      }\n\n      var xScale = moreProps.xScale,\n          chartConfig = moreProps.chartConfig,\n          xAccessor = moreProps.xAccessor;\n      var yScale = Array.isArray(chartConfig) ? undefined : chartConfig.yScale;\n\n      var _this$helper = _this.helper(moreProps, xAccessor, xScale, yScale),\n          xPos = _this$helper.xPos,\n          yPos = _this$helper.yPos,\n          fillStyle = _this$helper.fillStyle,\n          text = _this$helper.text;\n\n      ctx.save();\n      ctx.translate(xPos, yPos);\n\n      if (rotate !== undefined) {\n        var radians = rotate / 180 * Math.PI;\n        ctx.rotate(radians);\n      }\n\n      if (fontFamily !== undefined) {\n        ctx.font = \"\".concat(fontWeight, \" \").concat(fontSize, \"px \").concat(fontFamily);\n      }\n\n      if (fillStyle !== undefined) {\n        ctx.fillStyle = fillStyle;\n      }\n\n      if (textAlign !== undefined) {\n        ctx.textAlign = textAlign;\n      }\n\n      ctx.beginPath();\n      ctx.fillText(text, 0, 0);\n      ctx.restore();\n    };\n\n    _this.helper = function (moreProps, xAccessor, xScale, yScale) {\n      var _this$props2 = _this.props,\n          x = _this$props2.x,\n          y = _this$props2.y,\n          datum = _this$props2.datum,\n          fillStyle = _this$props2.fillStyle,\n          text = _this$props2.text;\n      var plotData = moreProps.plotData;\n      var xFunc = functor(x);\n      var yFunc = functor(y);\n      var _ref = [xFunc({\n        xScale: xScale,\n        xAccessor: xAccessor,\n        datum: datum,\n        plotData: plotData\n      }), yFunc({\n        yScale: yScale,\n        datum: datum,\n        plotData: plotData\n      })],\n          xPos = _ref[0],\n          yPos = _ref[1];\n      return {\n        xPos: xPos,\n        yPos: yPos,\n        text: functor(text)(datum),\n        fillStyle: functor(fillStyle)(datum)\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(Label, [{\n    key: \"render\",\n    value: function render() {\n      var selectCanvas = this.props.selectCanvas;\n      return React.createElement(GenericComponent, {\n        canvasToDraw: selectCanvas,\n        canvasDraw: this.drawOnCanvas,\n        drawOn: []\n      });\n    }\n  }]);\n\n  return Label;\n}(React.Component);\nLabel.defaultProps = {\n  fontFamily: \"-apple-system, system-ui, Roboto, 'Helvetica Neue', Ubuntu, sans-serif\",\n  fontSize: 64,\n  fontWeight: \"bold\",\n  fillStyle: \"#dcdcdc\",\n  rotate: 0,\n  x: function x(_ref2) {\n    var xScale = _ref2.xScale,\n        xAccessor = _ref2.xAccessor,\n        datum = _ref2.datum;\n    return xScale(xAccessor(datum));\n  },\n  selectCanvas: function selectCanvas(canvases) {\n    return canvases.bg;\n  }\n};\nLabel.contextTypes = {\n  canvasOriginX: PropTypes.number,\n  canvasOriginY: PropTypes.number,\n  margin: PropTypes.object.isRequired,\n  ratio: PropTypes.number.isRequired\n};","map":null,"metadata":{},"sourceType":"module"}