{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { max, sum } from \"d3-array\";\nimport * as PropTypes from \"prop-types\";\nimport * as React from \"react\";\nimport { first, isDefined, GenericComponent, last } from \"@react-financial-charts/core\";\nvar PADDING = 4;\nvar X = 8;\nvar Y = 8;\n\nvar roundRect = function roundRect(ctx, x, y, width, height, radius) {\n  ctx.beginPath();\n  ctx.moveTo(x + radius, y);\n  ctx.lineTo(x + width - radius, y);\n  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n  ctx.lineTo(x + width, y + height - radius);\n  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n  ctx.lineTo(x + radius, y + height);\n  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n  ctx.lineTo(x, y + radius);\n  ctx.quadraticCurveTo(x, y, x + radius, y);\n  ctx.closePath();\n};\n\nvar defaultBackgroundShapeCanvas = function defaultBackgroundShapeCanvas(props, _ref, ctx) {\n  var width = _ref.width,\n      height = _ref.height;\n  var toolTipFillStyle = props.toolTipFillStyle,\n      toolTipStrokeStyle = props.toolTipStrokeStyle;\n  ctx.beginPath();\n  roundRect(ctx, 0, 0, width, height, 4);\n\n  if (toolTipFillStyle !== undefined) {\n    ctx.fillStyle = toolTipFillStyle;\n    ctx.shadowColor = \"#898\";\n    ctx.shadowBlur = 4;\n    ctx.fill();\n    ctx.shadowBlur = 0;\n  }\n\n  if (toolTipStrokeStyle !== undefined) {\n    ctx.strokeStyle = toolTipStrokeStyle;\n    ctx.stroke();\n  }\n};\n\nvar defaultTooltipCanvas = function defaultTooltipCanvas(props, content, ctx) {\n  var _a, _b;\n\n  var _props$fontSize = props.fontSize,\n      fontSize = _props$fontSize === void 0 ? 14 : _props$fontSize,\n      fontFamily = props.fontFamily,\n      fontFill = props.fontFill;\n  var startY = Y + fontSize * 0.9;\n  ctx.font = \"bold \".concat(fontSize, \"px \").concat(fontFamily);\n\n  if (fontFill !== undefined) {\n    ctx.fillStyle = fontFill;\n  }\n\n  ctx.textAlign = \"left\";\n  ctx.fillText(content.x, X, startY);\n  var maxLabel = (_a = max(content.y, function (y) {\n    return ctx.measureText(y.label).width;\n  })) !== null && _a !== void 0 ? _a : 0;\n\n  for (var i = 0; i < content.y.length; i++) {\n    var y = content.y[i];\n    var textY = (i + 1) * PADDING + startY + fontSize * (i + 1);\n    ctx.font = \"\".concat(fontSize, \"px \").concat(fontFamily);\n    ctx.fillStyle = (_b = y.stroke) !== null && _b !== void 0 ? _b : fontFill;\n    ctx.fillText(y.label, X, textY);\n\n    if (fontFill !== undefined) {\n      ctx.fillStyle = fontFill;\n    }\n\n    ctx.fillText(y.value, X * 2 + maxLabel, textY);\n  }\n};\n\nvar drawOnCanvas = function drawOnCanvas(ctx, props, context, pointer, height) {\n  var margin = context.margin,\n      ratio = context.ratio;\n  var backgroundShapeCanvas = props.backgroundShapeCanvas,\n      tooltipCanvas = props.tooltipCanvas,\n      background = props.background;\n  var originX = 0.5 * ratio + margin.left;\n  var originY = 0.5 * ratio + margin.top;\n  ctx.save();\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n  ctx.scale(ratio, ratio);\n  ctx.translate(originX, originY);\n  var x = pointer.x,\n      y = pointer.y,\n      content = pointer.content,\n      centerX = pointer.centerX,\n      pointWidth = pointer.pointWidth,\n      bgSize = pointer.bgSize;\n\n  if ((background === null || background === void 0 ? void 0 : background.fillStyle) !== undefined) {\n    ctx.fillStyle = background.fillStyle;\n  }\n\n  ctx.beginPath();\n  ctx.rect(centerX - pointWidth / 2, 0, pointWidth, height);\n  ctx.fill();\n  ctx.translate(x, y);\n  backgroundShapeCanvas(props, bgSize, ctx);\n  tooltipCanvas(props, content, ctx);\n  ctx.restore();\n};\n\nvar calculateTooltipSize = function calculateTooltipSize(props, content, ctx) {\n  var fontFamily = props.fontFamily,\n      _props$fontSize2 = props.fontSize,\n      fontSize = _props$fontSize2 === void 0 ? 12 : _props$fontSize2,\n      fontFill = props.fontFill;\n  ctx.font = \"bold \".concat(fontSize, \"px \").concat(fontFamily);\n\n  if (fontFill !== undefined) {\n    ctx.fillStyle = fontFill;\n  }\n\n  ctx.textAlign = \"left\";\n\n  var measureText = function measureText(str) {\n    return {\n      width: ctx.measureText(str).width,\n      height: fontSize + PADDING\n    };\n  };\n\n  var _content$y$map$reduce = content.y.map(function (_ref2) {\n    var label = _ref2.label,\n        value = _ref2.value;\n    return measureText(\"\".concat(label, \"  \").concat(value));\n  }) // Sum all y and x sizes (begin with x label size)\n  .reduce(function (res, size) {\n    return sumSizes(res, size);\n  }, measureText(String(content.x))),\n      width = _content$y$map$reduce.width,\n      height = _content$y$map$reduce.height;\n\n  return {\n    width: width + 2 * X,\n    height: height + 2 * Y\n  };\n};\n\nvar sumSizes = function sumSizes() {\n  for (var _len = arguments.length, sizes = new Array(_len), _key = 0; _key < _len; _key++) {\n    sizes[_key] = arguments[_key];\n  }\n\n  return {\n    width: Math.max.apply(Math, _toConsumableArray(sizes.map(function (size) {\n      return size.width;\n    }))),\n    height: sum(sizes, function (d) {\n      return d.height;\n    })\n  };\n};\n\nvar normalizeX = function normalizeX(x, bgSize, pointWidth, width) {\n  return x < width / 2 ? x + pointWidth / 2 + PADDING : x - bgSize.width - pointWidth / 2 - PADDING;\n};\n\nvar normalizeY = function normalizeY(y, bgSize) {\n  return y - bgSize.height <= 0 ? y + PADDING : y - bgSize.height - PADDING;\n};\n\nvar defaultOrigin = function defaultOrigin(props, moreProps, bgSize, pointWidth) {\n  var chartId = props.chartId,\n      yAccessor = props.yAccessor;\n  var mouseXY = moreProps.mouseXY,\n      xAccessor = moreProps.xAccessor,\n      currentItem = moreProps.currentItem,\n      xScale = moreProps.xScale,\n      chartConfig = moreProps.chartConfig,\n      width = moreProps.width;\n  var y = last(mouseXY);\n  var xValue = xAccessor(currentItem);\n  var x = Math.round(xScale(xValue));\n\n  if (isDefined(chartId) && isDefined(yAccessor) && isDefined(chartConfig) && isDefined(chartConfig.findIndex)) {\n    var yValue = yAccessor(currentItem);\n    var chartIndex = chartConfig.findIndex(function (c) {\n      return c.id === chartId;\n    });\n    y = Math.round(chartConfig[chartIndex].yScale(yValue));\n  }\n\n  x = normalizeX(x, bgSize, pointWidth, width);\n  y = normalizeY(y, bgSize);\n  return [x, y];\n};\n\nexport var HoverTooltip = /*#__PURE__*/function (_React$Component) {\n  _inherits(HoverTooltip, _React$Component);\n\n  var _super = _createSuper(HoverTooltip);\n\n  function HoverTooltip() {\n    var _this;\n\n    _classCallCheck(this, HoverTooltip);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var pointer = _this.helper(ctx, moreProps);\n\n      if (pointer === undefined) {\n        return;\n      }\n\n      var height = moreProps.height;\n      drawOnCanvas(ctx, _this.props, _this.context, pointer, height);\n    };\n\n    _this.helper = function (ctx, moreProps) {\n      var show = moreProps.show,\n          xScale = moreProps.xScale,\n          currentItem = moreProps.currentItem,\n          plotData = moreProps.plotData,\n          xAccessor = moreProps.xAccessor,\n          displayXAccessor = moreProps.displayXAccessor;\n      var _this$props = _this.props,\n          _this$props$origin = _this$props.origin,\n          origin = _this$props$origin === void 0 ? HoverTooltip.defaultProps.origin : _this$props$origin,\n          tooltip = _this$props.tooltip;\n\n      if (!show || currentItem === undefined) {\n        return;\n      }\n\n      var xValue = xAccessor(currentItem);\n\n      if (xValue === undefined) {\n        return;\n      }\n\n      var content = tooltip.content({\n        currentItem: currentItem,\n        xAccessor: displayXAccessor\n      });\n      var centerX = xScale(xValue);\n      var pointWidth = Math.abs(xScale(xAccessor(last(plotData))) - xScale(xAccessor(first(plotData)))) / (plotData.length - 1);\n      var bgSize = calculateTooltipSize(_this.props, content, ctx);\n\n      var _origin = origin(_this.props, moreProps, bgSize, pointWidth),\n          _origin2 = _slicedToArray(_origin, 2),\n          x = _origin2[0],\n          y = _origin2[1];\n\n      return {\n        x: x,\n        y: y,\n        content: content,\n        centerX: centerX,\n        pointWidth: pointWidth,\n        bgSize: bgSize\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(HoverTooltip, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(GenericComponent, {\n        canvasDraw: this.drawOnCanvas,\n        drawOn: [\"mousemove\", \"pan\"]\n      });\n    }\n  }]);\n\n  return HoverTooltip;\n}(React.Component);\nHoverTooltip.defaultProps = {\n  background: {\n    fillStyle: \"rgba(33, 148, 243, 0.1)\"\n  },\n  toolTipFillStyle: \"rgba(250, 250, 250, 1)\",\n  toolTipStrokeStyle: \"rgba(33, 148, 243)\",\n  tooltipCanvas: defaultTooltipCanvas,\n  origin: defaultOrigin,\n  backgroundShapeCanvas: defaultBackgroundShapeCanvas,\n  fontFill: \"#000000\",\n  fontFamily: \"-apple-system, system-ui, Roboto, 'Helvetica Neue', Ubuntu, sans-serif\",\n  fontSize: 14\n};\nHoverTooltip.contextTypes = {\n  margin: PropTypes.object.isRequired,\n  ratio: PropTypes.number.isRequired\n};","map":null,"metadata":{},"sourceType":"module"}