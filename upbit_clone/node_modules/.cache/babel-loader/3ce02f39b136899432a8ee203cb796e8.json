{"ast":null,"code":"import { zip } from \"d3-array\";\nimport { SmoothedForceIndex as defaultOptions } from \"./defaultOptionsForComputation\";\nimport ema from \"./ema\";\nimport forceIndex from \"./forceIndex\";\nimport sma from \"./sma\";\nexport default function () {\n  var underlyingAlgorithm = forceIndex();\n  var options = defaultOptions;\n\n  var calculator = function calculator(data) {\n    var _options = options,\n        smoothingType = _options.smoothingType,\n        smoothingWindow = _options.smoothingWindow;\n    var _options2 = options,\n        sourcePath = _options2.sourcePath,\n        volumePath = _options2.volumePath;\n    var algo = underlyingAlgorithm.options({\n      sourcePath: sourcePath,\n      volumePath: volumePath\n    }); // @ts-ignore\n\n    var force = algo(data);\n    var ma = smoothingType === \"ema\" ? ema() : sma();\n    var forceMA = ma.options({\n      windowSize: smoothingWindow,\n      sourcePath: undefined\n    }); // @ts-ignore\n\n    var smoothed = forceMA(force);\n    return zip(force, smoothed).map(function (d) {\n      return {\n        force: d[0],\n        smoothed: d[1]\n      };\n    });\n  };\n\n  calculator.undefinedLength = function () {\n    var _options3 = options,\n        smoothingWindow = _options3.smoothingWindow;\n    return underlyingAlgorithm.undefinedLength() + smoothingWindow - 1;\n  };\n\n  calculator.options = function (newOptions) {\n    if (newOptions === undefined) {\n      return options;\n    }\n\n    options = Object.assign(Object.assign({}, defaultOptions), newOptions);\n    return calculator;\n  };\n\n  return calculator;\n}","map":null,"metadata":{},"sourceType":"module"}