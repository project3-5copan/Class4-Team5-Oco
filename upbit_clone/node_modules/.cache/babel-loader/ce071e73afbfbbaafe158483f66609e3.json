{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from \"react\";\nimport { functor } from \"@react-financial-charts/core\";\nexport var Triangle = /*#__PURE__*/function (_React$Component) {\n  _inherits(Triangle, _React$Component);\n\n  var _super = _createSuper(Triangle);\n\n  function Triangle() {\n    _classCallCheck(this, Triangle);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Triangle, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          fillStyle = _this$props.fillStyle,\n          strokeStyle = _this$props.strokeStyle,\n          strokeWidth = _this$props.strokeWidth,\n          point = _this$props.point,\n          width = _this$props.width;\n      var rotation = getRotationInDegrees(this.props, point);\n\n      if (rotation == null) {\n        return null;\n      }\n\n      var fillColor = functor(fillStyle)(point.datum);\n      var strokeColor = functor(strokeStyle)(point.datum);\n      var w = functor(width)(point.datum);\n      var x = point.x,\n          y = point.y;\n\n      var _getTrianglePoints = getTrianglePoints(w),\n          innerOpposite = _getTrianglePoints.innerOpposite,\n          innerHypotenuse = _getTrianglePoints.innerHypotenuse;\n\n      var points = \"\\n\\t\\t\".concat(x, \" \").concat(y - innerHypotenuse, \",\\n\\t\\t\").concat(x + w / 2, \" \").concat(y + innerOpposite, \",\\n\\t\\t\").concat(x - w / 2, \" \").concat(y + innerOpposite, \"\\n\\t    \");\n      return React.createElement(\"polygon\", {\n        className: className,\n        points: points,\n        stroke: strokeColor,\n        strokeWidth: strokeWidth,\n        fill: fillColor,\n        transform: rotation !== 0 ? \"rotate(\".concat(rotation, \", \").concat(x, \", \").concat(y, \")\") : undefined\n      });\n    }\n  }]);\n\n  return Triangle;\n}(React.Component);\nTriangle.defaultProps = {\n  direction: \"top\",\n  fillStyle: \"#4682B4\",\n  className: \"react-financial-charts-marker-triangle\"\n};\n\nTriangle.drawOnCanvas = function (props, point, ctx) {\n  var fillStyle = props.fillStyle,\n      strokeStyle = props.strokeStyle,\n      strokeWidth = props.strokeWidth,\n      width = props.width;\n\n  if (strokeStyle !== undefined) {\n    ctx.strokeStyle = functor(strokeStyle)(point.datum);\n  }\n\n  if (strokeWidth !== undefined) {\n    ctx.lineWidth = strokeWidth;\n  }\n\n  if (fillStyle !== undefined) {\n    ctx.fillStyle = functor(fillStyle)(point.datum);\n  }\n\n  var w = functor(width)(point.datum);\n  var x = point.x,\n      y = point.y;\n\n  var _getTrianglePoints2 = getTrianglePoints(w),\n      innerOpposite = _getTrianglePoints2.innerOpposite,\n      innerHypotenuse = _getTrianglePoints2.innerHypotenuse;\n\n  var rotationDeg = getRotationInDegrees(props, point);\n  ctx.beginPath();\n  ctx.moveTo(x, y - innerHypotenuse);\n  ctx.lineTo(x + w / 2, y + innerOpposite);\n  ctx.lineTo(x - w / 2, y + innerOpposite); // TODO: rotation does not work\n  // example: https://gist.github.com/geoffb/6392450\n\n  if (rotationDeg !== null && rotationDeg !== 0) {\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.rotate(rotationDeg * Math.PI / 180); // 45 degrees\n\n    ctx.fill();\n    ctx.restore();\n  }\n\n  ctx.fill();\n\n  if (strokeStyle !== undefined) {\n    ctx.stroke();\n  }\n};\n\nvar getTrianglePoints = function getTrianglePoints(width) {\n  var innerHypotenuse = width / 2 * (1 / Math.cos(30 * Math.PI / 180));\n  var innerOpposite = width / 2 * (1 / Math.tan(60 * Math.PI / 180));\n  return {\n    innerOpposite: innerOpposite,\n    innerHypotenuse: innerHypotenuse\n  };\n};\n\nvar getRotationInDegrees = function getRotationInDegrees(props, point) {\n  var _props$direction = props.direction,\n      direction = _props$direction === void 0 ? Triangle.defaultProps.direction : _props$direction;\n  var directionVal = functor(direction)(point.datum);\n\n  if (directionVal === \"hide\") {\n    return null;\n  }\n\n  var rotate = 0;\n\n  switch (directionVal) {\n    case \"bottom\":\n      rotate = 180;\n      break;\n\n    case \"left\":\n      rotate = -90;\n      break;\n\n    case \"right\":\n      rotate = 90;\n      break;\n  }\n\n  return rotate;\n};","map":null,"metadata":{},"sourceType":"module"}