{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from \"react\";\nimport { ascending as d3Ascending } from \"d3-array\";\nimport { noop } from \"@react-financial-charts/core\";\nimport { getXValue } from \"@react-financial-charts/core/lib/utils/ChartDataUtil\";\nimport { isHover, saveNodeType } from \"../utils\";\nimport { ClickableCircle, HoverTextNearMouse, InteractiveStraightLine } from \"../components\";\nexport var EachTrendLine = /*#__PURE__*/function (_React$Component) {\n  _inherits(EachTrendLine, _React$Component);\n\n  var _super = _createSuper(EachTrendLine);\n\n  function EachTrendLine(props) {\n    var _this;\n\n    _classCallCheck(this, EachTrendLine);\n\n    _this = _super.call(this, props);\n\n    _this.handleHover = function (_, moreProps) {\n      if (_this.state.hover !== moreProps.hovering) {\n        _this.setState({\n          hover: moreProps.hovering\n        });\n      }\n    };\n\n    _this.handleEdge2Drag = function (e, moreProps) {\n      var _this$props = _this.props,\n          index = _this$props.index,\n          onDrag = _this$props.onDrag,\n          x1Value = _this$props.x1Value,\n          y1Value = _this$props.y1Value;\n\n      var _getNewXY = getNewXY(moreProps),\n          _getNewXY2 = _slicedToArray(_getNewXY, 2),\n          x2Value = _getNewXY2[0],\n          y2Value = _getNewXY2[1];\n\n      onDrag(e, index, {\n        x1Value: x1Value,\n        y1Value: y1Value,\n        x2Value: x2Value,\n        y2Value: y2Value\n      });\n    };\n\n    _this.handleEdge1Drag = function (e, moreProps) {\n      var _this$props2 = _this.props,\n          index = _this$props2.index,\n          onDrag = _this$props2.onDrag,\n          x2Value = _this$props2.x2Value,\n          y2Value = _this$props2.y2Value;\n\n      var _getNewXY3 = getNewXY(moreProps),\n          _getNewXY4 = _slicedToArray(_getNewXY3, 2),\n          x1Value = _getNewXY4[0],\n          y1Value = _getNewXY4[1];\n\n      onDrag(e, index, {\n        x1Value: x1Value,\n        y1Value: y1Value,\n        x2Value: x2Value,\n        y2Value: y2Value\n      });\n    };\n\n    _this.handleDragComplete = function (e, moreProps) {\n      _this.setState({\n        anchor: undefined\n      });\n\n      var onDragComplete = _this.props.onDragComplete;\n\n      if (onDragComplete === undefined) {\n        return;\n      }\n\n      onDragComplete(e, moreProps);\n    };\n\n    _this.handleEdge2DragStart = function () {\n      _this.setState({\n        anchor: \"edge1\"\n      });\n    };\n\n    _this.handleEdge1DragStart = function () {\n      _this.setState({\n        anchor: \"edge2\"\n      });\n    };\n\n    _this.handleLineDrag = function (e, moreProps) {\n      var _this$props3 = _this.props,\n          index = _this$props3.index,\n          onDrag = _this$props3.onDrag;\n      var _this$dragStart = _this.dragStart,\n          x1Value = _this$dragStart.x1Value,\n          y1Value = _this$dragStart.y1Value,\n          x2Value = _this$dragStart.x2Value,\n          y2Value = _this$dragStart.y2Value;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          xAccessor = moreProps.xAccessor,\n          fullData = moreProps.fullData;\n      var startPos = moreProps.startPos,\n          mouseXY = moreProps.mouseXY;\n      var x1 = xScale(x1Value);\n      var y1 = yScale(y1Value);\n      var x2 = xScale(x2Value);\n      var y2 = yScale(y2Value);\n      var dx = startPos[0] - mouseXY[0];\n      var dy = startPos[1] - mouseXY[1];\n      var newX1Value = getXValue(xScale, xAccessor, [x1 - dx, y1 - dy], fullData);\n      var newY1Value = yScale.invert(y1 - dy);\n      var newX2Value = getXValue(xScale, xAccessor, [x2 - dx, y2 - dy], fullData);\n      var newY2Value = yScale.invert(y2 - dy);\n      onDrag(e, index, {\n        x1Value: newX1Value,\n        y1Value: newY1Value,\n        x2Value: newX2Value,\n        y2Value: newY2Value\n      });\n    };\n\n    _this.handleLineDragStart = function () {\n      var _this$props4 = _this.props,\n          x1Value = _this$props4.x1Value,\n          y1Value = _this$props4.y1Value,\n          x2Value = _this$props4.x2Value,\n          y2Value = _this$props4.y2Value;\n      _this.dragStart = {\n        x1Value: x1Value,\n        y1Value: y1Value,\n        x2Value: x2Value,\n        y2Value: y2Value\n      };\n    };\n\n    _this.isHover = isHover.bind(_assertThisInitialized(_this));\n    _this.saveNodeType = saveNodeType.bind(_assertThisInitialized(_this));\n    _this.state = {\n      hover: false\n    };\n    return _this;\n  }\n\n  _createClass(EachTrendLine, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          x1Value = _this$props5.x1Value,\n          y1Value = _this$props5.y1Value,\n          x2Value = _this$props5.x2Value,\n          y2Value = _this$props5.y2Value,\n          type = _this$props5.type,\n          strokeStyle = _this$props5.strokeStyle,\n          strokeWidth = _this$props5.strokeWidth,\n          strokeDasharray = _this$props5.strokeDasharray,\n          r = _this$props5.r,\n          edgeStrokeWidth = _this$props5.edgeStrokeWidth,\n          edgeFill = _this$props5.edgeFill,\n          edgeStroke = _this$props5.edgeStroke,\n          edgeInteractiveCursor = _this$props5.edgeInteractiveCursor,\n          lineInteractiveCursor = _this$props5.lineInteractiveCursor,\n          hoverText = _this$props5.hoverText,\n          selected = _this$props5.selected,\n          onDragComplete = _this$props5.onDragComplete;\n\n      var hoverTextEnabled = hoverText.enable,\n          hoverTextSelected = hoverText.selectedText,\n          hoverTextUnselected = hoverText.text,\n          restHoverTextProps = __rest(hoverText, [\"enable\", \"selectedText\", \"text\"]);\n\n      var _this$state = this.state,\n          hover = _this$state.hover,\n          anchor = _this$state.anchor;\n      return React.createElement(\"g\", null, React.createElement(InteractiveStraightLine, {\n        ref: this.saveNodeType(\"line\"),\n        selected: selected || hover,\n        onHover: this.handleHover,\n        onUnHover: this.handleHover,\n        x1Value: x1Value,\n        y1Value: y1Value,\n        x2Value: x2Value,\n        y2Value: y2Value,\n        type: type,\n        strokeStyle: strokeStyle,\n        strokeWidth: hover || selected ? strokeWidth + 1 : strokeWidth,\n        strokeDasharray: strokeDasharray,\n        interactiveCursorClass: lineInteractiveCursor,\n        onDragStart: this.handleLineDragStart,\n        onDrag: this.handleLineDrag,\n        onDragComplete: onDragComplete\n      }), React.createElement(ClickableCircle, {\n        ref: this.saveNodeType(\"edge1\"),\n        show: selected || hover,\n        cx: x1Value,\n        cy: y1Value,\n        r: r,\n        fillStyle: edgeFill,\n        strokeStyle: anchor === \"edge1\" ? strokeStyle : edgeStroke,\n        strokeWidth: edgeStrokeWidth,\n        interactiveCursorClass: edgeInteractiveCursor,\n        onDragStart: this.handleEdge1DragStart,\n        onDrag: this.handleEdge1Drag,\n        onDragComplete: this.handleDragComplete\n      }), React.createElement(ClickableCircle, {\n        ref: this.saveNodeType(\"edge2\"),\n        show: selected || hover,\n        cx: x2Value,\n        cy: y2Value,\n        r: r,\n        fillStyle: edgeFill,\n        strokeStyle: anchor === \"edge2\" ? strokeStyle : edgeStroke,\n        strokeWidth: edgeStrokeWidth,\n        interactiveCursorClass: edgeInteractiveCursor,\n        onDragStart: this.handleEdge2DragStart,\n        onDrag: this.handleEdge2Drag,\n        onDragComplete: this.handleDragComplete\n      }), React.createElement(HoverTextNearMouse, Object.assign({\n        show: hoverTextEnabled && hover\n      }, restHoverTextProps, {\n        text: selected ? hoverTextSelected : hoverTextUnselected\n      })));\n    }\n  }]);\n\n  return EachTrendLine;\n}(React.Component);\nEachTrendLine.defaultProps = {\n  onDrag: noop,\n  onEdge1Drag: noop,\n  onEdge2Drag: noop,\n  onSelect: noop,\n  selected: false,\n  edgeStroke: \"#000000\",\n  edgeFill: \"#FFFFFF\",\n  edgeStrokeWidth: 2,\n  r: 5,\n  strokeWidth: 1,\n  strokeDasharray: \"Solid\",\n  hoverText: {\n    enable: false\n  }\n};\nexport function getNewXY(moreProps) {\n  var xScale = moreProps.xScale,\n      yScale = moreProps.chartConfig.yScale,\n      xAccessor = moreProps.xAccessor,\n      plotData = moreProps.plotData,\n      mouseXY = moreProps.mouseXY;\n  var mouseY = mouseXY[1];\n  var x = getXValue(xScale, xAccessor, mouseXY, plotData);\n\n  var _yScale$domain$slice$ = yScale.domain().slice().sort(d3Ascending),\n      _yScale$domain$slice$2 = _slicedToArray(_yScale$domain$slice$, 2),\n      small = _yScale$domain$slice$2[0],\n      big = _yScale$domain$slice$2[1];\n\n  var y = yScale.invert(mouseY);\n  var newY = Math.min(Math.max(y, small), big);\n  return [x, newY];\n}","map":null,"metadata":{},"sourceType":"module"}