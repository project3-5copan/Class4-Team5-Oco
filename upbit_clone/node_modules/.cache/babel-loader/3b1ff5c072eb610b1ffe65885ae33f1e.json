{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from \"react\";\nimport { isDefined, isNotDefined, getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nimport { generateLine, isHovering } from \"./InteractiveStraightLine\";\nexport var ChannelWithArea = /*#__PURE__*/function (_React$Component) {\n  _inherits(ChannelWithArea, _React$Component);\n\n  var _super = _createSuper(ChannelWithArea);\n\n  function ChannelWithArea() {\n    var _this;\n\n    _classCallCheck(this, ChannelWithArea);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (ctx, moreProps) {\n      var _this$props = _this.props,\n          strokeStyle = _this$props.strokeStyle,\n          strokeWidth = _this$props.strokeWidth,\n          fillStyle = _this$props.fillStyle;\n\n      var _helper = helper(_this.props, moreProps),\n          line1 = _helper.line1,\n          line2 = _helper.line2;\n\n      if (line1 !== undefined) {\n        var x1 = line1.x1,\n            y1 = line1.y1,\n            x2 = line1.x2,\n            y2 = line1.y2;\n        ctx.lineWidth = strokeWidth;\n        ctx.strokeStyle = strokeStyle;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n\n        if (line2 !== undefined) {\n          var line2Y1 = line2.y1,\n              line2Y2 = line2.y2;\n          ctx.beginPath();\n          ctx.moveTo(x1, line2Y1);\n          ctx.lineTo(x2, line2Y2);\n          ctx.stroke();\n          ctx.fillStyle = fillStyle;\n          ctx.beginPath();\n          ctx.moveTo(x1, y1);\n          ctx.lineTo(x2, y2);\n          ctx.lineTo(x2, line2Y2);\n          ctx.lineTo(x1, line2Y1);\n          ctx.closePath();\n          ctx.fill();\n        }\n      }\n    };\n\n    _this.isHover = function (moreProps) {\n      var _this$props2 = _this.props,\n          tolerance = _this$props2.tolerance,\n          onHover = _this$props2.onHover;\n\n      if (onHover !== undefined) {\n        var _helper2 = helper(_this.props, moreProps),\n            line1 = _helper2.line1,\n            line2 = _helper2.line2;\n\n        if (line1 !== undefined && line2 !== undefined) {\n          var mouseXY = moreProps.mouseXY,\n              xScale = moreProps.xScale,\n              yScale = moreProps.chartConfig.yScale;\n          var line1Hovering = isHovering({\n            x1Value: line1.x1,\n            y1Value: line1.y1,\n            x2Value: line1.x2,\n            y2Value: line1.y2,\n            type: \"LINE\",\n            mouseXY: mouseXY,\n            tolerance: tolerance,\n            xScale: xScale,\n            yScale: yScale\n          });\n          var line2Hovering = isHovering({\n            x1Value: line2.x1,\n            y1Value: line2.y1,\n            x2Value: line2.x2,\n            y2Value: line2.y2,\n            type: \"LINE\",\n            mouseXY: mouseXY,\n            tolerance: tolerance,\n            xScale: xScale,\n            yScale: yScale\n          });\n          return line1Hovering || line2Hovering;\n        }\n      }\n\n      return false;\n    };\n\n    return _this;\n  }\n\n  _createClass(ChannelWithArea, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          selected = _this$props3.selected,\n          interactiveCursorClass = _this$props3.interactiveCursorClass;\n      var _this$props4 = this.props,\n          onDragStart = _this$props4.onDragStart,\n          onDrag = _this$props4.onDrag,\n          onDragComplete = _this$props4.onDragComplete,\n          onHover = _this$props4.onHover,\n          onUnHover = _this$props4.onUnHover;\n      return React.createElement(GenericChartComponent, {\n        isHover: this.isHover,\n        canvasToDraw: getMouseCanvas,\n        canvasDraw: this.drawOnCanvas,\n        interactiveCursorClass: interactiveCursorClass,\n        selected: selected,\n        onDragStart: onDragStart,\n        onDrag: onDrag,\n        onDragComplete: onDragComplete,\n        onHover: onHover,\n        onUnHover: onUnHover,\n        drawOn: [\"mousemove\", \"mouseleave\", \"pan\", \"drag\"]\n      });\n    }\n  }]);\n\n  return ChannelWithArea;\n}(React.Component);\nChannelWithArea.defaultProps = {\n  type: \"LINE\",\n  strokeWidth: 1,\n  tolerance: 4,\n  selected: false\n};\n\nfunction getLines(props, moreProps) {\n  var startXY = props.startXY,\n      endXY = props.endXY,\n      dy = props.dy,\n      type = props.type;\n  var xScale = moreProps.xScale;\n\n  if (isNotDefined(startXY) || isNotDefined(endXY)) {\n    return {};\n  }\n\n  var line1 = generateLine({\n    type: type,\n    start: startXY,\n    end: endXY,\n    xScale: xScale,\n    yScale: undefined\n  });\n  var line2 = isDefined(dy) ? Object.assign(Object.assign({}, line1), {\n    y1: line1.y1 + dy,\n    y2: line1.y2 + dy\n  }) : undefined;\n  return {\n    line1: line1,\n    line2: line2\n  };\n}\n\nfunction helper(props, moreProps) {\n  var lines = getLines(props, moreProps);\n  var xScale = moreProps.xScale,\n      yScale = moreProps.chartConfig.yScale;\n  var line1 = lines.line1 !== undefined ? {\n    x1: xScale(lines.line1.x1),\n    y1: yScale(lines.line1.y1),\n    x2: xScale(lines.line1.x2),\n    y2: yScale(lines.line1.y2)\n  } : undefined;\n  var line2 = lines.line2 !== undefined ? {\n    x1: line1.x1,\n    y1: yScale(lines.line2.y1),\n    x2: line1.x2,\n    y2: yScale(lines.line2.y2)\n  } : undefined;\n  return {\n    lines: lines,\n    line1: line1,\n    line2: line2\n  };\n}","map":null,"metadata":{},"sourceType":"module"}