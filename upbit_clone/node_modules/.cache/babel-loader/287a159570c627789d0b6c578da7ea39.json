{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as PropTypes from \"prop-types\";\nimport * as React from \"react\";\nimport { functor, identity } from \"./utils\";\nvar aliases = {\n  mouseleave: \"mousemove\",\n  panend: \"pan\",\n  pinchzoom: \"pan\",\n  mousedown: \"mousemove\",\n  click: \"mousemove\",\n  contextmenu: \"mousemove\",\n  dblclick: \"mousemove\",\n  dragstart: \"drag\",\n  dragend: \"drag\",\n  dragcancel: \"drag\",\n  zoom: \"zoom\"\n};\nexport var GenericComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(GenericComponent, _React$Component);\n\n  var _super = _createSuper(GenericComponent);\n\n  function GenericComponent(props, context) {\n    var _this;\n\n    _classCallCheck(this, GenericComponent);\n\n    _this = _super.call(this, props, context);\n    _this.moreProps = {};\n    _this.dragInProgress = false;\n    _this.evaluationInProgress = false;\n    _this.iSetTheCursorClass = false;\n\n    _this.listener = function (type, moreProps, state, e) {\n      if (moreProps !== undefined) {\n        _this.updateMoreProps(moreProps);\n      }\n\n      _this.evaluationInProgress = true;\n\n      _this.evaluateType(type, e);\n\n      _this.evaluationInProgress = false;\n    };\n\n    _this.drawOnCanvas = _this.drawOnCanvas.bind(_assertThisInitialized(_this));\n    _this.getMoreProps = _this.getMoreProps.bind(_assertThisInitialized(_this));\n    _this.draw = _this.draw.bind(_assertThisInitialized(_this));\n    _this.updateMoreProps = _this.updateMoreProps.bind(_assertThisInitialized(_this));\n    _this.evaluateType = _this.evaluateType.bind(_assertThisInitialized(_this));\n    _this.isHover = _this.isHover.bind(_assertThisInitialized(_this));\n    _this.preCanvasDraw = _this.preCanvasDraw.bind(_assertThisInitialized(_this));\n    _this.postCanvasDraw = _this.postCanvasDraw.bind(_assertThisInitialized(_this));\n    _this.getPanConditions = _this.getPanConditions.bind(_assertThisInitialized(_this));\n    _this.shouldTypeProceed = _this.shouldTypeProceed.bind(_assertThisInitialized(_this));\n    _this.preEvaluate = _this.preEvaluate.bind(_assertThisInitialized(_this));\n    var generateSubscriptionId = context.generateSubscriptionId;\n    _this.suscriberId = generateSubscriptionId();\n    _this.state = {\n      updateCount: 0\n    };\n    return _this;\n  }\n\n  _createClass(GenericComponent, [{\n    key: \"updateMoreProps\",\n    value: function updateMoreProps(moreProps) {\n      var _this2 = this;\n\n      Object.keys(moreProps).forEach(function (key) {\n        _this2.moreProps[key] = moreProps[key];\n      });\n    }\n  }, {\n    key: \"shouldTypeProceed\",\n    value: function shouldTypeProceed(type, moreProps) {\n      return true;\n    }\n  }, {\n    key: \"preEvaluate\",\n    value: function preEvaluate(type, moreProps, e) {/// empty\n    }\n  }, {\n    key: \"evaluateType\",\n    value: function evaluateType(type, e) {\n      // @ts-ignore\n      var newType = aliases[type] || type;\n      var proceed = this.props.drawOn.indexOf(newType) > -1;\n\n      if (!proceed) {\n        return;\n      }\n\n      this.preEvaluate(type, this.moreProps, e);\n\n      if (!this.shouldTypeProceed(type, this.moreProps)) {\n        return;\n      }\n\n      switch (type) {\n        case \"zoom\":\n        case \"mouseenter\":\n          // DO NOT DRAW FOR THESE EVENTS\n          break;\n\n        case \"mouseleave\":\n          {\n            this.moreProps.hovering = false;\n\n            if (this.props.onUnHover) {\n              this.props.onUnHover(e, this.getMoreProps());\n            }\n\n            break;\n          }\n\n        case \"contextmenu\":\n          {\n            if (this.props.onContextMenu) {\n              this.props.onContextMenu(e, this.getMoreProps());\n            }\n\n            if (this.moreProps.hovering && this.props.onContextMenuWhenHover) {\n              this.props.onContextMenuWhenHover(e, this.getMoreProps());\n            }\n\n            break;\n          }\n\n        case \"mousedown\":\n          {\n            if (this.props.onMouseDown) {\n              this.props.onMouseDown(e, this.getMoreProps());\n            }\n\n            break;\n          }\n\n        case \"click\":\n          {\n            var _this$props = this.props,\n                onClick = _this$props.onClick,\n                onClickOutside = _this$props.onClickOutside,\n                onClickWhenHover = _this$props.onClickWhenHover;\n            var moreProps = this.getMoreProps();\n\n            if (moreProps.hovering && onClickWhenHover !== undefined) {\n              onClickWhenHover(e, moreProps);\n            } else if (onClickOutside !== undefined) {\n              onClickOutside(e, moreProps);\n            }\n\n            if (onClick !== undefined) {\n              onClick(e, moreProps);\n            }\n\n            break;\n          }\n\n        case \"mousemove\":\n          {\n            var prevHover = this.moreProps.hovering;\n            this.moreProps.hovering = this.isHover(e);\n            var _this$context = this.context,\n                amIOnTop = _this$context.amIOnTop,\n                setCursorClass = _this$context.setCursorClass;\n\n            if (this.moreProps.hovering && !this.props.selected &&\n            /* && !prevHover */\n            amIOnTop(this.suscriberId) && this.props.onHover !== undefined) {\n              setCursorClass(\"react-financial-charts-pointer-cursor\");\n              this.iSetTheCursorClass = true;\n            } else if (this.moreProps.hovering && this.props.selected && amIOnTop(this.suscriberId)) {\n              setCursorClass(this.props.interactiveCursorClass);\n              this.iSetTheCursorClass = true;\n            } else if (prevHover && !this.moreProps.hovering && this.iSetTheCursorClass) {\n              this.iSetTheCursorClass = false;\n              setCursorClass(null);\n            }\n\n            var _moreProps = this.getMoreProps();\n\n            if (this.moreProps.hovering && !prevHover) {\n              if (this.props.onHover) {\n                this.props.onHover(e, _moreProps);\n              }\n            }\n\n            if (prevHover && !this.moreProps.hovering) {\n              if (this.props.onUnHover) {\n                this.props.onUnHover(e, _moreProps);\n              }\n            }\n\n            if (this.props.onMouseMove) {\n              this.props.onMouseMove(e, _moreProps);\n            }\n\n            break;\n          }\n\n        case \"dblclick\":\n          {\n            var _moreProps2 = this.getMoreProps();\n\n            if (this.props.onDoubleClick) {\n              this.props.onDoubleClick(e, _moreProps2);\n            }\n\n            if (this.moreProps.hovering && this.props.onDoubleClickWhenHover) {\n              this.props.onDoubleClickWhenHover(e, _moreProps2);\n            }\n\n            break;\n          }\n\n        case \"pan\":\n          {\n            this.moreProps.hovering = false;\n\n            if (this.props.onPan) {\n              this.props.onPan(e, this.getMoreProps());\n            }\n\n            break;\n          }\n\n        case \"panend\":\n          {\n            if (this.props.onPanEnd) {\n              this.props.onPanEnd(e, this.getMoreProps());\n            }\n\n            break;\n          }\n\n        case \"dragstart\":\n          {\n            if (this.getPanConditions().draggable) {\n              var _amIOnTop = this.context.amIOnTop;\n\n              if (_amIOnTop(this.suscriberId)) {\n                this.dragInProgress = true;\n\n                if (this.props.onDragStart !== undefined) {\n                  this.props.onDragStart(e, this.getMoreProps());\n                }\n              }\n            }\n\n            break;\n          }\n\n        case \"drag\":\n          {\n            if (this.dragInProgress && this.props.onDrag) {\n              this.props.onDrag(e, this.getMoreProps());\n            }\n\n            break;\n          }\n\n        case \"dragend\":\n          {\n            if (this.dragInProgress && this.props.onDragComplete) {\n              this.props.onDragComplete(e, this.getMoreProps());\n            }\n\n            this.dragInProgress = false;\n            break;\n          }\n\n        case \"dragcancel\":\n          {\n            if (this.dragInProgress || this.iSetTheCursorClass) {\n              var _setCursorClass = this.context.setCursorClass;\n\n              _setCursorClass(null);\n            }\n\n            break;\n          }\n      }\n    }\n  }, {\n    key: \"isHover\",\n    value: function isHover(e) {\n      var isHover = this.props.isHover;\n\n      if (isHover === undefined) {\n        return false;\n      }\n\n      return isHover(this.getMoreProps(), e);\n    }\n  }, {\n    key: \"getPanConditions\",\n    value: function getPanConditions() {\n      var draggable = !!(this.props.selected && this.moreProps.hovering) || this.props.enableDragOnHover && this.moreProps.hovering;\n      return {\n        draggable: draggable,\n        panEnabled: !this.props.disablePan\n      };\n    } // @ts-ignore\n\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        force: false\n      },\n          trigger = _ref.trigger,\n          force = _ref.force;\n\n      // @ts-ignore\n      var type = aliases[trigger] || trigger;\n      var proceed = this.props.drawOn.indexOf(type) > -1;\n\n      if (proceed || this.props.selected\n      /* this is to draw as soon as you select */\n      || force) {\n        var canvasDraw = this.props.canvasDraw;\n\n        if (canvasDraw === undefined) {\n          var updateCount = this.state.updateCount;\n          this.setState({\n            updateCount: updateCount + 1\n          });\n        } else {\n          this.drawOnCanvas();\n        }\n      }\n    }\n  }, {\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      var _this$context2 = this.context,\n          subscribe = _this$context2.subscribe,\n          chartId = _this$context2.chartId;\n      var _this$props2 = this.props,\n          clip = _this$props2.clip,\n          edgeClip = _this$props2.edgeClip;\n      subscribe(this.suscriberId, {\n        chartId: chartId,\n        clip: clip,\n        edgeClip: edgeClip,\n        listener: this.listener,\n        draw: this.draw,\n        getPanConditions: this.getPanConditions\n      });\n      this.UNSAFE_componentWillReceiveProps(this.props, this.context);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var unsubscribe = this.context.unsubscribe;\n      unsubscribe(this.suscriberId);\n\n      if (this.iSetTheCursorClass) {\n        var setCursorClass = this.context.setCursorClass;\n        setCursorClass(null);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidUpdate(this.props);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n          canvasDraw = _this$props3.canvasDraw,\n          selected = _this$props3.selected,\n          interactiveCursorClass = _this$props3.interactiveCursorClass;\n\n      if (prevProps.selected !== selected) {\n        var setCursorClass = this.context.setCursorClass;\n\n        if (selected && this.moreProps.hovering) {\n          this.iSetTheCursorClass = true;\n          setCursorClass(interactiveCursorClass);\n        } else {\n          this.iSetTheCursorClass = false;\n          setCursorClass(null);\n        }\n      }\n\n      if (canvasDraw !== undefined && !this.evaluationInProgress) {\n        this.updateMoreProps(this.moreProps);\n        this.drawOnCanvas();\n      }\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\n      var xScale = nextContext.xScale,\n          plotData = nextContext.plotData,\n          chartConfig = nextContext.chartConfig,\n          getMutableState = nextContext.getMutableState;\n      this.moreProps = Object.assign(Object.assign(Object.assign({}, this.moreProps), getMutableState()), {\n        /*\n        ^ this is so\n        mouseXY, currentCharts, currentItem are available to\n        newly created components like MouseHoverText which\n        is created right after a new interactive object is drawn\n        */\n        xScale: xScale,\n        plotData: plotData,\n        chartConfig: chartConfig\n      });\n    }\n  }, {\n    key: \"getMoreProps\",\n    value: function getMoreProps() {\n      var _this$context3 = this.context,\n          xScale = _this$context3.xScale,\n          plotData = _this$context3.plotData,\n          chartConfig = _this$context3.chartConfig,\n          morePropsDecorator = _this$context3.morePropsDecorator,\n          xAccessor = _this$context3.xAccessor,\n          displayXAccessor = _this$context3.displayXAccessor,\n          width = _this$context3.width,\n          height = _this$context3.height;\n      var _this$context4 = this.context,\n          chartId = _this$context4.chartId,\n          fullData = _this$context4.fullData;\n      var moreProps = Object.assign({\n        xScale: xScale,\n        plotData: plotData,\n        chartConfig: chartConfig,\n        xAccessor: xAccessor,\n        displayXAccessor: displayXAccessor,\n        width: width,\n        height: height,\n        chartId: chartId,\n        fullData: fullData\n      }, this.moreProps);\n      return (morePropsDecorator || identity)(moreProps);\n    }\n  }, {\n    key: \"preCanvasDraw\",\n    value: function preCanvasDraw(ctx, moreProps) {// do nothing\n    }\n  }, {\n    key: \"postCanvasDraw\",\n    value: function postCanvasDraw(ctx, moreProps) {// empty\n    }\n  }, {\n    key: \"drawOnCanvas\",\n    value: function drawOnCanvas() {\n      var _this$props4 = this.props,\n          canvasDraw = _this$props4.canvasDraw,\n          canvasToDraw = _this$props4.canvasToDraw;\n\n      if (canvasDraw === undefined || canvasToDraw === undefined) {\n        return;\n      }\n\n      var getCanvasContexts = this.context.getCanvasContexts;\n      var moreProps = this.getMoreProps();\n      var contexts = getCanvasContexts();\n      var ctx = canvasToDraw(contexts);\n\n      if (ctx !== undefined) {\n        this.preCanvasDraw(ctx, moreProps);\n        canvasDraw(ctx, moreProps);\n        this.postCanvasDraw(ctx, moreProps);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          canvasDraw = _this$props5.canvasDraw,\n          clip = _this$props5.clip,\n          svgDraw = _this$props5.svgDraw;\n\n      if (canvasDraw !== undefined || svgDraw === undefined) {\n        return null;\n      }\n\n      var chartId = this.context.chartId;\n      var suffix = chartId !== undefined ? \"-\" + chartId : \"\";\n      var style = clip ? {\n        clipPath: \"url(#chart-area-clip\".concat(suffix, \")\")\n      } : undefined;\n      return React.createElement(\"g\", {\n        style: style\n      }, svgDraw(this.getMoreProps()));\n    }\n  }]);\n\n  return GenericComponent;\n}(React.Component);\nGenericComponent.defaultProps = {\n  svgDraw: functor(null),\n  draw: [],\n  canvasToDraw: function canvasToDraw(contexts) {\n    return contexts.mouseCoord;\n  },\n  clip: true,\n  edgeClip: false,\n  selected: false,\n  disablePan: false,\n  enableDragOnHover: false\n};\nGenericComponent.contextTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  margin: PropTypes.object.isRequired,\n  chartId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  getCanvasContexts: PropTypes.func,\n  xScale: PropTypes.func.isRequired,\n  xAccessor: PropTypes.func.isRequired,\n  displayXAccessor: PropTypes.func.isRequired,\n  plotData: PropTypes.array.isRequired,\n  fullData: PropTypes.array.isRequired,\n  chartConfig: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired,\n  morePropsDecorator: PropTypes.func,\n  generateSubscriptionId: PropTypes.func,\n  getMutableState: PropTypes.func.isRequired,\n  amIOnTop: PropTypes.func.isRequired,\n  subscribe: PropTypes.func.isRequired,\n  unsubscribe: PropTypes.func.isRequired,\n  setCursorClass: PropTypes.func.isRequired\n};\nexport var getAxisCanvas = function getAxisCanvas(contexts) {\n  return contexts.axes;\n};\nexport var getMouseCanvas = function getMouseCanvas(contexts) {\n  return contexts.mouseCoord;\n};","map":null,"metadata":{},"sourceType":"module"}