{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { getClosestItemIndexes, getStrokeDasharrayCanvas, getAxisCanvas, getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nimport { line } from \"d3-shape\";\nimport * as React from \"react\";\n/**\n * `LineSeries` component.\n */\n\nexport var LineSeries = /*#__PURE__*/function (_React$Component) {\n  _inherits(LineSeries, _React$Component);\n\n  var _super = _createSuper(LineSeries);\n\n  function LineSeries() {\n    var _this;\n\n    _classCallCheck(this, LineSeries);\n\n    _this = _super.apply(this, arguments);\n\n    _this.drawOnCanvas = function (lineDash) {\n      return function (ctx, moreProps) {\n        var _this$props = _this.props,\n            connectNulls = _this$props.connectNulls,\n            yAccessor = _this$props.yAccessor,\n            _this$props$hoverStro = _this$props.hoverStrokeWidth,\n            hoverStrokeWidth = _this$props$hoverStro === void 0 ? LineSeries.defaultProps.hoverStrokeWidth : _this$props$hoverStro,\n            _this$props$defined = _this$props.defined,\n            defined = _this$props$defined === void 0 ? LineSeries.defaultProps.defined : _this$props$defined,\n            curve = _this$props.curve,\n            canvasClip = _this$props.canvasClip,\n            strokeStyle = _this$props.strokeStyle,\n            _this$props$strokeWid = _this$props.strokeWidth,\n            strokeWidth = _this$props$strokeWid === void 0 ? LineSeries.defaultProps.strokeWidth : _this$props$strokeWid;\n        var xAccessor = moreProps.xAccessor,\n            xScale = moreProps.xScale,\n            yScale = moreProps.chartConfig.yScale,\n            plotData = moreProps.plotData,\n            hovering = moreProps.hovering;\n\n        if (canvasClip !== undefined) {\n          ctx.save();\n          canvasClip(ctx, moreProps);\n        }\n\n        ctx.lineWidth = hovering ? hoverStrokeWidth : strokeWidth;\n\n        if (strokeStyle !== undefined) {\n          ctx.strokeStyle = strokeStyle;\n        }\n\n        if (lineDash !== undefined) {\n          ctx.setLineDash(lineDash);\n        }\n\n        var dataSeries = line().x(function (d) {\n          return Math.round(xScale(xAccessor(d)));\n        }).y(function (d) {\n          return Math.round(yScale(yAccessor(d)));\n        });\n\n        if (curve !== undefined) {\n          dataSeries.curve(curve);\n        }\n\n        if (!connectNulls) {\n          dataSeries.defined(function (d) {\n            return defined(yAccessor(d));\n          });\n        }\n\n        ctx.beginPath();\n        dataSeries.context(ctx)(plotData);\n        ctx.stroke();\n\n        if (canvasClip !== undefined) {\n          ctx.restore();\n        }\n      };\n    };\n\n    _this.isHover = function (moreProps) {\n      var _this$props2 = _this.props,\n          highlightOnHover = _this$props2.highlightOnHover,\n          yAccessor = _this$props2.yAccessor,\n          _this$props2$hoverTol = _this$props2.hoverTolerance,\n          hoverTolerance = _this$props2$hoverTol === void 0 ? LineSeries.defaultProps.hoverTolerance : _this$props2$hoverTol;\n\n      if (!highlightOnHover) {\n        return false;\n      }\n\n      var _moreProps$chartConfi = moreProps.chartConfig,\n          yScale = _moreProps$chartConfi.yScale,\n          origin = _moreProps$chartConfi.origin,\n          xAccessor = moreProps.xAccessor,\n          mouseXY = moreProps.mouseXY,\n          currentItem = moreProps.currentItem,\n          xScale = moreProps.xScale,\n          plotData = moreProps.plotData;\n\n      var _mouseXY = _slicedToArray(mouseXY, 2),\n          x = _mouseXY[0],\n          y = _mouseXY[1];\n\n      var radius = hoverTolerance;\n\n      var _getClosestItemIndexe = getClosestItemIndexes(plotData, xScale.invert(x), xAccessor),\n          left = _getClosestItemIndexe.left,\n          right = _getClosestItemIndexe.right;\n\n      if (left === right) {\n        var cy = yScale(yAccessor(currentItem)) + origin[1];\n        var cx = xScale(xAccessor(currentItem)) + origin[0];\n        var hovering1 = Math.pow(x - cx, 2) + Math.pow(y - cy, 2) < Math.pow(radius, 2);\n        return hovering1;\n      } else {\n        var l = plotData[left];\n        var r = plotData[right];\n        var x1 = xScale(xAccessor(l)) + origin[0];\n        var y1 = yScale(yAccessor(l)) + origin[1];\n        var x2 = xScale(xAccessor(r)) + origin[0];\n        var y2 = yScale(yAccessor(r)) + origin[1]; // y = m * x + b\n\n        var m\n        /* slope */\n        = (y2 - y1) / (x2 - x1);\n        var b\n        /* y intercept */\n        = -1 * m * x1 + y1;\n        var desiredY = Math.round(m * x + b);\n        var hovering2 = y >= desiredY - radius && y <= desiredY + radius;\n        return hovering2;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(LineSeries, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          highlightOnHover = _this$props3.highlightOnHover,\n          onClick = _this$props3.onClick,\n          onContextMenu = _this$props3.onContextMenu,\n          onDoubleClick = _this$props3.onDoubleClick,\n          onHover = _this$props3.onHover,\n          onUnHover = _this$props3.onUnHover,\n          strokeDasharray = _this$props3.strokeDasharray;\n      var hoverProps = highlightOnHover || onHover || onUnHover ? {\n        isHover: this.isHover,\n        drawOn: [\"mousemove\", \"pan\"],\n        canvasToDraw: getMouseCanvas\n      } : {\n        drawOn: [\"pan\"],\n        canvasToDraw: getAxisCanvas\n      };\n      var lineDash = getStrokeDasharrayCanvas(strokeDasharray);\n      return React.createElement(GenericChartComponent, Object.assign({\n        canvasDraw: this.drawOnCanvas(lineDash),\n        onClickWhenHover: onClick,\n        onDoubleClickWhenHover: onDoubleClick,\n        onContextMenuWhenHover: onContextMenu,\n        onHover: onHover,\n        onUnHover: onUnHover\n      }, hoverProps));\n    }\n  }]);\n\n  return LineSeries;\n}(React.Component);\nLineSeries.defaultProps = {\n  connectNulls: false,\n  defined: function defined(d) {\n    return d !== undefined && !isNaN(d);\n  },\n  hoverStrokeWidth: 4,\n  hoverTolerance: 6,\n  highlightOnHover: false,\n  strokeDasharray: \"Solid\",\n  strokeStyle: \"#2196f3\",\n  strokeWidth: 1\n};","map":null,"metadata":{},"sourceType":"module"}