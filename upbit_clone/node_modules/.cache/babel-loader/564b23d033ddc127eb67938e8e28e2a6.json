{"ast":null,"code":"import _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from \"react\";\nimport { isDefined, noop } from \"@react-financial-charts/core\";\nimport { getXValue } from \"@react-financial-charts/core/lib/utils/ChartDataUtil\";\nimport { isHover, saveNodeType } from \"../utils\";\nimport { ChannelWithArea, ClickableCircle, HoverTextNearMouse } from \"../components\";\nexport var EachEquidistantChannel = /*#__PURE__*/function (_React$Component) {\n  _inherits(EachEquidistantChannel, _React$Component);\n\n  var _super = _createSuper(EachEquidistantChannel);\n\n  function EachEquidistantChannel(props) {\n    var _this;\n\n    _classCallCheck(this, EachEquidistantChannel);\n\n    _this = _super.call(this, props);\n\n    _this.getEdgeCircle = function (_ref) {\n      var xy = _ref.xy,\n          dragHandler = _ref.dragHandler,\n          cursor = _ref.cursor,\n          fill = _ref.fill,\n          edge = _ref.edge;\n      var hover = _this.state.hover;\n      var appearance = _this.props.appearance;\n      var edgeStroke = appearance.edgeStroke,\n          edgeStrokeWidth = appearance.edgeStrokeWidth,\n          r = appearance.r;\n      var selected = _this.props.selected;\n      var onDragComplete = _this.props.onDragComplete;\n      return React.createElement(ClickableCircle, {\n        ref: _this.saveNodeType(edge),\n        show: selected || hover,\n        cx: xy[0],\n        cy: xy[1],\n        r: r,\n        fillStyle: fill,\n        strokeStyle: edgeStroke,\n        strokeWidth: edgeStrokeWidth,\n        interactiveCursorClass: cursor,\n        onDragStart: _this.handleDragStart,\n        onDrag: dragHandler,\n        onDragComplete: onDragComplete\n      });\n    };\n\n    _this.handleChannelHeightChange = function (e, moreProps) {\n      var _this$props = _this.props,\n          index = _this$props.index,\n          onDrag = _this$props.onDrag;\n      var _this$dragStart = _this.dragStart,\n          startXY = _this$dragStart.startXY,\n          endXY = _this$dragStart.endXY;\n      var yScale = moreProps.chartConfig.yScale;\n      var startPos = moreProps.startPos,\n          mouseXY = moreProps.mouseXY;\n      var y2 = yScale(endXY[1]);\n      var dy = startPos[1] - mouseXY[1];\n      var newY2Value = yScale.invert(y2 - dy);\n      var newDy = newY2Value - endXY[1] + _this.dragStart.dy;\n      onDrag(e, index, {\n        startXY: startXY,\n        endXY: endXY,\n        dy: newDy\n      });\n    };\n\n    _this.handleLine1Edge2Drag = function (e, moreProps) {\n      var _this$props2 = _this.props,\n          index = _this$props2.index,\n          onDrag = _this$props2.onDrag;\n      var endXY = _this.dragStart.endXY;\n      var startPos = moreProps.startPos,\n          mouseXY = moreProps.mouseXY,\n          xAccessor = moreProps.xAccessor,\n          xScale = moreProps.xScale,\n          fullData = moreProps.fullData,\n          yScale = moreProps.chartConfig.yScale;\n      var dx = startPos[0] - mouseXY[0];\n      var dy = startPos[1] - mouseXY[1];\n      var x1 = xScale(endXY[0]);\n      var y1 = yScale(endXY[1]);\n      var newX1Value = getXValue(xScale, xAccessor, [x1 - dx, y1 - dy], fullData);\n      var newY1Value = yScale.invert(y1 - dy);\n      onDrag(e, index, {\n        startXY: _this.dragStart.startXY,\n        endXY: [newX1Value, newY1Value],\n        dy: _this.dragStart.dy\n      });\n    };\n\n    _this.handleLine1Edge1Drag = function (e, moreProps) {\n      var _this$props3 = _this.props,\n          index = _this$props3.index,\n          onDrag = _this$props3.onDrag;\n      var startXY = _this.dragStart.startXY;\n      var startPos = moreProps.startPos,\n          mouseXY = moreProps.mouseXY,\n          xAccessor = moreProps.xAccessor,\n          xScale = moreProps.xScale,\n          fullData = moreProps.fullData,\n          yScale = moreProps.chartConfig.yScale;\n      var dx = startPos[0] - mouseXY[0];\n      var dy = startPos[1] - mouseXY[1];\n      var x1 = xScale(startXY[0]);\n      var y1 = yScale(startXY[1]);\n      var newX1Value = getXValue(xScale, xAccessor, [x1 - dx, y1 - dy], fullData);\n      var newY1Value = yScale.invert(y1 - dy);\n      onDrag(e, index, {\n        startXY: [newX1Value, newY1Value],\n        endXY: _this.dragStart.endXY,\n        dy: _this.dragStart.dy\n      });\n    };\n\n    _this.handleChannelDrag = function (e, moreProps) {\n      var _this$props4 = _this.props,\n          index = _this$props4.index,\n          onDrag = _this$props4.onDrag;\n      var _this$dragStart2 = _this.dragStart,\n          startXY = _this$dragStart2.startXY,\n          endXY = _this$dragStart2.endXY;\n      var xScale = moreProps.xScale,\n          yScale = moreProps.chartConfig.yScale,\n          xAccessor = moreProps.xAccessor,\n          fullData = moreProps.fullData;\n      var startPos = moreProps.startPos,\n          mouseXY = moreProps.mouseXY;\n      var x1 = xScale(startXY[0]);\n      var y1 = yScale(startXY[1]);\n      var x2 = xScale(endXY[0]);\n      var y2 = yScale(endXY[1]);\n      var dx = startPos[0] - mouseXY[0];\n      var dy = startPos[1] - mouseXY[1];\n      var newX1Value = getXValue(xScale, xAccessor, [x1 - dx, y1 - dy], fullData);\n      var newY1Value = yScale.invert(y1 - dy);\n      var newX2Value = getXValue(xScale, xAccessor, [x2 - dx, y2 - dy], fullData);\n      var newY2Value = yScale.invert(y2 - dy);\n      onDrag(e, index, {\n        startXY: [newX1Value, newY1Value],\n        endXY: [newX2Value, newY2Value],\n        dy: _this.dragStart.dy\n      });\n    };\n\n    _this.handleDragStart = function () {\n      var _this$props5 = _this.props,\n          startXY = _this$props5.startXY,\n          endXY = _this$props5.endXY,\n          dy = _this$props5.dy;\n      _this.dragStart = {\n        startXY: startXY,\n        endXY: endXY,\n        dy: dy\n      };\n    };\n\n    _this.handleHover = function (_, moreProps) {\n      if (_this.state.hover !== moreProps.hovering) {\n        _this.setState({\n          hover: moreProps.hovering\n        });\n      }\n    };\n\n    _this.isHover = isHover.bind(_assertThisInitialized(_this));\n    _this.saveNodeType = saveNodeType.bind(_assertThisInitialized(_this));\n    _this.state = {\n      hover: false\n    };\n    return _this;\n  }\n\n  _createClass(EachEquidistantChannel, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          startXY = _this$props6.startXY,\n          endXY = _this$props6.endXY,\n          dy = _this$props6.dy;\n      var _this$props7 = this.props,\n          interactive = _this$props7.interactive,\n          hoverText = _this$props7.hoverText,\n          appearance = _this$props7.appearance;\n      var edgeFill = appearance.edgeFill,\n          edgeFill2 = appearance.edgeFill2,\n          stroke = appearance.stroke,\n          strokeWidth = appearance.strokeWidth,\n          fill = appearance.fill;\n      var selected = this.props.selected;\n      var onDragComplete = this.props.onDragComplete;\n      var hover = this.state.hover;\n\n      var hoverTextEnabled = hoverText.enable,\n          restHoverTextProps = __rest(hoverText, [\"enable\"]);\n\n      var hoverHandler = interactive ? {\n        onHover: this.handleHover,\n        onUnHover: this.handleHover\n      } : {};\n      var line1Edge = isDefined(startXY) && isDefined(endXY) ? React.createElement(\"g\", null, this.getEdgeCircle({\n        xy: startXY,\n        dragHandler: this.handleLine1Edge1Drag,\n        cursor: \"react-financial-charts-move-cursor\",\n        fill: edgeFill,\n        edge: \"line1edge1\"\n      }), this.getEdgeCircle({\n        xy: endXY,\n        dragHandler: this.handleLine1Edge2Drag,\n        cursor: \"react-financial-charts-move-cursor\",\n        fill: edgeFill,\n        edge: \"line1edge2\"\n      })) : null;\n      var line2Edge = dy !== undefined && isDefined(dy) ? React.createElement(\"g\", null, this.getEdgeCircle({\n        xy: [startXY[0], startXY[1] + dy],\n        dragHandler: this.handleChannelHeightChange,\n        cursor: \"react-financial-charts-ns-resize-cursor\",\n        fill: edgeFill2,\n        edge: \"line2edge1\"\n      }), this.getEdgeCircle({\n        xy: [endXY[0], endXY[1] + dy],\n        dragHandler: this.handleChannelHeightChange,\n        cursor: \"react-financial-charts-ns-resize-cursor\",\n        fill: edgeFill2,\n        edge: \"line2edge2\"\n      })) : null;\n      return React.createElement(\"g\", null, React.createElement(ChannelWithArea, Object.assign({\n        ref: this.saveNodeType(\"channel\"),\n        selected: selected || hover\n      }, hoverHandler, {\n        startXY: startXY,\n        endXY: endXY,\n        dy: dy,\n        strokeStyle: stroke,\n        strokeWidth: hover || selected ? strokeWidth + 1 : strokeWidth,\n        fillStyle: fill,\n        interactiveCursorClass: \"react-financial-charts-move-cursor\",\n        onDragStart: this.handleDragStart,\n        onDrag: this.handleChannelDrag,\n        onDragComplete: onDragComplete\n      })), line1Edge, line2Edge, React.createElement(HoverTextNearMouse, Object.assign({\n        show: hoverTextEnabled && hover && !selected\n      }, restHoverTextProps)));\n    }\n  }]);\n\n  return EachEquidistantChannel;\n}(React.Component);\nEachEquidistantChannel.defaultProps = {\n  yDisplayFormat: function yDisplayFormat(d) {\n    return d.toFixed(2);\n  },\n  interactive: true,\n  selected: false,\n  onDrag: noop,\n  hoverText: {\n    enable: false\n  }\n};","map":null,"metadata":{},"sourceType":"module"}