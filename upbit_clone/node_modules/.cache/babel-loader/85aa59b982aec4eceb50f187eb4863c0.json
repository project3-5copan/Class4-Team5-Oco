{"ast":null,"code":"import _slicedToArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from \"react\";\nimport { isDefined, GenericChartComponent } from \"@react-financial-charts/core\";\nvar PADDING = 10;\nvar MIN_WIDTH = PADDING;\nexport var HoverTextNearMouse = /*#__PURE__*/function (_React$Component) {\n  _inherits(HoverTextNearMouse, _React$Component);\n\n  var _super = _createSuper(HoverTextNearMouse);\n\n  function HoverTextNearMouse(props) {\n    var _this;\n\n    _classCallCheck(this, HoverTextNearMouse);\n\n    _this = _super.call(this, props);\n    _this.textNode = React.createRef();\n\n    _this.renderSVG = function (moreProps) {\n      var _this$props = _this.props,\n          fontFamily = _this$props.fontFamily,\n          fontSize = _this$props.fontSize,\n          fill = _this$props.fill,\n          bgFill = _this$props.bgFill,\n          bgOpacity = _this$props.bgOpacity;\n      var textMetaData = helper(Object.assign(Object.assign({}, _this.props), {\n        bgWidth: _this.getBgWidth(),\n        bgHeight: _this.getBgHeight()\n      }), moreProps);\n\n      if (textMetaData !== undefined && isDefined(textMetaData)) {\n        var rect = textMetaData.rect,\n            text = textMetaData.text;\n        return React.createElement(\"g\", null, React.createElement(\"rect\", Object.assign({\n          fill: bgFill,\n          fillOpacity: bgOpacity,\n          stroke: bgFill\n        }, rect)), React.createElement(\"text\", {\n          ref: _this.textNode,\n          fontSize: fontSize,\n          fontFamily: fontFamily,\n          textAnchor: \"start\",\n          alignmentBaseline: \"central\",\n          fill: fill,\n          x: text.x,\n          y: text.y\n        }, text.text));\n      }\n\n      return null;\n    };\n\n    _this.getBgHeight = function () {\n      var bgHeight = _this.props.bgHeight;\n      var textHeight = _this.state.textHeight;\n\n      if (bgHeight !== \"auto\") {\n        return bgHeight;\n      } else if (textHeight !== undefined) {\n        return textHeight + PADDING;\n      } else {\n        return MIN_WIDTH;\n      }\n    };\n\n    _this.getBgWidth = function () {\n      var bgWidth = _this.props.bgWidth;\n      var textWidth = _this.state.textWidth;\n\n      if (bgWidth !== \"auto\") {\n        return bgWidth;\n      } else if (textWidth !== undefined) {\n        return textWidth + PADDING;\n      } else {\n        return MIN_WIDTH;\n      }\n    };\n\n    _this.updateTextSize = function () {\n      var _this$props2 = _this.props,\n          bgWidth = _this$props2.bgWidth,\n          bgHeight = _this$props2.bgHeight;\n\n      if (bgWidth === \"auto\" || bgHeight === \"auto\") {\n        var textNode = _this.textNode.current;\n\n        if (textNode !== null) {\n          var _textNode$getBBox = textNode.getBBox(),\n              width = _textNode$getBBox.width,\n              height = _textNode$getBBox.height;\n\n          if (_this.state.textWidth !== width || _this.state.textHeight !== height) {\n            _this.setState({\n              textWidth: width,\n              textHeight: height\n            });\n          }\n        }\n      }\n    };\n\n    _this.state = {\n      textWidth: undefined,\n      textHeight: undefined\n    };\n    return _this;\n  }\n\n  _createClass(HoverTextNearMouse, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateTextSize();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.updateTextSize();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var text = this.props.text;\n\n      if (text) {\n        return React.createElement(GenericChartComponent, {\n          svgDraw: this.renderSVG,\n          drawOn: [\"mousemove\"]\n        });\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return HoverTextNearMouse;\n}(React.Component);\nHoverTextNearMouse.defaultProps = {\n  fontFamily: \"-apple-system, system-ui, Roboto, 'Helvetica Neue', Ubuntu, sans-serif\",\n  fontSize: 12,\n  fill: \"#000000\",\n  bgFill: \"#FA9325\",\n  bgOpacity: 0.5\n};\n\nfunction helper(props, moreProps) {\n  var show = props.show,\n      bgWidth = props.bgWidth,\n      bgHeight = props.bgHeight;\n  var mouseXY = moreProps.mouseXY,\n      _moreProps$chartConfi = moreProps.chartConfig,\n      height = _moreProps$chartConfi.height,\n      width = _moreProps$chartConfi.width,\n      mouseInsideCanvas = moreProps.show;\n\n  if (show && mouseInsideCanvas) {\n    var _mouseXY = _slicedToArray(mouseXY, 2),\n        x = _mouseXY[0],\n        y = _mouseXY[1];\n\n    var cx = x < width / 2 ? x + PADDING : x - bgWidth - PADDING;\n    var cy = y < height / 2 ? y + PADDING : y - bgHeight - PADDING;\n    var rect = {\n      x: cx,\n      y: cy,\n      width: bgWidth,\n      height: bgHeight\n    };\n    var text = {\n      text: props.text,\n      x: cx + PADDING / 2,\n      y: cy + bgHeight / 2\n    };\n    return {\n      rect: rect,\n      text: text\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"module"}