{"ast":null,"code":"import _toConsumableArray from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/taehyunpark/Desktop/Work/Class4-Team5-Oco/upbit_clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from \"react\";\nimport { isDefined, isNotDefined } from \"@react-financial-charts/core\";\nimport { getValueFromOverride, isHoverForInteractiveType, saveNodeType, terminate } from \"./utils\";\nimport { HoverTextNearMouse, MouseLocationIndicator } from \"./components\";\nimport { EachLinearRegressionChannel } from \"./wrapper\";\nexport var StandardDeviationChannel = /*#__PURE__*/function (_React$Component) {\n  _inherits(StandardDeviationChannel, _React$Component);\n\n  var _super = _createSuper(StandardDeviationChannel);\n\n  function StandardDeviationChannel(props) {\n    var _this;\n\n    _classCallCheck(this, StandardDeviationChannel);\n\n    _this = _super.call(this, props);\n\n    _this.handleEnd = function (e, xyValue, moreProps) {\n      var current = _this.state.current;\n      var _this$props = _this.props,\n          appearance = _this$props.appearance,\n          channels = _this$props.channels;\n\n      if (_this.mouseMoved && isDefined(current) && isDefined(current.start)) {\n        var newChannels = [].concat(_toConsumableArray(channels.map(function (d) {\n          return Object.assign(Object.assign({}, d), {\n            selected: false\n          });\n        })), [{\n          start: current.start,\n          end: xyValue,\n          selected: true,\n          appearance: appearance\n        }]);\n\n        _this.setState({\n          current: null\n        }, function () {\n          var onComplete = _this.props.onComplete;\n\n          if (onComplete !== undefined) {\n            onComplete(e, newChannels, moreProps);\n          }\n        });\n      }\n    };\n\n    _this.handleStart = function (_, xyValue) {\n      var current = _this.state.current;\n\n      if (isNotDefined(current) || isNotDefined(current.start)) {\n        _this.mouseMoved = false;\n\n        _this.setState({\n          current: {\n            start: xyValue,\n            end: null\n          }\n        }, function () {\n          var onStart = _this.props.onStart;\n\n          if (onStart !== undefined) {\n            onStart();\n          }\n        });\n      }\n    };\n\n    _this.handleDrawLine = function (e, xyValue) {\n      var current = _this.state.current;\n\n      if (isDefined(current) && isDefined(current.start)) {\n        _this.mouseMoved = true;\n\n        _this.setState({\n          current: {\n            start: current.start,\n            end: xyValue\n          }\n        });\n      }\n    };\n\n    _this.handleDragLineComplete = function (e, moreProps) {\n      var override = _this.state.override;\n      var channels = _this.props.channels;\n\n      if (isDefined(override)) {\n        var newChannels = channels.map(function (each, idx) {\n          return idx === override.index ? Object.assign(Object.assign({}, each), {\n            start: [override.x1Value, override.y1Value],\n            end: [override.x2Value, override.y2Value],\n            selected: true\n          }) : each;\n        });\n\n        _this.setState({\n          override: null\n        }, function () {\n          var onComplete = _this.props.onComplete;\n\n          if (onComplete !== undefined) {\n            onComplete(e, newChannels, moreProps);\n          }\n        });\n      }\n    };\n\n    _this.handleDragLine = function (e, index, newXYValue) {\n      _this.setState({\n        override: Object.assign({\n          index: index\n        }, newXYValue)\n      });\n    };\n\n    _this.terminate = terminate.bind(_assertThisInitialized(_this));\n    _this.saveNodeType = saveNodeType.bind(_assertThisInitialized(_this));\n    _this.getSelectionState = isHoverForInteractiveType(\"channels\").bind(_assertThisInitialized(_this));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(StandardDeviationChannel, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          appearance = _this$props2.appearance,\n          channels = _this$props2.channels,\n          currentPositionOpacity = _this$props2.currentPositionOpacity,\n          _this$props2$currentP = _this$props2.currentPositionRadius,\n          currentPositionRadius = _this$props2$currentP === void 0 ? StandardDeviationChannel.defaultProps.currentPositionRadius : _this$props2$currentP,\n          currentPositionStroke = _this$props2.currentPositionStroke,\n          currentPositionStrokeWidth = _this$props2.currentPositionStrokeWidth,\n          enabled = _this$props2.enabled,\n          hoverText = _this$props2.hoverText,\n          snapTo = _this$props2.snapTo;\n      var _this$state = this.state,\n          current = _this$state.current,\n          override = _this$state.override;\n      var eachDefaultAppearance = Object.assign(Object.assign({}, StandardDeviationChannel.defaultProps.appearance), appearance);\n      var hoverTextDefault = Object.assign(Object.assign({}, StandardDeviationChannel.defaultProps.hoverText), hoverText);\n      var tempLine = isDefined(current) && isDefined(current.end) ? React.createElement(EachLinearRegressionChannel, {\n        interactive: false,\n        x1Value: current.start[0],\n        x2Value: current.end[0],\n        appearance: eachDefaultAppearance,\n        hoverText: hoverTextDefault\n      }) : null;\n      return React.createElement(\"g\", null, channels.map(function (each, idx) {\n        var eachAppearance = isDefined(each.appearance) ? Object.assign(Object.assign({}, eachDefaultAppearance), each.appearance) : eachDefaultAppearance;\n        var eachHoverText = isDefined(each.hoverText) ? Object.assign(Object.assign({}, hoverTextDefault), each.hoverText) : hoverTextDefault;\n        return React.createElement(EachLinearRegressionChannel, {\n          key: idx,\n          ref: _this2.saveNodeType(idx),\n          index: idx,\n          selected: each.selected,\n          x1Value: getValueFromOverride(override, idx, \"x1Value\", each.start[0]),\n          x2Value: getValueFromOverride(override, idx, \"x2Value\", each.end[0]),\n          appearance: eachAppearance,\n          snapTo: snapTo,\n          hoverText: eachHoverText,\n          onDrag: _this2.handleDragLine,\n          onDragComplete: _this2.handleDragLineComplete,\n          edgeInteractiveCursor: \"react-financial-charts-move-cursor\"\n        });\n      }), tempLine, React.createElement(MouseLocationIndicator, {\n        enabled: enabled,\n        snap: true,\n        snapTo: snapTo,\n        r: currentPositionRadius,\n        stroke: currentPositionStroke,\n        opacity: currentPositionOpacity,\n        strokeWidth: currentPositionStrokeWidth,\n        onMouseDown: this.handleStart,\n        onClick: this.handleEnd,\n        onMouseMove: this.handleDrawLine\n      }));\n    }\n  }]);\n\n  return StandardDeviationChannel;\n}(React.Component);\nStandardDeviationChannel.defaultProps = {\n  snapTo: function snapTo(d) {\n    return d.close;\n  },\n  appearance: {\n    stroke: \"#000000\",\n    fillOpacity: 0.2,\n    strokeOpacity: 1,\n    strokeWidth: 1,\n    fill: \"#8AAFE2\",\n    edgeStrokeWidth: 2,\n    edgeStroke: \"#000000\",\n    edgeFill: \"#FFFFFF\",\n    r: 5\n  },\n  currentPositionStroke: \"#000000\",\n  currentPositionOpacity: 1,\n  currentPositionStrokeWidth: 3,\n  currentPositionRadius: 4,\n  hoverText: Object.assign(Object.assign({}, HoverTextNearMouse.defaultProps), {\n    enable: true,\n    bgHeight: \"auto\",\n    bgWidth: \"auto\",\n    text: \"Click and drag the edge circles\",\n    selectedText: \"\"\n  }),\n  channels: []\n};","map":null,"metadata":{},"sourceType":"module"}