import * as React from "react";
export interface EachFibRetracementProps {
    readonly x1: any;
    readonly x2: any;
    readonly y1: number;
    readonly y2: number;
    readonly yDisplayFormat: (value: number) => string;
    readonly type: string;
    readonly selected: boolean;
    readonly appearance: {
        readonly strokeStyle: string;
        readonly strokeWidth: number;
        readonly fontFamily: string;
        readonly fontSize: number;
        readonly fontFill: string;
        readonly edgeStroke: string;
        readonly edgeFill: string;
        readonly nsEdgeFill: string;
        readonly edgeStrokeWidth: number;
        readonly r: number;
    };
    readonly interactive: boolean;
    readonly hoverText: {
        readonly enable: boolean;
        readonly fontFamily: string;
        readonly fontSize: number;
        readonly fill: string;
        readonly text: string;
        readonly bgFill: string;
        readonly bgOpacity: number;
        readonly bgWidth: number | string;
        readonly bgHeight: number | string;
        readonly selectedText: string;
    };
    readonly index?: number;
    readonly onDrag: (e: React.MouseEvent, index: number | undefined, moreProps: any) => void;
    readonly onDragComplete?: (e: React.MouseEvent, moreProps: any) => void;
}
interface EachFibRetracementState {
    hover: boolean;
}
export declare class EachFibRetracement extends React.Component<EachFibRetracementProps, EachFibRetracementState> {
    static defaultProps: {
        yDisplayFormat: (d: number) => string;
        interactive: boolean;
        appearance: {
            strokeStyle: string;
            strokeWidth: number;
            fontFamily: string;
            fontSize: number;
            fontFill: string;
            edgeStroke: string;
            edgeFill: string;
            nsEdgeFill: string;
            edgeStrokeWidth: number;
            r: number;
        };
        selected: boolean;
        onDrag: () => void;
        hoverText: {
            enable: boolean;
        };
    };
    private dragStart;
    private isHover;
    private saveNodeType;
    constructor(props: EachFibRetracementProps);
    render(): JSX.Element;
    private readonly handleEdge2Drag;
    private readonly handleEdge1Drag;
    private readonly handleLineNSResizeBottom;
    private readonly handleLineNSResizeTop;
    private readonly handleLineMove;
    private readonly handleLineDragStart;
    private readonly handleHover;
}
export {};
