import * as React from "react";
export interface StandardDeviationChannelProps {
    readonly enabled: boolean;
    readonly snapTo?: (datum: any) => number;
    readonly onStart?: () => void;
    readonly onComplete?: (e: React.MouseEvent, newChannels: any, moreProps: any) => void;
    readonly onSelect?: (e: React.MouseEvent, interactives: any[], moreProps: any) => void;
    readonly currentPositionStroke?: string;
    readonly currentPositionStrokeWidth?: number;
    readonly currentPositionOpacity?: number;
    readonly currentPositionRadius?: number;
    readonly appearance: {
        readonly stroke?: string;
        readonly strokeOpacity?: number;
        readonly strokeWidth?: number;
        readonly fill?: string;
        readonly fillOpacity?: number;
        readonly edgeStrokeWidth?: number;
        readonly edgeStroke?: string;
        readonly edgeFill?: string;
        readonly r?: number;
    };
    readonly hoverText: object;
    readonly channels: any[];
}
interface StandardDeviationChannelState {
    current?: any;
    override?: any;
}
export declare class StandardDeviationChannel extends React.Component<StandardDeviationChannelProps, StandardDeviationChannelState> {
    static defaultProps: {
        snapTo: (d: any) => any;
        appearance: {
            stroke: string;
            fillOpacity: number;
            strokeOpacity: number;
            strokeWidth: number;
            fill: string;
            edgeStrokeWidth: number;
            edgeStroke: string;
            edgeFill: string;
            r: number;
        };
        currentPositionStroke: string;
        currentPositionOpacity: number;
        currentPositionStrokeWidth: number;
        currentPositionRadius: number;
        hoverText: {
            enable: boolean;
            bgHeight: string;
            bgWidth: string;
            text: string;
            selectedText: string;
            fontFamily: string;
            fontSize: number;
            fill: string;
            bgFill: string;
            bgOpacity: number;
        };
        channels: never[];
    };
    private getSelectionState;
    private mouseMoved;
    private saveNodeType;
    private terminate;
    constructor(props: StandardDeviationChannelProps);
    render(): JSX.Element;
    private handleEnd;
    private readonly handleStart;
    private readonly handleDrawLine;
    private readonly handleDragLineComplete;
    private readonly handleDragLine;
}
export {};
