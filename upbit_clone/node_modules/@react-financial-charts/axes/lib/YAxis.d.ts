import { strokeDashTypes } from "@react-financial-charts/core";
import * as PropTypes from "prop-types";
import * as React from "react";
export interface YAxisProps {
    readonly axisAt?: number | "left" | "right" | "middle";
    readonly className?: string;
    readonly domainClassName?: string;
    readonly fontFamily?: string;
    readonly fontSize?: number;
    readonly fontWeight?: number;
    readonly getMouseDelta?: (startXY: [number, number], mouseXY: [number, number]) => number;
    readonly gridLinesStrokeStyle?: string;
    readonly gridLinesStrokeWidth?: number;
    readonly gridLinesStrokeDasharray?: strokeDashTypes;
    readonly innerTickSize?: number;
    readonly onContextMenu?: (e: React.MouseEvent, mousePosition: [number, number]) => void;
    readonly onDoubleClick?: (e: React.MouseEvent, mousePosition: [number, number]) => void;
    readonly orient?: "left" | "right";
    readonly outerTickSize?: number;
    readonly showDomain?: boolean;
    readonly showGridLines?: boolean;
    readonly showTicks?: boolean;
    readonly showTickLabel?: boolean;
    readonly strokeStyle?: string;
    readonly strokeWidth?: number;
    readonly tickFormat?: (value: number) => string;
    readonly tickPadding?: number;
    readonly tickSize?: number;
    readonly tickLabelFill?: string;
    readonly ticks?: number;
    readonly tickStrokeStyle?: string;
    readonly tickStrokeWidth?: number;
    readonly tickStrokeDasharray?: strokeDashTypes;
    readonly tickValues?: number[];
    readonly yZoomWidth?: number;
    readonly zoomEnabled?: boolean;
    readonly zoomCursorClassName?: string;
}
export declare class YAxis extends React.Component<YAxisProps> {
    static defaultProps: {
        axisAt: string;
        className: string;
        domainClassName: string;
        fontFamily: string;
        fontSize: number;
        fontWeight: number;
        getMouseDelta: (startXY: [number, number], mouseXY: [number, number]) => number;
        gridLinesStrokeStyle: string;
        gridLinesStrokeWidth: number;
        innerTickSize: number;
        outerTickSize: number;
        orient: string;
        showDomain: boolean;
        showGridLines: boolean;
        showTicks: boolean;
        showTickLabel: boolean;
        strokeStyle: string;
        strokeWidth: number;
        tickPadding: number;
        tickLabelFill: string;
        tickStrokeStyle: string;
        yZoomWidth: number;
        zoomEnabled: boolean;
        zoomCursorClassName: string;
    };
    static contextTypes: {
        yAxisZoom: PropTypes.Validator<(...args: any[]) => any>;
        chartId: PropTypes.Validator<string | number>;
        chartConfig: PropTypes.Validator<object>;
    };
    render(): JSX.Element;
    private readonly axisZoomCallback;
    private readonly helper;
    private readonly getYTicks;
    private readonly getYScale;
}
