import { ScaleContinuousNumeric } from "d3-scale";
import * as React from "react";
export interface StackedBarSeriesProps {
    readonly baseAt?: number | ((xScale: ScaleContinuousNumeric<number, number>, yScale: ScaleContinuousNumeric<number, number>, d: [number, number], moreProps: any) => number);
    readonly clip?: boolean;
    readonly direction?: "up" | "down";
    readonly fillStyle?: string | ((data: any, y: number) => string);
    readonly spaceBetweenBar?: number;
    readonly stroke?: boolean;
    readonly swapScales?: boolean;
    readonly yAccessor: ((data: any) => number | undefined) | ((d: any) => number)[];
    readonly width?: number | ((props: StackedBarSeriesProps, moreProps: any) => number);
    readonly widthRatio?: number;
}
export declare class StackedBarSeries extends React.Component<StackedBarSeriesProps> {
    static defaultProps: {
        baseAt: (xScale: ScaleContinuousNumeric<number, number>, yScale: ScaleContinuousNumeric<number, number>) => any;
        direction: string;
        stroke: boolean;
        fillStyle: string;
        width: <T>(props: {
            widthRatio: number;
        }, moreProps: {
            xAccessor: (datum: T) => number | Date;
            xScale: import("d3-scale").ScaleTime<number, number> | ScaleContinuousNumeric<number, number>;
            plotData: T[];
        }) => number;
        widthRatio: number;
        clip: boolean;
        swapScales: boolean;
    };
    render(): JSX.Element;
    private readonly drawOnCanvas;
}
export declare function identityStack(): {
    (data: any): any[];
    keys(x: any): any[] | any;
};
export declare function drawOnCanvasHelper(ctx: CanvasRenderingContext2D, props: any, moreProps: any, xAccessor: any, stackFn: any, defaultPostAction?: (d: any) => any, postRotateAction?: (array: any[]) => any[]): void;
export declare const rotateXY: (array: any[]) => any[];
export declare const drawOnCanvas2: (props: {
    stroke?: boolean;
}, ctx: CanvasRenderingContext2D, bars: any) => void;
export declare function getBars(props: StackedBarSeriesProps, xAccessor: any, yAccessor: any, xScale: any, yScale: any, plotData: any[], stack?: typeof identityStack, after?: (d: any) => any): any;
