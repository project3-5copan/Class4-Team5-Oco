import { functor, head, getAxisCanvas, GenericChartComponent, plotDataLengthBarWidth, } from "@react-financial-charts/core";
import { group } from "d3-array";
import * as React from "react";
import { drawOnCanvasHelper, identityStack } from "./StackedBarSeries";
/**
 * A `BarSeries` component.
 */
export class BarSeries extends React.Component {
    constructor() {
        super(...arguments);
        this.drawOnCanvas = (ctx, moreProps) => {
            if (this.props.swapScales) {
                const { xAccessor } = moreProps;
                drawOnCanvasHelper(ctx, this.props, moreProps, xAccessor, identityStack);
            }
            else {
                const bars = this.getBars(moreProps);
                const { strokeStyle } = this.props;
                const nest = group(bars, (d) => d.fillStyle);
                nest.forEach((values, key) => {
                    if (strokeStyle !== undefined) {
                        if (head(values).width > 1) {
                            ctx.strokeStyle = strokeStyle;
                        }
                    }
                    ctx.fillStyle = key;
                    values.forEach((d) => {
                        if (d.width <= 1) {
                            ctx.fillRect(d.x - 0.5, d.y, 1, d.height);
                        }
                        else {
                            ctx.fillRect(d.x + 0.5, d.y + 0.5, d.width, d.height);
                            if (strokeStyle !== undefined) {
                                ctx.strokeRect(d.x, d.y, d.width, d.height);
                            }
                        }
                    });
                });
            }
        };
        this.getBars = (moreProps) => {
            const { baseAt, fillStyle, width, yAccessor } = this.props;
            const { xScale, xAccessor, plotData, chartConfig: { yScale }, } = moreProps;
            const getFill = functor(fillStyle);
            const getBase = functor(baseAt);
            const getWidth = functor(width);
            const barWidth = getWidth(this.props, {
                xScale,
                xAccessor,
                plotData,
            });
            const offset = Math.floor(0.5 * barWidth);
            return plotData
                .map((d) => {
                const yValue = yAccessor(d);
                if (yValue === undefined) {
                    return undefined;
                }
                const xValue = xAccessor(d);
                const x = Math.round(xScale(xValue)) - offset;
                let y = yScale(yValue);
                let h = getBase(xScale, yScale, d) - yScale(yValue);
                if (h < 0) {
                    y = y + h;
                    h = -h;
                }
                return {
                    x,
                    y: Math.round(y),
                    height: Math.round(h),
                    width: offset * 2,
                    fillStyle: getFill(d),
                };
            })
                .filter((d) => d !== undefined);
        };
    }
    render() {
        const { clip } = this.props;
        return (React.createElement(GenericChartComponent, { clip: clip, canvasToDraw: getAxisCanvas, canvasDraw: this.drawOnCanvas, drawOn: ["pan"] }));
    }
}
BarSeries.defaultProps = {
    baseAt: (xScale, yScale /* , d*/) => head(yScale.range()),
    clip: true,
    fillStyle: "rgba(70, 130, 180, 0.5)",
    swapScales: false,
    width: plotDataLengthBarWidth,
    widthRatio: 0.8,
};
//# sourceMappingURL=BarSeries.js.map