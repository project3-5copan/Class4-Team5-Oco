import { ScaleContinuousNumeric, ScaleTime } from "d3-scale";
import * as React from "react";
export interface ICandle {
    readonly x: number;
    readonly y: number;
    readonly height: number;
    readonly fill: string;
    readonly stroke: string;
    readonly direction: number;
    readonly width: number;
    readonly wick: {
        readonly stroke: string;
        readonly x: number;
        readonly y1: number;
        readonly y2: number;
        readonly y3: number;
        readonly y4: number;
    };
}
export interface CandlestickSeriesProps {
    readonly candleStrokeWidth?: number;
    readonly clip?: boolean;
    readonly fill?: string | ((data: any) => string);
    readonly stroke?: string | ((data: any) => string);
    readonly wickStroke?: string | ((data: any) => string);
    readonly width?: number | ((props: CandlestickSeriesProps, moreProps: any) => number);
    readonly widthRatio?: number;
    readonly yAccessor: (data: any) => {
        open: number;
        high: number;
        low: number;
        close: number;
    } | undefined;
}
export declare class CandlestickSeries extends React.Component<CandlestickSeriesProps> {
    static defaultProps: {
        candleStrokeWidth: number;
        clip: boolean;
        fill: (d: any) => "#26a69a" | "#ef5350";
        stroke: string;
        wickStroke: (d: any) => "#26a69a" | "#ef5350";
        width: <T>(props: {
            widthRatio: number;
        }, moreProps: {
            xAccessor: (datum: T) => number | Date;
            xScale: ScaleTime<number, number> | ScaleContinuousNumeric<number, number>;
            plotData: T[];
        }) => number;
        widthRatio: number;
        yAccessor: (d: any) => {
            open: any;
            high: any;
            low: any;
            close: any;
        };
    };
    render(): JSX.Element;
    private readonly drawOnCanvas;
    private readonly getCandleData;
}
