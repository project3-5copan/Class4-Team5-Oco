import { getClosestItemIndexes, getStrokeDasharrayCanvas, getAxisCanvas, getMouseCanvas, GenericChartComponent, } from "@react-financial-charts/core";
import { line } from "d3-shape";
import * as React from "react";
/**
 * `LineSeries` component.
 */
export class LineSeries extends React.Component {
    constructor() {
        super(...arguments);
        this.drawOnCanvas = (lineDash) => (ctx, moreProps) => {
            const { connectNulls, yAccessor, hoverStrokeWidth = LineSeries.defaultProps.hoverStrokeWidth, defined = LineSeries.defaultProps.defined, curve, canvasClip, strokeStyle, strokeWidth = LineSeries.defaultProps.strokeWidth, } = this.props;
            const { xAccessor, xScale, chartConfig: { yScale }, plotData, hovering, } = moreProps;
            if (canvasClip !== undefined) {
                ctx.save();
                canvasClip(ctx, moreProps);
            }
            ctx.lineWidth = hovering ? hoverStrokeWidth : strokeWidth;
            if (strokeStyle !== undefined) {
                ctx.strokeStyle = strokeStyle;
            }
            if (lineDash !== undefined) {
                ctx.setLineDash(lineDash);
            }
            const dataSeries = line()
                .x((d) => Math.round(xScale(xAccessor(d))))
                .y((d) => Math.round(yScale(yAccessor(d))));
            if (curve !== undefined) {
                dataSeries.curve(curve);
            }
            if (!connectNulls) {
                dataSeries.defined((d) => defined(yAccessor(d)));
            }
            ctx.beginPath();
            dataSeries.context(ctx)(plotData);
            ctx.stroke();
            if (canvasClip !== undefined) {
                ctx.restore();
            }
        };
        this.isHover = (moreProps) => {
            const { highlightOnHover, yAccessor, hoverTolerance = LineSeries.defaultProps.hoverTolerance } = this.props;
            if (!highlightOnHover) {
                return false;
            }
            const { chartConfig: { yScale, origin }, xAccessor, mouseXY, currentItem, xScale, plotData, } = moreProps;
            const [x, y] = mouseXY;
            const radius = hoverTolerance;
            const { left, right } = getClosestItemIndexes(plotData, xScale.invert(x), xAccessor);
            if (left === right) {
                const cy = yScale(yAccessor(currentItem)) + origin[1];
                const cx = xScale(xAccessor(currentItem)) + origin[0];
                const hovering1 = Math.pow(x - cx, 2) + Math.pow(y - cy, 2) < Math.pow(radius, 2);
                return hovering1;
            }
            else {
                const l = plotData[left];
                const r = plotData[right];
                const x1 = xScale(xAccessor(l)) + origin[0];
                const y1 = yScale(yAccessor(l)) + origin[1];
                const x2 = xScale(xAccessor(r)) + origin[0];
                const y2 = yScale(yAccessor(r)) + origin[1];
                // y = m * x + b
                const m /* slope */ = (y2 - y1) / (x2 - x1);
                const b /* y intercept */ = -1 * m * x1 + y1;
                const desiredY = Math.round(m * x + b);
                const hovering2 = y >= desiredY - radius && y <= desiredY + radius;
                return hovering2;
            }
        };
    }
    render() {
        const { highlightOnHover, onClick, onContextMenu, onDoubleClick, onHover, onUnHover, strokeDasharray, } = this.props;
        const hoverProps = highlightOnHover || onHover || onUnHover
            ? {
                isHover: this.isHover,
                drawOn: ["mousemove", "pan"],
                canvasToDraw: getMouseCanvas,
            }
            : {
                drawOn: ["pan"],
                canvasToDraw: getAxisCanvas,
            };
        const lineDash = getStrokeDasharrayCanvas(strokeDasharray);
        return (React.createElement(GenericChartComponent, Object.assign({ canvasDraw: this.drawOnCanvas(lineDash), onClickWhenHover: onClick, onDoubleClickWhenHover: onDoubleClick, onContextMenuWhenHover: onContextMenu, onHover: onHover, onUnHover: onUnHover }, hoverProps)));
    }
}
LineSeries.defaultProps = {
    connectNulls: false,
    defined: (d) => d !== undefined && !isNaN(d),
    hoverStrokeWidth: 4,
    hoverTolerance: 6,
    highlightOnHover: false,
    strokeDasharray: "Solid",
    strokeStyle: "#2196f3",
    strokeWidth: 1,
};
//# sourceMappingURL=LineSeries.js.map