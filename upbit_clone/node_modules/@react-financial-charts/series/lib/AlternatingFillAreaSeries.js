import * as React from "react";
import { AreaSeries } from "./AreaSeries";
import { SVGComponent } from "./SVGComponent";
/**
 * `AlternatingFillAreaSeries` component is similar to a `AreaSeries` but with different colors above and below the base.
 */
export class AlternatingFillAreaSeries extends React.Component {
    constructor() {
        super(...arguments);
        this.clipPathId1 = `alternating-area-clip-${String(Math.round(Math.random() * 10000 * 10000))}`;
        this.clipPathId2 = `alternating-area-clip-${String(Math.round(Math.random() * 10000 * 10000))}`;
        this.baseAt = (yScale) => {
            return yScale(this.props.baseAt);
        };
        this.renderClip = (moreProps) => {
            const { chartConfig } = moreProps;
            const { baseAt } = this.props;
            const { yScale, width, height } = chartConfig;
            return (React.createElement("defs", null,
                React.createElement("clipPath", { id: this.clipPathId1 },
                    React.createElement("rect", { x: 0, y: 0, width: width, height: yScale(baseAt) })),
                React.createElement("clipPath", { id: this.clipPathId2 },
                    React.createElement("rect", { x: 0, y: yScale(baseAt), width: width, height: height - yScale(baseAt) }))));
        };
        this.bottomClip = (ctx, moreProps) => {
            const { chartConfig } = moreProps;
            const { baseAt } = this.props;
            const { yScale, width, height } = chartConfig;
            ctx.beginPath();
            ctx.rect(0, yScale(baseAt), width, height - yScale(baseAt));
            ctx.clip();
        };
        this.topClip = (ctx, moreProps) => {
            const { chartConfig } = moreProps;
            const { baseAt } = this.props;
            const { yScale, width } = chartConfig;
            ctx.beginPath();
            ctx.rect(0, 0, width, yScale(baseAt));
            ctx.clip();
        };
    }
    render() {
        const { className, yAccessor, curve, strokeStyle = AlternatingFillAreaSeries.defaultProps.strokeStyle, strokeWidth = AlternatingFillAreaSeries.defaultProps.strokeWidth, strokeDasharray = AlternatingFillAreaSeries.defaultProps.strokeDasharray, fillStyle = AlternatingFillAreaSeries.defaultProps.fillStyle, } = this.props;
        return (React.createElement("g", { className: className },
            React.createElement(SVGComponent, null, this.renderClip),
            React.createElement(AreaSeries, { canvasClip: this.topClip, yAccessor: yAccessor, curve: curve, baseAt: this.baseAt, fillStyle: fillStyle.top, strokeStyle: strokeStyle.top, strokeDasharray: strokeDasharray.top, strokeWidth: strokeWidth.top }),
            React.createElement(AreaSeries, { canvasClip: this.bottomClip, yAccessor: yAccessor, curve: curve, baseAt: this.baseAt, fillStyle: fillStyle.bottom, strokeStyle: strokeStyle.bottom, strokeDasharray: strokeDasharray.bottom, strokeWidth: strokeWidth.bottom })));
    }
}
AlternatingFillAreaSeries.defaultProps = {
    className: "react-financial-charts-alternating-area",
    fillStyle: {
        top: "rgba(38, 166, 154, 0.1)",
        bottom: "rgba(239, 83, 80, 0.1)",
    },
    strokeStyle: {
        top: "#26a69a",
        bottom: "#ef5350",
    },
    strokeWidth: {
        top: 2,
        bottom: 2,
    },
    strokeDasharray: {
        top: "Solid",
        bottom: "Solid",
    },
};
//# sourceMappingURL=AlternatingFillAreaSeries.js.map