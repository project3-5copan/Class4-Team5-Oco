import { functor, getAxisCanvas, GenericChartComponent } from "@react-financial-charts/core";
import { group } from "d3-array";
import * as React from "react";
export class ScatterSeries extends React.Component {
    constructor() {
        super(...arguments);
        this.drawOnCanvas = (ctx, moreProps) => {
            const points = this.getMarkers(moreProps);
            const { markerProps } = this.props;
            const nest = group(points, 
            // @ts-ignore
            (d) => d.fillStyle, 
            // @ts-ignore
            (d) => d.strokeStyle);
            nest.forEach((fillValues, fillKey) => {
                if (fillKey !== "none") {
                    // @ts-ignore
                    ctx.fillStyle = fillKey;
                }
                fillValues.forEach((strokeValues) => {
                    // @ts-ignore
                    strokeValues.forEach((point) => {
                        const { marker } = point;
                        marker.drawOnCanvas(Object.assign(Object.assign(Object.assign({}, marker.defaultProps), markerProps), { fillStyle: fillKey }), point, ctx);
                    });
                });
            });
        };
        this.getMarkers = (moreProps) => {
            const { yAccessor, markerProvider, markerProps } = this.props;
            const { xAccessor, xScale, chartConfig: { yScale }, plotData, } = moreProps;
            let { marker: Marker } = this.props;
            if (!(markerProvider || Marker)) {
                throw new Error("required prop, either marker or markerProvider missing");
            }
            return plotData
                .map((d) => {
                const yValue = yAccessor(d);
                if (yValue === undefined) {
                    return undefined;
                }
                const xValue = xAccessor(d);
                if (markerProvider) {
                    Marker = markerProvider(d);
                }
                const mProps = Object.assign(Object.assign({}, Marker.defaultProps), markerProps);
                const fill = functor(mProps.fillStyle);
                const stroke = functor(mProps.strokeStyle);
                return {
                    x: xScale(xValue),
                    y: yScale(yValue),
                    fillStyle: fill(d),
                    strokeStyle: stroke(d),
                    datum: d,
                    marker: Marker,
                };
            })
                .filter((marker) => marker !== undefined);
        };
    }
    render() {
        return React.createElement(GenericChartComponent, { canvasDraw: this.drawOnCanvas, canvasToDraw: getAxisCanvas, drawOn: ["pan"] });
    }
}
//# sourceMappingURL=ScatterSeries.js.map