import { merge } from "d3-array";
import * as React from "react";
import { first, functor, getAxisCanvas, GenericChartComponent, plotDataLengthBarWidth, } from "@react-financial-charts/core";
import { drawOnCanvas2 } from "./StackedBarSeries";
export class OverlayBarSeries extends React.Component {
    constructor() {
        super(...arguments);
        this.drawOnCanvas = (ctx, moreProps) => {
            const bars = this.getBars(moreProps);
            drawOnCanvas2(this.props, ctx, bars);
        };
        this.getBars = (moreProps) => {
            const { xScale, xAccessor, chartConfig: { yScale }, plotData, } = moreProps;
            const { baseAt, fillStyle, stroke, yAccessor } = this.props;
            const getFill = functor(fillStyle);
            const getBase = functor(baseAt);
            const widthFunctor = functor(this.props.width);
            const width = widthFunctor(this.props, moreProps);
            const offset = Math.floor(0.5 * width);
            const bars = plotData.map((d) => {
                const innerBars = yAccessor
                    .map((eachYAccessor, i) => {
                    const yValue = eachYAccessor(d);
                    if (yValue === undefined) {
                        return undefined;
                    }
                    const xValue = xAccessor(d);
                    const x = Math.round(xScale(xValue)) - offset;
                    const y = yScale(yValue);
                    return {
                        height: 0,
                        width: offset * 2,
                        x,
                        y,
                        stroke: stroke ? getFill(d, i) : "none",
                        fillStyle: getFill(d, i),
                        i,
                    };
                })
                    .filter((yValue) => yValue !== undefined);
                let b = getBase(xScale, yScale, d);
                let h;
                for (let i = innerBars.length - 1; i >= 0; i--) {
                    h = b - innerBars[i].y;
                    if (h < 0) {
                        innerBars[i].y = b;
                        h = -1 * h;
                    }
                    innerBars[i].height = h;
                    b = innerBars[i].y;
                }
                return innerBars;
            });
            return merge(bars);
        };
    }
    render() {
        const { clip } = this.props;
        return (React.createElement(GenericChartComponent, { canvasToDraw: getAxisCanvas, canvasDraw: this.drawOnCanvas, clip: clip, drawOn: ["pan"] }));
    }
}
OverlayBarSeries.defaultProps = {
    baseAt: (xScale, yScale) => first(yScale.range()),
    clip: true,
    direction: "up",
    stroke: false,
    fillStyle: "#4682B4",
    widthRatio: 0.5,
    width: plotDataLengthBarWidth,
};
//# sourceMappingURL=OverlayBarSeries.js.map