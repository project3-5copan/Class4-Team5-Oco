import * as React from "react";
import { AutoSizerProps } from "react-virtualized-auto-sizer";
export interface WithSizeProps {
    readonly width: number;
    readonly height: number;
}
export declare const withSize: (props?: Pick<AutoSizerProps, "style" | "className" | "defaultHeight" | "defaultWidth" | "disableHeight" | "disableWidth" | "nonce" | "onResize"> | undefined) => <TProps extends WithSizeProps>(OriginalComponent: React.ComponentClass<TProps, any>) => {
    new (props: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Pick<TProps, Exclude<keyof TProps, "height" | "width">>, context?: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<TProps, Exclude<keyof TProps, "height" | "width">>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
