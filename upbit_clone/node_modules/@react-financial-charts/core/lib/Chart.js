import { scaleLinear } from "d3-scale";
import * as PropTypes from "prop-types";
import * as React from "react";
import { PureComponent } from "./utils";
export class Chart extends PureComponent {
    constructor() {
        super(...arguments);
        this.listener = (type, moreProps, _, e) => {
            const { id, onContextMenu, onDoubleClick } = this.props;
            switch (type) {
                case "contextmenu": {
                    if (onContextMenu === undefined) {
                        return;
                    }
                    const { currentCharts } = moreProps;
                    if (currentCharts.indexOf(id) > -1) {
                        onContextMenu(e, moreProps);
                    }
                    break;
                }
                case "dblclick": {
                    if (onDoubleClick === undefined) {
                        return;
                    }
                    const { currentCharts } = moreProps;
                    if (currentCharts.indexOf(id) > -1) {
                        onDoubleClick(e, moreProps);
                    }
                    break;
                }
            }
        };
    }
    componentDidMount() {
        const { id } = this.props;
        const { subscribe } = this.context;
        subscribe(`chart_${id}`, {
            listener: this.listener,
        });
    }
    componentWillUnmount() {
        const { id } = this.props;
        const { unsubscribe } = this.context;
        unsubscribe(`chart_${id}`);
    }
    getChildContext() {
        const { id: chartId } = this.props;
        const chartConfig = this.context.chartConfig.find(({ id }) => id === chartId);
        return {
            chartId,
            chartConfig,
        };
    }
    render() {
        const { origin } = this.context.chartConfig.find(({ id }) => id === this.props.id);
        const [x, y] = origin;
        return React.createElement("g", { transform: `translate(${x}, ${y})` }, this.props.children);
    }
}
Chart.defaultProps = {
    flipYScale: false,
    id: 0,
    origin: [0, 0],
    padding: 0,
    yPan: true,
    yPanEnabled: false,
    yScale: scaleLinear(),
};
Chart.contextTypes = {
    chartConfig: PropTypes.array,
    subscribe: PropTypes.func.isRequired,
    unsubscribe: PropTypes.func.isRequired,
};
Chart.childContextTypes = {
    chartConfig: PropTypes.object.isRequired,
    chartId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
};
//# sourceMappingURL=Chart.js.map