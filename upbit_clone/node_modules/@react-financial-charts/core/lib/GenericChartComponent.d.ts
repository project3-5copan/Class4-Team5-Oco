import * as PropTypes from "prop-types";
import { GenericComponent } from "./GenericComponent";
export declare class GenericChartComponent extends GenericComponent {
    static defaultProps: {
        svgDraw: any;
        draw: never[];
        canvasToDraw: (contexts: import("./CanvasContainer").ICanvasContexts) => CanvasRenderingContext2D | undefined;
        clip: boolean;
        edgeClip: boolean;
        selected: boolean;
        disablePan: boolean;
        enableDragOnHover: boolean;
    };
    static contextTypes: {
        width: PropTypes.Validator<number>;
        height: PropTypes.Validator<number>;
        margin: PropTypes.Validator<object>;
        chartId: PropTypes.Requireable<string | number>;
        getCanvasContexts: PropTypes.Requireable<(...args: any[]) => any>;
        xScale: PropTypes.Validator<(...args: any[]) => any>;
        xAccessor: PropTypes.Validator<(...args: any[]) => any>;
        displayXAccessor: PropTypes.Validator<(...args: any[]) => any>;
        plotData: PropTypes.Validator<any[]>;
        fullData: PropTypes.Validator<any[]>;
        chartConfig: PropTypes.Validator<object>;
        morePropsDecorator: PropTypes.Requireable<(...args: any[]) => any>;
        generateSubscriptionId: PropTypes.Requireable<(...args: any[]) => any>;
        getMutableState: PropTypes.Validator<(...args: any[]) => any>;
        amIOnTop: PropTypes.Validator<(...args: any[]) => any>;
        subscribe: PropTypes.Validator<(...args: any[]) => any>;
        unsubscribe: PropTypes.Validator<(...args: any[]) => any>;
        setCursorClass: PropTypes.Validator<(...args: any[]) => any>;
        canvasOriginX: PropTypes.Requireable<number>;
        canvasOriginY: PropTypes.Requireable<number>;
        ratio: PropTypes.Validator<number>;
    };
    constructor(props: any, context: any);
    preCanvasDraw(ctx: CanvasRenderingContext2D, moreProps: any): void;
    postCanvasDraw(ctx: CanvasRenderingContext2D, moreProps: any): void;
    updateMoreProps(moreProps: any): void;
    preEvaluate(): void;
    shouldTypeProceed(type: string, moreProps: any): boolean;
}
