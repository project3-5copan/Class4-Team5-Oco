import { ScaleContinuousNumeric, ScaleTime } from "d3-scale";
import * as React from "react";
interface EventCaptureProps {
    readonly mouseMove: boolean;
    readonly zoom: boolean;
    readonly pan: boolean;
    readonly panSpeedMultiplier: number;
    readonly focus: boolean;
    readonly useCrossHairStyleCursor?: boolean;
    readonly width: number;
    readonly height: number;
    readonly chartConfig: {
        origin: number[];
        height: number;
    }[];
    readonly xAccessor: any;
    readonly xScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>;
    readonly disableInteraction: boolean;
    readonly getAllPanConditions: () => {
        panEnabled: boolean;
        draggable: boolean;
    }[];
    readonly onClick?: (mouseXY: number[], event: React.MouseEvent) => void;
    readonly onContextMenu?: (mouseXY: number[], event: React.MouseEvent) => void;
    readonly onDoubleClick?: (mouseXY: number[], event: React.MouseEvent) => void;
    readonly onDragStart?: (details: {
        startPos: number[];
    }, event: React.MouseEvent) => void;
    readonly onDrag?: (details: {
        startPos: number[];
        mouseXY: number[];
    }, event: React.MouseEvent) => void;
    readonly onDragComplete?: (details: {
        mouseXY: number[];
    }, event: React.MouseEvent) => void;
    readonly onMouseDown?: (mouseXY: number[], currentCharts: string[], event: React.MouseEvent) => void;
    readonly onMouseMove?: (touchXY: number[], eventType: string, event: React.MouseEvent | React.TouchEvent) => void;
    readonly onMouseEnter?: (event: React.MouseEvent) => void;
    readonly onMouseLeave?: (event: React.MouseEvent) => void;
    readonly onPinchZoom?: (initialPinch: {
        readonly xScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>;
        readonly touch1Pos: [number, number];
        readonly touch2Pos: [number, number];
        readonly range: number[];
    }, currentPinch: {
        readonly xScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>;
        readonly touch1Pos: [number, number];
        readonly touch2Pos: [number, number];
    }, e: React.TouchEvent) => void;
    readonly onPinchZoomEnd?: (initialPinch: {
        readonly xScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>;
        readonly touch1Pos: [number, number];
        readonly touch2Pos: [number, number];
        readonly range: number[];
    }, e: React.TouchEvent) => void;
    readonly onPan?: (mouseXY: number[], panStartXScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>, panOrigin: {
        dx: number;
        dy: number;
    }, chartsToPan: string[], e: React.MouseEvent) => void;
    readonly onPanEnd?: (mouseXY: number[], panStartXScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>, panOrigin: {
        dx: number;
        dy: number;
    }, chartsToPan: string[], e: React.MouseEvent | React.TouchEvent) => void;
    readonly onZoom?: (zoomDir: 1 | -1, mouseXY: number[], event: React.WheelEvent) => void;
}
interface EventCaptureState {
    cursorOverrideClass?: string;
    dragInProgress?: boolean;
    dragStartPosition?: number[];
    panInProgress: boolean;
    panStart?: {
        panStartXScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>;
        panOrigin: number[];
        chartsToPan: string[];
    };
    pinchZoomStart?: {
        xScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>;
        touch1Pos: [number, number];
        touch2Pos: [number, number];
        range: number[];
        chartsToPan: string[];
    };
}
export declare class EventCapture extends React.Component<EventCaptureProps, EventCaptureState> {
    static defaultProps: {
        mouseMove: boolean;
        zoom: boolean;
        pan: boolean;
        panSpeedMultiplier: number;
        focus: boolean;
        disableInteraction: boolean;
    };
    private clicked?;
    private dx?;
    private dy?;
    private dragHappened?;
    private focus?;
    private lastNewPos?;
    private mouseInside;
    private mouseInteraction;
    private panEndTimeout?;
    private panHappened?;
    private readonly ref;
    constructor(props: EventCaptureProps);
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    readonly handleEnter: () => void;
    handleLeave: (e: React.MouseEvent) => void;
    handleWheel: (e: React.WheelEvent) => void;
    queuePanEnd(): void;
    handleMouseMove: () => void;
    handleClick: (e: React.MouseEvent) => void;
    handleRightClick: (e: React.MouseEvent) => void;
    handleDrag: () => void;
    cancelDrag(): void;
    handleDragEnd: () => void;
    canPan: () => {
        panEnabled: boolean;
        somethingSelected: boolean;
    };
    handleMouseDown: (e: React.MouseEvent) => void;
    shouldPan: () => boolean | undefined;
    handlePan: () => void;
    handlePanEnd: () => void;
    handleTouchMove: (e: React.TouchEvent) => void;
    handleTouchStart: (e: React.TouchEvent) => void;
    handlePinchZoom: () => void;
    handlePinchZoomEnd: () => void;
    setCursorClass: (cursorOverrideClass: string) => void;
    render(): JSX.Element;
}
export {};
