import { ScaleContinuousNumeric } from "d3-scale";
import * as PropTypes from "prop-types";
import * as React from "react";
import { PureComponent } from "./utils";
export interface ChartProps {
    readonly flipYScale?: boolean;
    readonly height?: number;
    readonly id: number | string;
    readonly onContextMenu?: (event: React.MouseEvent, moreProps: any) => void;
    readonly onDoubleClick?: (event: React.MouseEvent, moreProps: any) => void;
    readonly origin?: number[] | ((width: number, height: number) => number[]);
    readonly padding?: number | {
        top: number;
        bottom: number;
    };
    readonly yExtents?: number[] | ((data: any) => number) | ((data: any) => number[]);
    readonly yExtentsCalculator?: (options: {
        plotData: any[];
        xDomain: any;
        xAccessor: any;
        displayXAccessor: any;
        fullData: any[];
    }) => number[];
    readonly yPan?: boolean;
    readonly yPanEnabled?: boolean;
    readonly yScale?: ScaleContinuousNumeric<number, number>;
}
export declare class Chart extends PureComponent<ChartProps> {
    static defaultProps: {
        flipYScale: boolean;
        id: number;
        origin: number[];
        padding: number;
        yPan: boolean;
        yPanEnabled: boolean;
        yScale: import("d3-scale").ScaleLinear<number, number>;
    };
    static contextTypes: {
        chartConfig: PropTypes.Requireable<any[]>;
        subscribe: PropTypes.Validator<(...args: any[]) => any>;
        unsubscribe: PropTypes.Validator<(...args: any[]) => any>;
    };
    static childContextTypes: {
        chartConfig: PropTypes.Validator<object>;
        chartId: PropTypes.Validator<string | number>;
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    getChildContext(): {
        chartId: string | number;
        chartConfig: any;
    };
    render(): JSX.Element;
    private readonly listener;
}
